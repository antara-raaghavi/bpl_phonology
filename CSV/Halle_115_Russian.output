[['vʲirnú', 'vʲirnúl', 'vʲirnúla', 'vʲirnúlʲi', '', ''], ['vrú', 'vrál', 'vralá', 'vrálʲi', '', ''], ['stajú', 'stajál', 'stajála', 'stajálʲi', '', ''], ['pʲikú', 'pʲók', 'pʲiklá', 'pʲiklʲí', 'pʲóklʲi', 'pʲóɡbɨ'], ['vʲizú', 'vʲós', 'vʲizlá', 'vʲizlʲí', 'vʲóslʲi', 'vʲóbɨ'], ['maɡú', 'mók', 'maɡlá', 'maɡlʲí', 'móklʲi', 'móɡbɨ'], ['móknu', 'mók', 'mókla', 'móklʲi', 'móklʲi', 'móɡbɨ']]
vʲirnú  >  ['O', 'i', 'r', 'n', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X'}
vʲirnúl  >  ['O', 'i', 'r', 'n', 'X', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X'}
vʲirnúla  >  ['O', 'i', 'r', 'n', 'X', 'l', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X'}
vʲirnúlʲi  >  ['O', 'i', 'r', 'n', 'X', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z'}
vrú  >  ['v', 'r', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z'}
vrál  >  ['v', 'r', '1', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
vralá  >  ['v', 'r', 'a', 'l', '1'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
vrálʲi  >  ['v', 'r', '1', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
stajú  >  ['s', 't', 'a', 'j', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
stajál  >  ['s', 't', 'a', 'j', '1', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
stajála  >  ['s', 't', 'a', 'j', '1', 'l', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
stajálʲi  >  ['s', 't', 'a', 'j', '1', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1'}
pʲikú  >  ['2', 'i', 'k', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2'}
pʲók  >  ['2', '3', 'k'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3'}
pʲiklá  >  ['2', 'i', 'k', 'l', '1'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3'}
pʲiklʲí  >  ['2', 'i', 'k', 'Z', '4'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4'}
pʲóklʲi  >  ['2', '3', 'k', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4'}
pʲóɡbɨ  >  ['2', '3', 'g', 'b', '5'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
vʲizú  >  ['O', 'i', 'z', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
vʲós  >  ['O', '3', 's'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
vʲizlá  >  ['O', 'i', 'z', 'l', '1'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
vʲizlʲí  >  ['O', 'i', 'z', 'Z', '4'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
vʲóslʲi  >  ['O', '3', 's', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
vʲóbɨ  >  ['O', '3', 'b', '5'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
maɡú  >  ['m', 'a', 'g', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
mók  >  ['m', '3', 'k'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
maɡlá  >  ['m', 'a', 'g', 'l', '1'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
maɡlʲí  >  ['m', 'a', 'g', 'Z', '4'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
móklʲi  >  ['m', '3', 'k', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
móɡbɨ  >  ['m', '3', 'g', 'b', '5'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
móknu  >  ['m', '3', 'k', 'n', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
mók  >  ['m', '3', 'k'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
mókla  >  ['m', '3', 'k', 'l', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
móklʲi  >  ['m', '3', 'k', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
móklʲi  >  ['m', '3', 'k', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
móɡbɨ  >  ['m', '3', 'g', 'b', '5'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'vʲ': 'O', 'ú': 'X', 'lʲ': 'Z', 'á': '1', 'pʲ': '2', 'ó': '3', 'í': '4', 'ɨ': '5'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   4))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   5))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   6))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   7))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   8))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   9))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   10))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   11))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   12))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   13))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   14))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   15))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   16))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   17))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   18))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= "OirnX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "OirnXl" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "OirnXla" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "OirnXZi" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= "vrX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "vr1l" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "vral1" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "vr1Zi" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= "stajX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "staj1l" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "staj1la" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "staj1Zi" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= "2ikX" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "23k" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "2ikl1" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "2ikZ4" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "23kZi" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "23gb5" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= "OizX" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "O3s" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Oizl1" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "OizZ4" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "O3sZi" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "O3b5" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= "magX" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "m3k" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "magl1" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "magZ4" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "m3kZi" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "m3gb5" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= "m3knu" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "m3k" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "m3kla" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "m3kZi" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "m3kZi" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "m3gb5" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F)
   19))

None
56572.37user 2.15system 15:43:08elapsed 99%CPU (0avgtext+0avgdata 220964maxresident)k
0inputs+704outputs (0major+55805minor)pagefaults 0swaps
