[['tie', 'tietiər'], ['mian', 'mianmiər'], ['tai', 'taitər'], ['pau', 'paupər'], ['ke', 'kekər'], ['fa', 'fafər'], ['o', 'oər'], ['ti', 'titiər'], ['tin', 'tintiər'], ['pʰu', 'pʰupʰər'], ['tçj', 'tçjtçjər']]
tie  >  ['t', 'i', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tietiər  >  ['t', 'i', 'e', 't', 'i', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
mian  >  ['m', 'i', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
mianmiər  >  ['m', 'i', 'a', 'n', 'm', 'i', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tai  >  ['t', 'a', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
taitər  >  ['t', 'a', 'i', 't', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
pau  >  ['p', 'a', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
paupər  >  ['p', 'a', 'u', 'p', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
ke  >  ['k', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
kekər  >  ['k', 'e', 'k', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
fa  >  ['f', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
fafər  >  ['f', 'a', 'f', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
o  >  ['o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
oər  >  ['o', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
ti  >  ['t', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
titiər  >  ['t', 'i', 't', 'i', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tin  >  ['t', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tintiər  >  ['t', 'i', 'n', 't', 'i', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
pʰu  >  ['O', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'pʰ': 'O'}
pʰupʰər  >  ['O', 'u', 'O', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'pʰ': 'O'}
tçj  >  ['t', 'X', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'pʰ': 'O', 'ç': 'X'}
tçjtçjər  >  ['t', 'X', 'j', 't', 'X', 'j', 'H', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'pʰ': 'O', 'ç': 'X'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   4))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   5))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   6))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   7))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   8))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   9))

t
ta
tai
tait
tait∅
tait∅ə
tait∅ər
p
pa
pau
pau∅
pau∅p
pau∅pə
pau∅pər
k
ke
ke∅
ke∅k
ke∅kə
ke∅kər
f
fa
fa∅
fa∅f
fa∅fə
fa∅fər
o
o∅
o∅ə
o∅ər
[('tie', 'tie'), ('tietiər', 'tietiər'), ('mian', 'mian'), ('miantiər', 'mianmiər'), ('tai', 'tai'), ('taitiər', 'tait∅ər'), ('pau', 'pau'), ('pautiər', 'pau∅pər'), ('ke', 'ke'), ('ketiər', 'ke∅kər'), ('fa', 'fa'), ('fatiər', 'fa∅fər'), ('o', 'o'), ('otiər', 'o∅ər'), ('ti', 'ti'), ('titiər', 'titiər'), ('tin', 'tin'), ('tintiər', 'tintiər'), ('pʰu', 'pʰu'), ('pʰutiər', 'pʰupʰər'), ('tçjtçjər\\x00', 'tçj'), ('tçjtçjər\\x00tiər', 'tçjtçjər')]
underlying: #
underlying: o
underlying: t
underlying: i
underlying: ə
underlying: r
underlying: #
surface: #
surface: o
surface: ∅
surface: ə
surface: r
surface: #
underlying: #
underlying: pʰ
underlying: u
underlying: t
underlying: i
underlying: ə
underlying: r
underlying: #
surface: #
surface: pʰ
surface: u
surface: pʰ
surface: ə
surface: r
surface: #
WARNING: z3str returned invalid symbols
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   10))

t
ta
tai
tai∅
tai∅ə
tai∅ər
k
ke
ke∅
ke∅ə
ke∅ər
[('tieti', 'tie∅'), ('tietiər', 'tietiər'), ('mianmi', 'mian∅'), ('mianmiər', 'mianmiər'), ('tai', 'tai'), ('tai∅ər', 'taitər'), ('paup', 'pau∅'), ('paupər', 'paupər'), ('ke', 'ke'), ('ke∅ər', 'kekər'), ('faf', 'fa∅'), ('fafər', 'fafər'), ('o', 'o'), ('oər', 'oər'), ('titi', 'ti∅'), ('titiər', 'titiər'), ('tinti', 'tin∅'), ('tintiər', 'tintiər'), ('pʰupʰ', 'pʰu'), ('pʰupʰər', 'pʰupʰər'), ('tçjtçj', 'tçj∅'), ('tçjtçjər', 'tçjtçjər')]
underlying: #
underlying: t
underlying: i
underlying: e
underlying: t
underlying: i
underlying: #
surface: #
surface: t
surface: i
surface: e
surface: ∅
surface: #
underlying: #
underlying: m
underlying: i
underlying: a
underlying: n
underlying: m
underlying: i
underlying: #
surface: #
surface: m
surface: i
surface: a
surface: n
surface: ∅
surface: #
underlying: #
underlying: t
underlying: i
underlying: t
underlying: i
underlying: #
surface: #
surface: t
surface: i
surface: ∅
surface: #
underlying: #
underlying: t
underlying: i
underlying: n
underlying: t
underlying: i
underlying: #
surface: #
surface: t
surface: i
surface: n
surface: ∅
surface: #
underlying: #
underlying: pʰ
underlying: u
underlying: pʰ
underlying: #
surface: #
surface: pʰ
surface: u
surface: #
underlying: #
underlying: t
underlying: ç
underlying: j
underlying: t
underlying: ç
underlying: j
underlying: #
surface: #
surface: t
surface: ç
surface: j
surface: ∅
surface: #
[1;31mUnsatisfiable constraints:[0;31m
/e . t . i/ changed
/e . t . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . ∅ . ə/ changed
/i . ∅ . ə/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . ∅ . ə/ didn't change
/i . ∅ . ə/ changed
[0;0m
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   11))

t
ta
tai
tai∅
tai∅ə
tai∅ər
t
ti
tin
tint
tinti
tinti∅
tinti∅ə
tinti∅ər
[('tieti', 'tie∅'), ('tietiər', 'tietiər'), ('mianmi', 'mian∅'), ('mianmiər', 'mianmiər'), ('tai', 'tai'), ('tai∅ər', 'taitər'), ('paup', 'pau∅'), ('paupər', 'paupər'), ('kek', 'ke∅'), ('kekər', 'kekər'), ('faf', 'fa∅'), ('fafər', 'fafər'), ('o', 'o'), ('oər', 'oər'), ('titi', 'ti∅'), ('titiər', 'titiər'), ('tintin', 'tin∅'), ('tintinər', 'tinti∅ər'), ('pʰu', 'pʰu'), ('pʰuər', 'pʰupʰər'), ('tçjtçj', 'tçj∅'), ('tçjtçjər', 'tçjtçjər')]
underlying: #
underlying: t
underlying: i
underlying: e
underlying: t
underlying: i
underlying: #
surface: #
surface: t
surface: i
surface: e
surface: ∅
surface: #
underlying: #
underlying: m
underlying: i
underlying: a
underlying: n
underlying: m
underlying: i
underlying: #
surface: #
surface: m
surface: i
surface: a
surface: n
surface: ∅
surface: #
underlying: #
underlying: t
underlying: i
underlying: t
underlying: i
underlying: #
surface: #
surface: t
surface: i
surface: ∅
surface: #
underlying: #
underlying: t
underlying: i
underlying: n
underlying: t
underlying: i
underlying: n
underlying: #
surface: #
surface: t
surface: i
surface: n
surface: ∅
surface: #
underlying: #
underlying: pʰ
underlying: u
underlying: ə
underlying: r
underlying: #
surface: #
surface: pʰ
surface: u
surface: pʰ
surface: ə
surface: r
surface: #
underlying: #
underlying: t
underlying: ç
underlying: j
underlying: t
underlying: ç
underlying: j
underlying: #
surface: #
surface: t
surface: ç
surface: j
surface: ∅
surface: #
[1;31mUnsatisfiable constraints:[0;31m
/e . t . i/ changed
/e . t . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . ∅ . ə/ changed
/i . ∅ . ə/ didn't change
[0;0m
Rule: ({'labial': '+', 'high': '+'}, {'sonorant': '+'}, {})
N: 99
N+: 1
N-: 98
Simplicity weight: 1
Likelihood weight: 30
Objective: 57990
Simplicity score: 57990
Simplicity: 57990
Log # models: 158
Likelihood: 4740
[1;31mUnsatisfiable constraints:[0;31m
/e . t . i/ didn't change
/e . t . i/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . ∅ . ə/ changed
/i . ∅ . ə/ didn't change
[0;0m
Rule: ({'spread glottis': '+'}, {'labial': '-'}, {})
N: 91
N+: 1
N-: 90
Simplicity weight: 1
Likelihood weight: 30
Objective: 54090
Simplicity score: 54090
Simplicity: 54090
Log # models: 168
Likelihood: 5040
[1;31mUnsatisfiable constraints:[0;31m
/e . t . i/ changed
/e . t . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . ∅ . ə/ changed
/i . ∅ . ə/ didn't change
[0;0m
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   12))

∅
∅t
∅ti
∅tin
∅
∅i
∅in
∅int
∅inti
∅intiə
∅intiər
[('tietin', 'tie∅'), ('tietiər', 'tietiər'), ('mianmin', 'mian∅'), ('mianmiər', 'mianmiər'), ('taitn', 'tai∅'), ('taitər', 'taitər'), ('paupn', 'pau∅'), ('paupər', 'paupər'), ('kekn', 'ke∅'), ('kekər', 'kekər'), ('fafn', 'fa∅'), ('fafər', 'fafər'), ('on', 'o∅'), ('oər', 'oər'), ('titin', 'ti∅'), ('titiər', 'titiər'), ('intin', '∅tin'), ('∅intiər', 'tintiər'), ('pʰupʰn', 'pʰu'), ('pʰupʰər', 'pʰupʰər'), ('tçjtçjn', 'tçj∅'), ('tçjtçjər', 'tçjtçjər')]
underlying: #
underlying: t
underlying: i
underlying: e
underlying: t
underlying: i
underlying: n
underlying: #
surface: #
surface: t
surface: i
surface: e
surface: ∅
surface: #
underlying: #
underlying: m
underlying: i
underlying: a
underlying: n
underlying: m
underlying: i
underlying: n
underlying: #
surface: #
surface: m
surface: i
surface: a
surface: n
surface: ∅
surface: #
underlying: #
underlying: t
underlying: a
underlying: i
underlying: t
underlying: n
underlying: #
surface: #
surface: t
surface: a
surface: i
surface: ∅
surface: #
underlying: #
underlying: p
underlying: a
underlying: u
underlying: p
underlying: n
underlying: #
surface: #
surface: p
surface: a
surface: u
surface: ∅
surface: #
underlying: #
underlying: k
underlying: e
underlying: k
underlying: n
underlying: #
surface: #
surface: k
surface: e
surface: ∅
surface: #
underlying: #
underlying: f
underlying: a
underlying: f
underlying: n
underlying: #
surface: #
surface: f
surface: a
surface: ∅
surface: #
underlying: #
underlying: t
underlying: i
underlying: t
underlying: i
underlying: n
underlying: #
surface: #
surface: t
surface: i
surface: ∅
surface: #
underlying: #
underlying: i
underlying: n
underlying: t
underlying: i
underlying: n
underlying: #
surface: #
surface: ∅
surface: t
surface: i
surface: n
surface: #
underlying: #
underlying: pʰ
underlying: u
underlying: pʰ
underlying: n
underlying: #
surface: #
surface: pʰ
surface: u
surface: #
underlying: #
underlying: t
underlying: ç
underlying: j
underlying: t
underlying: ç
underlying: j
underlying: n
underlying: #
surface: #
surface: t
surface: ç
surface: j
surface: ∅
surface: #
[1;31mUnsatisfiable constraints:[0;31m
/o . n . #/ changed
/i . t . n/ changed
/t . i . e/ didn't change
/e . t . i/ changed
/a . f . n/ changed
/n . m . i/ changed
/# . i . n/ changed
/e . k . n/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . n . t/ changed
/t . i . e/ didn't change
/n . t . i/ changed
/t . i . n/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/# . ∅ . i/ didn't change
/# . ∅ . i/ changed
[0;0m
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "tie" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "tietiHr" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "mian" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "mianmiHr" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "tai" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "taitHr" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "pau" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "paupHr" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "ke" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "kekHr" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "fa" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "fafHr" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "o" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "oHr" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "ti" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "titiHr" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "tin" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "tintiHr" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "Ou" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "OuOHr" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "tXj" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "tXjtXjHr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B)
   13))
