[['atrózɨ', 'bʲizrózɨ', 'urózɨ'], ['atálɨ', 'bʲizálɨ', 'uálɨ'], ['atkaróvɨ', 'bʲizkaróvɨ', 'ukaróvɨ'], ['adbaradɨ́', 'bʲizbaradɨ́', 'ubaradɨ́'], ['atsʲistrɨ́', 'bʲissʲistrɨ́', 'usʲistrɨ́']]
atrózɨ  >  ['a', 't', 'r', 'O', 'z', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X'}
bʲizrózɨ  >  ['Z', 'i', 'z', 'r', 'O', 'z', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z'}
urózɨ  >  ['u', 'r', 'O', 'z', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z'}
atálɨ  >  ['a', 't', '1', 'l', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1'}
bʲizálɨ  >  ['Z', 'i', 'z', '1', 'l', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1'}
uálɨ  >  ['u', '1', 'l', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1'}
atkaróvɨ  >  ['a', 't', 'k', 'a', 'r', 'O', 'v', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1'}
bʲizkaróvɨ  >  ['Z', 'i', 'z', 'k', 'a', 'r', 'O', 'v', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1'}
ukaróvɨ  >  ['u', 'k', 'a', 'r', 'O', 'v', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1'}
adbaradɨ́  >  ['a', 'd', 'b', 'a', 'r', 'a', 'd', '2'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1', 'ɨ́': '2'}
bʲizbaradɨ́  >  ['Z', 'i', 'z', 'b', 'a', 'r', 'a', 'd', '2'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1', 'ɨ́': '2'}
ubaradɨ́  >  ['u', 'b', 'a', 'r', 'a', 'd', '2'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1', 'ɨ́': '2'}
atsʲistrɨ́  >  ['a', 't', '3', 'i', 's', 't', 'r', '2'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1', 'ɨ́': '2', 'sʲ': '3'}
bʲissʲistrɨ́  >  ['Z', 'i', 's', '3', 'i', 's', 't', 'r', '2'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1', 'ɨ́': '2', 'sʲ': '3'}
usʲistrɨ́  >  ['u', '3', 'i', 's', 't', 'r', '2'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ó': 'O', 'ɨ': 'X', 'bʲ': 'Z', 'á': '1', 'ɨ́': '2', 'sʲ': '3'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   4))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   4))
(assert (= (+ 0 sc0B sc1B sc2B sc3B sc4B) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   4))
(assert (= (+ 0 sc0C sc1C sc2C sc3C sc4C) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   5))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   5))
(assert (= (+ 0 sc0B sc1B sc2B sc3B sc4B) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   5))
(assert (= (+ 0 sc0C sc1C sc2C sc3C sc4C) 0))

[('atrózɨ', 'atrózɨ'), ('bʲisrózɨ', 'bʲizrózɨ'), ('urózɨ', 'urózɨ'), ('atálɨ', 'atálɨ'), ('bʲisálɨ', 'bʲizálɨ'), ('uálɨ', 'uálɨ'), ('atkaróvɨ', 'atkaróvɨ'), ('bʲiskaróvɨ', 'bʲizkaróvɨ'), ('ukaróvɨ', 'ukaróvɨ'), ('atbaradɨ́', 'adbaradɨ́'), ('bʲisbaradɨ́', 'bʲizbaradɨ́'), ('ubaradɨ́', 'ubaradɨ́'), ('atsʲistrɨ́', 'atsʲistrɨ́'), ('bʲissʲistrɨ́', 'bʲissʲistrɨ́'), ('usʲistrɨ́', 'usʲistrɨ́')]
[1;31mUnsatisfiable constraints:[0;31m
/a . t . á/ didn't change
/i . s . á/ changed
/a . t . b/ changed
/i . s . r/ changed
[0;0m
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   6))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   6))
(assert (= (+ 0 sc0B sc1B sc2B sc3B sc4B) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   6))
(assert (= (+ 0 sc0C sc1C sc2C sc3C sc4C) 0))

[('atrózɨ', 'atrózɨ'), ('bʲi\\x00rózɨ', 'bʲizrózɨ'), ('urózɨ', 'urózɨ'), ('atálɨ', 'atálɨ'), ('bʲi\\x00álɨ', 'bʲizálɨ'), ('uálɨ', 'uálɨ'), ('atkaróvɨ', 'atkaróvɨ'), ('bʲi\\x00karóvɨ', 'bʲizkaróvɨ'), ('ukaróvɨ', 'ukaróvɨ'), ('atbaradɨ́', 'adbaradɨ́'), ('bʲi\\x00baradɨ́', 'bʲizbaradɨ́'), ('ubaradɨ́', 'ubaradɨ́'), ('atsʲistrɨ́', 'atsʲistrɨ́'), ('bʲi\\x00sʲistrɨ́', 'bʲissʲistrɨ́'), ('usʲistrɨ́', 'usʲistrɨ́')]
WARNING: z3str returned invalid symbols
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   7))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   7))
(assert (= (+ 0 sc0B sc1B sc2B sc3B sc4B) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   7))
(assert (= (+ 0 sc0C sc1C sc2C sc3C sc4C) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   8))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   8))
(assert (= (+ 0 sc0B sc1B sc2B sc3B sc4B) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   8))
(assert (= (+ 0 sc0C sc1C sc2C sc3C sc4C) 0))

[('adrózɨ', 'atrózɨ'), ('bʲisrózɨ', 'bʲizrózɨ'), ('urózɨ', 'urózɨ'), ('adálɨ', 'atálɨ'), ('bʲisálɨ', 'bʲizálɨ'), ('uálɨ', 'uálɨ'), ('adkaróvɨ', 'atkaróvɨ'), ('bʲiskaróvɨ', 'bʲizkaróvɨ'), ('ukaróvɨ', 'ukaróvɨ'), ('adbaradɨ́', 'adbaradɨ́'), ('bʲisbaradɨ́', 'bʲizbaradɨ́'), ('ubaradɨ́', 'ubaradɨ́'), ('adsʲistrɨ́', 'atsʲistrɨ́'), ('bʲissʲistrɨ́', 'bʲissʲistrɨ́'), ('usʲistrɨ́', 'usʲistrɨ́')]
[1;31mUnsatisfiable constraints:[0;31m
/a . d . r/ changed
/a . d . ɨ́/ didn't change
/a . d . á/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . s . k/ changed
/i . s . r/ changed
/i . s . t/ didn't change
[0;0m
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   9))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   9))
(assert (= (+ 0 sc0B sc1B sc2B sc3B sc4B) 0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   9))
(assert (= (+ 0 sc0C sc1C sc2C sc3C sc4C) 0))

[('atsʲitrózɨ', 'atrózɨ'), ('bʲisrózɨ', 'bʲizrózɨ'), ('urózɨ', 'urózɨ'), ('atsʲitálɨ', 'atálɨ'), ('bʲisálɨ', 'bʲizálɨ'), ('uálɨ', 'uálɨ'), ('atsʲitkaróvɨ', 'atkaróvɨ'), ('bʲiskaróvɨ', 'bʲizkaróvɨ'), ('ukaróvɨ', 'ukaróvɨ'), ('atsʲitbaradɨ́', 'adbaradɨ́'), ('bʲisbaradɨ́', 'bʲizbaradɨ́'), ('ubaradɨ́', 'ubaradɨ́'), ('atsʲitsʲistrɨ́', 'atsʲistrɨ́'), ('bʲissʲistrɨ́', 'bʲissʲistrɨ́'), ('usʲistrɨ́', 'usʲistrɨ́')]
underlying: #
underlying: a
underlying: t
underlying: sʲ
underlying: i
underlying: t
underlying: r
underlying: ó
underlying: z
underlying: ɨ
underlying: #
surface: #
surface: a
surface: t
surface: r
surface: ó
surface: z
surface: ɨ
surface: #
underlying: #
underlying: a
underlying: t
underlying: sʲ
underlying: i
underlying: t
underlying: á
underlying: l
underlying: ɨ
underlying: #
surface: #
surface: a
surface: t
surface: á
surface: l
surface: ɨ
surface: #
underlying: #
underlying: a
underlying: t
underlying: sʲ
underlying: i
underlying: t
underlying: k
underlying: a
underlying: r
underlying: ó
underlying: v
underlying: ɨ
underlying: #
surface: #
surface: a
surface: t
surface: k
surface: a
surface: r
surface: ó
surface: v
surface: ɨ
surface: #
underlying: #
underlying: a
underlying: t
underlying: sʲ
underlying: i
underlying: t
underlying: b
underlying: a
underlying: r
underlying: a
underlying: d
underlying: ɨ́
underlying: #
surface: #
surface: a
surface: d
surface: b
surface: a
surface: r
surface: a
surface: d
surface: ɨ́
surface: #
underlying: #
underlying: a
underlying: t
underlying: sʲ
underlying: i
underlying: t
underlying: sʲ
underlying: i
underlying: s
underlying: t
underlying: r
underlying: ɨ́
underlying: #
surface: #
surface: a
surface: t
surface: sʲ
surface: i
surface: s
surface: t
surface: r
surface: ɨ́
surface: #
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ changed
/sʲ . i . s/ changed
/i . t . b/ changed
/a . t . sʲ/ didn't change
/i . t . k/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . t/ didn't change
/sʲ . i . t/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . t . á/ didn't change
/i . t . r/ changed
/i . s . á/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . t . á/ changed
/t . r . ó/ changed
/i . s . á/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ changed
/t . sʲ . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . t/ changed
/sʲ . i . t/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ didn't change
/t . sʲ . i/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . t/ didn't change
/sʲ . i . t/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/k . a . r/ changed
/k . a . r/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/a . t . sʲ/ changed
/a . t . sʲ/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ changed
/t . sʲ . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/a . r . a/ changed
/i . s . t/ changed
/i . s . r/ didn't change
[0;0m
Rule: ({'high': '+'}, {}, {'delayed release': '+'})
N: 95
N+: 1
N-: 94
Simplicity weight: 1
Likelihood weight: 30
Objective: 107920
Simplicity score: 107920
Simplicity: 107920
Log # models: 149
Likelihood: 4470
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . s/ changed
/i . t . b/ changed
/a . t . sʲ/ didn't change
/t . sʲ . i/ changed
/i . t . k/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . t/ didn't change
/sʲ . i . t/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . t . á/ didn't change
/i . t . r/ changed
/i . s . á/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . r . ó/ changed
/i . s . á/ didn't change
/i . t . á/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ changed
/t . sʲ . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . t/ didn't change
/sʲ . i . t/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ didn't change
/t . sʲ . i/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/sʲ . i . t/ didn't change
/sʲ . i . t/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/k . a . r/ didn't change
/k . a . r/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/a . t . sʲ/ didn't change
/a . t . sʲ/ changed
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/t . sʲ . i/ changed
/t . sʲ . i/ didn't change
[0;0m
[1;31mUnsatisfiable constraints:[0;31m
/i . s . t/ changed
/a . r . a/ changed
/i . s . r/ didn't change
[0;0m
None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "atrOzX" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "ZizrOzX" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "urOzX" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "at1lX" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "Ziz1lX" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "u1lX" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "atkarOvX" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "ZizkarOvX" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "ukarOvX" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "adbarad2" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "Zizbarad2" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "ubarad2" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "at3istr2" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Zis3istr2" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "u3istr2" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C)
   10))
(assert (= (+ 0 sc0A sc1A sc2A sc3A sc4A) 0))
