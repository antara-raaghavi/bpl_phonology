[['aɣa', 'aɣalar', 'aɣalɨɨn'], ['paarta', 'paartalar', 'paartalɨɨn'], ['tɨa', 'tɨalar', 'tɨalɨɨn'], ['kiniɡe', 'kiniɡeler', 'kiniɡeliin'], ['ʃie', 'ʃieler', 'ʃieliin'], ['ije', 'ijeler', 'ijeliin'], ['kini', 'kiniler', 'kiniliin'], ['bie', 'bieler', 'bieliin'], ['oɣo', 'oɣolor', 'oɣoluun'], ['χopto', 'χoptolor', 'χoptoluun'], ['børø', 'børølør', 'børølyyn'], ['tɨal', 'tɨallar', 'tɨallɨɨn'], ['ɨal', 'ɨallar', 'ɨallɨɨn'], ['kuul', 'kuullar', 'kuulluun'], ['at', 'attar', 'attɨɨn'], ['balɨk', 'balɨktar', 'balɨktɨɨn'], ['ɨskaap', 'ɨskaaptar', 'ɨskaaptɨɨn'], ['oɣus', 'oɣustar', 'oɣustuun'], ['kus', 'kustar', 'kustuun'], ['tynnyk', 'tynnykter', 'tynnyktyyn'], ['sep', 'septer', 'septiin'], ['et', 'etter', 'ettiin'], ['ørys', 'øryster', 'ørystyyn'], ['tiis', 'tiister', 'tiistiin'], ['soroχ', 'soroχtor', 'soroχtuun'], ['oχ', 'oχtor', 'oχtuun'], ['oloppos', 'oloppostor', 'oloppostuun'], ['øtøχ', 'øtøχtør', 'øtøχtyyn'], ['ubaj', 'ubajdar', 'ubajdɨɨn'], ['saraj', 'sarajdar', 'sarajdɨɨn'], ['tɨj', 'tɨjdar', 'tɨjdɨɨn'], ['atɨɨr', 'atɨɨrdar', 'atɨɨrdɨɨn'], ['ojuur', 'ojuurdar', 'ojuurduun'], ['yʧyɡej', 'yʧyɡejder', 'yʧyɡejdiin'], ['eʃiij', 'eʃiijder', 'eʃiijdiin'], ['tomtor', 'tomtordor', 'tomtorduun'], ['moɣotoj', 'moɣotojdor', 'moɣotojduun'], ['køtør', 'køtørdør', 'køtørdyyn'], ['bølkøj', 'bølkøjdør', 'bølkøjdyyn'], ['χatɨŋ', 'χatɨŋnar', 'χatɨŋnɨɨn'], ['aan', 'aannar', 'aannɨɨn'], ['tiiŋ', 'tiiŋner', 'tiiŋniin'], ['sordoŋ', 'sordoŋnor', 'sordoŋnuun'], ['olom', 'olomnor', 'olomnuun'], ['oron', 'oronnor', 'oronnuun'], ['bødøŋ', 'bødøŋnør', 'bødøŋnyyn']]
aɣa  >  ['a', 'O', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O'}
aɣalar  >  ['a', 'O', 'a', 'l', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O'}
aɣalɨɨn  >  ['a', 'O', 'a', 'l', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
paarta  >  ['p', 'a', 'a', 'r', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
paartalar  >  ['p', 'a', 'a', 'r', 't', 'a', 'l', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
paartalɨɨn  >  ['p', 'a', 'a', 'r', 't', 'a', 'l', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
tɨa  >  ['t', 'X', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
tɨalar  >  ['t', 'X', 'a', 'l', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
tɨalɨɨn  >  ['t', 'X', 'a', 'l', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
kiniɡe  >  ['k', 'i', 'n', 'i', 'g', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
kiniɡeler  >  ['k', 'i', 'n', 'i', 'g', 'e', 'l', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
kiniɡeliin  >  ['k', 'i', 'n', 'i', 'g', 'e', 'l', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
ʃie  >  ['B', 'i', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
ʃieler  >  ['B', 'i', 'e', 'l', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
ʃieliin  >  ['B', 'i', 'e', 'l', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
ije  >  ['i', 'j', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
ijeler  >  ['i', 'j', 'e', 'l', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
ijeliin  >  ['i', 'j', 'e', 'l', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
kini  >  ['k', 'i', 'n', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
kiniler  >  ['k', 'i', 'n', 'i', 'l', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
kiniliin  >  ['k', 'i', 'n', 'i', 'l', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
bie  >  ['b', 'i', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
bieler  >  ['b', 'i', 'e', 'l', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
bieliin  >  ['b', 'i', 'e', 'l', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
oɣo  >  ['o', 'O', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
oɣolor  >  ['o', 'O', 'o', 'l', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
oɣoluun  >  ['o', 'O', 'o', 'l', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X'}
χopto  >  ['Z', 'o', 'p', 't', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
χoptolor  >  ['Z', 'o', 'p', 't', 'o', 'l', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
χoptoluun  >  ['Z', 'o', 'p', 't', 'o', 'l', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
børø  >  ['b', 'A', 'r', 'A'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
børølør  >  ['b', 'A', 'r', 'A', 'l', 'A', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
børølyyn  >  ['b', 'A', 'r', 'A', 'l', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tɨal  >  ['t', 'X', 'a', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tɨallar  >  ['t', 'X', 'a', 'l', 'l', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tɨallɨɨn  >  ['t', 'X', 'a', 'l', 'l', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ɨal  >  ['X', 'a', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ɨallar  >  ['X', 'a', 'l', 'l', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ɨallɨɨn  >  ['X', 'a', 'l', 'l', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
kuul  >  ['k', 'u', 'u', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
kuullar  >  ['k', 'u', 'u', 'l', 'l', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
kuulluun  >  ['k', 'u', 'u', 'l', 'l', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
at  >  ['a', 't'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
attar  >  ['a', 't', 't', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
attɨɨn  >  ['a', 't', 't', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
balɨk  >  ['b', 'a', 'l', 'X', 'k'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
balɨktar  >  ['b', 'a', 'l', 'X', 'k', 't', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
balɨktɨɨn  >  ['b', 'a', 'l', 'X', 'k', 't', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ɨskaap  >  ['X', 's', 'k', 'a', 'a', 'p'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ɨskaaptar  >  ['X', 's', 'k', 'a', 'a', 'p', 't', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ɨskaaptɨɨn  >  ['X', 's', 'k', 'a', 'a', 'p', 't', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oɣus  >  ['o', 'O', 'u', 's'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oɣustar  >  ['o', 'O', 'u', 's', 't', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oɣustuun  >  ['o', 'O', 'u', 's', 't', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
kus  >  ['k', 'u', 's'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
kustar  >  ['k', 'u', 's', 't', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
kustuun  >  ['k', 'u', 's', 't', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tynnyk  >  ['t', 'y', 'n', 'n', 'y', 'k'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tynnykter  >  ['t', 'y', 'n', 'n', 'y', 'k', 't', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tynnyktyyn  >  ['t', 'y', 'n', 'n', 'y', 'k', 't', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
sep  >  ['s', 'e', 'p'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
septer  >  ['s', 'e', 'p', 't', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
septiin  >  ['s', 'e', 'p', 't', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
et  >  ['e', 't'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
etter  >  ['e', 't', 't', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ettiin  >  ['e', 't', 't', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ørys  >  ['A', 'r', 'y', 's'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
øryster  >  ['A', 'r', 'y', 's', 't', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ørystyyn  >  ['A', 'r', 'y', 's', 't', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tiis  >  ['t', 'i', 'i', 's'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tiister  >  ['t', 'i', 'i', 's', 't', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tiistiin  >  ['t', 'i', 'i', 's', 't', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
soroχ  >  ['s', 'o', 'r', 'o', 'Z'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
soroχtor  >  ['s', 'o', 'r', 'o', 'Z', 't', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
soroχtuun  >  ['s', 'o', 'r', 'o', 'Z', 't', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oχ  >  ['o', 'Z'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oχtor  >  ['o', 'Z', 't', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oχtuun  >  ['o', 'Z', 't', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oloppos  >  ['o', 'l', 'o', 'p', 'p', 'o', 's'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oloppostor  >  ['o', 'l', 'o', 'p', 'p', 'o', 's', 't', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oloppostuun  >  ['o', 'l', 'o', 'p', 'p', 'o', 's', 't', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
øtøχ  >  ['A', 't', 'A', 'Z'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
øtøχtør  >  ['A', 't', 'A', 'Z', 't', 'A', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
øtøχtyyn  >  ['A', 't', 'A', 'Z', 't', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ubaj  >  ['u', 'b', 'a', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ubajdar  >  ['u', 'b', 'a', 'j', 'd', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ubajdɨɨn  >  ['u', 'b', 'a', 'j', 'd', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
saraj  >  ['s', 'a', 'r', 'a', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
sarajdar  >  ['s', 'a', 'r', 'a', 'j', 'd', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
sarajdɨɨn  >  ['s', 'a', 'r', 'a', 'j', 'd', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tɨj  >  ['t', 'X', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tɨjdar  >  ['t', 'X', 'j', 'd', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tɨjdɨɨn  >  ['t', 'X', 'j', 'd', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
atɨɨr  >  ['a', 't', 'X', 'X', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
atɨɨrdar  >  ['a', 't', 'X', 'X', 'r', 'd', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
atɨɨrdɨɨn  >  ['a', 't', 'X', 'X', 'r', 'd', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ojuur  >  ['o', 'j', 'u', 'u', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ojuurdar  >  ['o', 'j', 'u', 'u', 'r', 'd', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
ojuurduun  >  ['o', 'j', 'u', 'u', 'r', 'd', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
yʧyɡej  >  ['y', 'E', 'y', 'g', 'e', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
yʧyɡejder  >  ['y', 'E', 'y', 'g', 'e', 'j', 'd', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
yʧyɡejdiin  >  ['y', 'E', 'y', 'g', 'e', 'j', 'd', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
eʃiij  >  ['e', 'B', 'i', 'i', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
eʃiijder  >  ['e', 'B', 'i', 'i', 'j', 'd', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
eʃiijdiin  >  ['e', 'B', 'i', 'i', 'j', 'd', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tomtor  >  ['t', 'o', 'm', 't', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tomtordor  >  ['t', 'o', 'm', 't', 'o', 'r', 'd', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tomtorduun  >  ['t', 'o', 'm', 't', 'o', 'r', 'd', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
moɣotoj  >  ['m', 'o', 'O', 'o', 't', 'o', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
moɣotojdor  >  ['m', 'o', 'O', 'o', 't', 'o', 'j', 'd', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
moɣotojduun  >  ['m', 'o', 'O', 'o', 't', 'o', 'j', 'd', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
køtør  >  ['k', 'A', 't', 'A', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
køtørdør  >  ['k', 'A', 't', 'A', 'r', 'd', 'A', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
køtørdyyn  >  ['k', 'A', 't', 'A', 'r', 'd', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
bølkøj  >  ['b', 'A', 'l', 'k', 'A', 'j'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
bølkøjdør  >  ['b', 'A', 'l', 'k', 'A', 'j', 'd', 'A', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
bølkøjdyyn  >  ['b', 'A', 'l', 'k', 'A', 'j', 'd', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
χatɨŋ  >  ['Z', 'a', 't', 'X', 'K'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
χatɨŋnar  >  ['Z', 'a', 't', 'X', 'K', 'n', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
χatɨŋnɨɨn  >  ['Z', 'a', 't', 'X', 'K', 'n', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
aan  >  ['a', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
aannar  >  ['a', 'a', 'n', 'n', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
aannɨɨn  >  ['a', 'a', 'n', 'n', 'X', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tiiŋ  >  ['t', 'i', 'i', 'K'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tiiŋner  >  ['t', 'i', 'i', 'K', 'n', 'e', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
tiiŋniin  >  ['t', 'i', 'i', 'K', 'n', 'i', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
sordoŋ  >  ['s', 'o', 'r', 'd', 'o', 'K'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
sordoŋnor  >  ['s', 'o', 'r', 'd', 'o', 'K', 'n', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
sordoŋnuun  >  ['s', 'o', 'r', 'd', 'o', 'K', 'n', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
olom  >  ['o', 'l', 'o', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
olomnor  >  ['o', 'l', 'o', 'm', 'n', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
olomnuun  >  ['o', 'l', 'o', 'm', 'n', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oron  >  ['o', 'r', 'o', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oronnor  >  ['o', 'r', 'o', 'n', 'n', 'o', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
oronnuun  >  ['o', 'r', 'o', 'n', 'n', 'u', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
bødøŋ  >  ['b', 'A', 'd', 'A', 'K'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
bødøŋnør  >  ['b', 'A', 'd', 'A', 'K', 'n', 'A', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
bødøŋnyyn  >  ['b', 'A', 'd', 'A', 'K', 'n', 'y', 'y', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ɣ': 'O', 'ɨ': 'X', 'χ': 'Z'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   4))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   5))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   6))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   7))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   8))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   9))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   10))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   11))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   12))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   13))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   14))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= "aOa" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "aOalar" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "aOalXXn" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= "paarta" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "paartalar" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "paartalXXn" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= "tXa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "tXalar" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "tXalXXn" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= "kinige" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "kinigeler" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "kinigeliin" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= "Bie" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "Bieler" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "Bieliin" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= "ije" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "ijeler" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "ijeliin" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= "kini" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "kiniler" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "kiniliin" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= "bie" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "bieler" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "bieliin" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= "oOo" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "oOolor" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "oOoluun" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= "Zopto" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "Zoptolor" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "Zoptoluun" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= "bArA" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "bArAlAr" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "bArAlyyn" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= "tXal" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "tXallar" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "tXallXXn" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= "Xal" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "Xallar" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "XallXXn" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= "kuul" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "kuullar" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "kuulluun" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= "at" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "attar" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "attXXn" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= "balXk" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "balXktar" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "balXktXXn" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= "Xskaap" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "Xskaaptar" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "XskaaptXXn" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= "oOus" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "oOustar" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "oOustuun" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= "kus" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "kustar" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "kustuun" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= "tynnyk" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tynnykter" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tynnyktyyn" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= "sep" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "septer" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "septiin" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= "et" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "etter" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "ettiin" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= "Arys" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "Aryster" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "Arystyyn" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= "tiis" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "tiister" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "tiistiin" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= "soroZ" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "soroZtor" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "soroZtuun" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= "oZ" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "oZtor" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "oZtuun" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= "oloppos" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "oloppostor" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "oloppostuun" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= "AtAZ" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "AtAZtAr" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "AtAZtyyn" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= "ubaj" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "ubajdar" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "ubajdXXn" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= "saraj" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "sarajdar" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "sarajdXXn" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= "tXj" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "tXjdar" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "tXjdXXn" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= "atXXr" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "atXXrdar" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "atXXrdXXn" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= "ojuur" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "ojuurdar" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "ojuurduun" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= "yEygej" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "yEygejder" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "yEygejdiin" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= "eBiij" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "eBiijder" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "eBiijdiin" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= "tomtor" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "tomtordor" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "tomtorduun" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= "moOotoj" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "moOotojdor" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "moOotojduun" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= "kAtAr" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kAtArdAr" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kAtArdyyn" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= "bAlkAj" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "bAlkAjdAr" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "bAlkAjdyyn" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= "ZatXK" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "ZatXKnar" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "ZatXKnXXn" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= "aan" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "aannar" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "aannXXn" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= "tiiK" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "tiiKner" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "tiiKniin" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= "sordoK" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "sordoKnor" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "sordoKnuun" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= "olom" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "olomnor" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "olomnuun" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= "oron" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "oronnor" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "oronnuun" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= "bAdAK" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "bAdAKnAr" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "bAdAKnyyn" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      0
      sc1A
      sc1B
      sc1C
      0
      sc2A
      sc2B
      sc2C
      0
      sc3A
      sc3B
      sc3C
      0
      sc4A
      sc4B
      sc4C
      0
      sc5A
      sc5B
      sc5C
      0
      sc6A
      sc6B
      sc6C
      0
      sc7A
      sc7B
      sc7C
      0
      sc8A
      sc8B
      sc8C
      0
      sc9A
      sc9B
      sc9C
      0
      sc10A
      sc10B
      sc10C
      0
      sc11A
      sc11B
      sc11C
      0
      sc12A
      sc12B
      sc12C
      0
      sc13A
      sc13B
      sc13C
      0
      sc14A
      sc14B
      sc14C
      0
      sc15A
      sc15B
      sc15C
      0
      sc16A
      sc16B
      sc16C
      0
      sc17A
      sc17B
      sc17C
      0
      sc18A
      sc18B
      sc18C
      0
      sc19A
      sc19B
      sc19C
      0
      sc20A
      sc20B
      sc20C
      0
      sc21A
      sc21B
      sc21C
      0
      sc22A
      sc22B
      sc22C
      0
      sc23A
      sc23B
      sc23C
      0
      sc24A
      sc24B
      sc24C
      0
      sc25A
      sc25B
      sc25C
      0
      sc26A
      sc26B
      sc26C
      0
      sc27A
      sc27B
      sc27C
      0
      sc28A
      sc28B
      sc28C
      0
      sc29A
      sc29B
      sc29C
      0
      sc30A
      sc30B
      sc30C
      0
      sc31A
      sc31B
      sc31C
      0
      sc32A
      sc32B
      sc32C
      0
      sc33A
      sc33B
      sc33C
      0
      sc34A
      sc34B
      sc34C
      0
      sc35A
      sc35B
      sc35C
      0
      sc36A
      sc36B
      sc36C
      0
      sc37A
      sc37B
      sc37C
      0
      sc38A
      sc38B
      sc38C
      0
      sc39A
      sc39B
      sc39C
      0
      sc40A
      sc40B
      sc40C
      0
      sc41A
      sc41B
      sc41C
      0
      sc42A
      sc42B
      sc42C
      0
      sc43A
      sc43B
      sc43C
      0
      sc44A
      sc44B
      sc44C
      0
      sc45A
      sc45B
      sc45C)
   15))
