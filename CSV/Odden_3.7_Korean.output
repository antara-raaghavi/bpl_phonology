[['pamman', 'pammaŋkʰɨm', 'pamnarɨm', 'pap', 'paptero', 'papkwa', 'pappota', 'papkaʧi', 'papi', 'papɨn', 'pape', 'papita', 'papɨro'], ['summan', 'summaŋkʰɨm', 'sumnarɨm', 'sup', 'suptero', 'supkwa', 'suppota', 'supkaʧi', 'supʰi', 'supʰɨn', 'supʰe', 'supʰita', 'supʰɨro'], ['pamman', 'pammaŋkʰɨm', 'pamnarɨm', 'pam', 'pamtero', 'pamkwa', 'pampota', 'pamkaʧi', 'pami', 'pamɨn', 'pame', 'pamita', 'pamɨro'], ['pamman', 'pammaŋkʰɨm', 'pannarɨm', 'pat', 'pattero', 'pakkwa', 'pappota', 'pakkaʧi', 'paʧʰi', 'patʰɨn', 'patʰe', 'paʧʰita', 'patʰɨro'], ['namman', 'nammaŋkʰɨm', 'nannarɨm', 'nat', 'nattero', 'nakkwa', 'nappota', 'nakkaʧi', 'nasi', 'nasɨn', 'nase', 'nasita', 'nasɨro'], ['namman', 'nammaŋkʰɨm', 'nannarɨm', 'nat', 'nattero', 'nakkwa', 'nappota', 'nakkaʧi', 'naʧi', 'naʧɨn', 'naʧe', 'naʧita', 'naʧɨro'], ['namman', 'nammaŋkʰɨm', 'nannarɨm', 'nat', 'nattero', 'nakkwa', 'nappota', 'nakkaʧi', 'naʧʰi', 'naʧʰɨn', 'naʧʰe', 'naʧʰita', 'naʧʰɨro'], ['pamman', 'pammaŋkʰɨm', 'pannarɨm', 'pan', 'pantero', 'paŋkwa', 'pampota', 'paŋkaʧi', 'pani', 'panɨn', 'pane', 'panita', 'panɨro']]
pamman  >  ['p', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
pammaŋkʰɨm  >  ['p', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
pamnarɨm  >  ['p', 'a', 'm', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
pap  >  ['p', 'a', 'p'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
paptero  >  ['p', 'a', 'p', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
papkwa  >  ['p', 'a', 'p', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
pappota  >  ['p', 'a', 'p', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
papkaʧi  >  ['p', 'a', 'p', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
papi  >  ['p', 'a', 'p', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
papɨn  >  ['p', 'a', 'p', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
pape  >  ['p', 'a', 'p', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
papita  >  ['p', 'a', 'p', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
papɨro  >  ['p', 'a', 'p', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
summan  >  ['s', 'u', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
summaŋkʰɨm  >  ['s', 'u', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
sumnarɨm  >  ['s', 'u', 'm', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
sup  >  ['s', 'u', 'p'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
suptero  >  ['s', 'u', 'p', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
supkwa  >  ['s', 'u', 'p', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
suppota  >  ['s', 'u', 'p', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
supkaʧi  >  ['s', 'u', 'p', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X'}
supʰi  >  ['s', 'u', 'Z', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
supʰɨn  >  ['s', 'u', 'Z', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
supʰe  >  ['s', 'u', 'Z', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
supʰita  >  ['s', 'u', 'Z', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
supʰɨro  >  ['s', 'u', 'Z', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamman  >  ['p', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pammaŋkʰɨm  >  ['p', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamnarɨm  >  ['p', 'a', 'm', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pam  >  ['p', 'a', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamtero  >  ['p', 'a', 'm', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamkwa  >  ['p', 'a', 'm', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pampota  >  ['p', 'a', 'm', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamkaʧi  >  ['p', 'a', 'm', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pami  >  ['p', 'a', 'm', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamɨn  >  ['p', 'a', 'm', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pame  >  ['p', 'a', 'm', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamita  >  ['p', 'a', 'm', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamɨro  >  ['p', 'a', 'm', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pamman  >  ['p', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pammaŋkʰɨm  >  ['p', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pannarɨm  >  ['p', 'a', 'n', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pat  >  ['p', 'a', 't'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pattero  >  ['p', 'a', 't', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pakkwa  >  ['p', 'a', 'k', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pappota  >  ['p', 'a', 'p', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
pakkaʧi  >  ['p', 'a', 'k', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z'}
paʧʰi  >  ['p', 'a', '1', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1'}
patʰɨn  >  ['p', 'a', '2', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
patʰe  >  ['p', 'a', '2', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
paʧʰita  >  ['p', 'a', '1', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
patʰɨro  >  ['p', 'a', '2', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
namman  >  ['n', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nammaŋkʰɨm  >  ['n', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nannarɨm  >  ['n', 'a', 'n', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nat  >  ['n', 'a', 't'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nattero  >  ['n', 'a', 't', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nakkwa  >  ['n', 'a', 'k', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nappota  >  ['n', 'a', 'p', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nakkaʧi  >  ['n', 'a', 'k', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nasi  >  ['n', 'a', 's', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nasɨn  >  ['n', 'a', 's', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nase  >  ['n', 'a', 's', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nasita  >  ['n', 'a', 's', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nasɨro  >  ['n', 'a', 's', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
namman  >  ['n', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nammaŋkʰɨm  >  ['n', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nannarɨm  >  ['n', 'a', 'n', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nat  >  ['n', 'a', 't'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nattero  >  ['n', 'a', 't', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nakkwa  >  ['n', 'a', 'k', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nappota  >  ['n', 'a', 'p', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nakkaʧi  >  ['n', 'a', 'k', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧi  >  ['n', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧɨn  >  ['n', 'a', 'E', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧe  >  ['n', 'a', 'E', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧita  >  ['n', 'a', 'E', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧɨro  >  ['n', 'a', 'E', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
namman  >  ['n', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nammaŋkʰɨm  >  ['n', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nannarɨm  >  ['n', 'a', 'n', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nat  >  ['n', 'a', 't'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nattero  >  ['n', 'a', 't', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nakkwa  >  ['n', 'a', 'k', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nappota  >  ['n', 'a', 'p', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
nakkaʧi  >  ['n', 'a', 'k', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧʰi  >  ['n', 'a', '1', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧʰɨn  >  ['n', 'a', '1', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧʰe  >  ['n', 'a', '1', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧʰita  >  ['n', 'a', '1', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
naʧʰɨro  >  ['n', 'a', '1', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pamman  >  ['p', 'a', 'm', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pammaŋkʰɨm  >  ['p', 'a', 'm', 'm', 'a', 'K', 'O', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pannarɨm  >  ['p', 'a', 'n', 'n', 'a', 'r', 'X', 'm'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pan  >  ['p', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pantero  >  ['p', 'a', 'n', 't', 'e', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
paŋkwa  >  ['p', 'a', 'K', 'k', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pampota  >  ['p', 'a', 'm', 'p', 'o', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
paŋkaʧi  >  ['p', 'a', 'K', 'k', 'a', 'E', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pani  >  ['p', 'a', 'n', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
panɨn  >  ['p', 'a', 'n', 'X', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
pane  >  ['p', 'a', 'n', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
panita  >  ['p', 'a', 'n', 'i', 't', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
panɨro  >  ['p', 'a', 'n', 'X', 'r', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'kʰ': 'O', 'ɨ': 'X', 'pʰ': 'Z', 'ʧʰ': '1', 'tʰ': '2'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   4))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   5))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   6))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   7))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   8))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   9))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   10))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   11))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   12))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   13))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   14))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   15))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   16))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun var0E () String)
(declare-fun var0F () String)
(declare-fun var0G () String)
(declare-fun var0H () String)
(declare-fun var0I () String)
(declare-fun var0J () String)
(declare-fun var0K () String)
(declare-fun var0L () String)
(declare-fun var0M () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun unch20E () String)
(declare-fun ch0E () String)
(declare-fun unch10E () String)
(declare-fun sufE () String)
(declare-fun preE () String)
(declare-fun unch20F () String)
(declare-fun ch0F () String)
(declare-fun unch10F () String)
(declare-fun sufF () String)
(declare-fun preF () String)
(declare-fun unch20G () String)
(declare-fun ch0G () String)
(declare-fun unch10G () String)
(declare-fun sufG () String)
(declare-fun preG () String)
(declare-fun unch20H () String)
(declare-fun ch0H () String)
(declare-fun unch10H () String)
(declare-fun sufH () String)
(declare-fun preH () String)
(declare-fun unch20I () String)
(declare-fun ch0I () String)
(declare-fun unch10I () String)
(declare-fun sufI () String)
(declare-fun preI () String)
(declare-fun unch20J () String)
(declare-fun ch0J () String)
(declare-fun unch10J () String)
(declare-fun sufJ () String)
(declare-fun preJ () String)
(declare-fun unch20K () String)
(declare-fun ch0K () String)
(declare-fun unch10K () String)
(declare-fun sufK () String)
(declare-fun preK () String)
(declare-fun unch20L () String)
(declare-fun ch0L () String)
(declare-fun unch10L () String)
(declare-fun sufL () String)
(declare-fun preL () String)
(declare-fun unch20M () String)
(declare-fun ch0M () String)
(declare-fun unch10M () String)
(declare-fun sufM () String)
(declare-fun preM () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun sc0E () Int)
(declare-fun sc0F () Int)
(declare-fun sc0G () Int)
(declare-fun sc0H () Int)
(declare-fun sc0I () Int)
(declare-fun sc0J () Int)
(declare-fun sc0K () Int)
(declare-fun sc0L () Int)
(declare-fun sc0M () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun var1E () String)
(declare-fun var1F () String)
(declare-fun var1G () String)
(declare-fun var1H () String)
(declare-fun var1I () String)
(declare-fun var1J () String)
(declare-fun var1K () String)
(declare-fun var1L () String)
(declare-fun var1M () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun unch21E () String)
(declare-fun ch1E () String)
(declare-fun unch11E () String)
(declare-fun unch21F () String)
(declare-fun ch1F () String)
(declare-fun unch11F () String)
(declare-fun unch21G () String)
(declare-fun ch1G () String)
(declare-fun unch11G () String)
(declare-fun unch21H () String)
(declare-fun ch1H () String)
(declare-fun unch11H () String)
(declare-fun unch21I () String)
(declare-fun ch1I () String)
(declare-fun unch11I () String)
(declare-fun unch21J () String)
(declare-fun ch1J () String)
(declare-fun unch11J () String)
(declare-fun unch21K () String)
(declare-fun ch1K () String)
(declare-fun unch11K () String)
(declare-fun unch21L () String)
(declare-fun ch1L () String)
(declare-fun unch11L () String)
(declare-fun unch21M () String)
(declare-fun ch1M () String)
(declare-fun unch11M () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun sc1E () Int)
(declare-fun sc1F () Int)
(declare-fun sc1G () Int)
(declare-fun sc1H () Int)
(declare-fun sc1I () Int)
(declare-fun sc1J () Int)
(declare-fun sc1K () Int)
(declare-fun sc1L () Int)
(declare-fun sc1M () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun var2E () String)
(declare-fun var2F () String)
(declare-fun var2G () String)
(declare-fun var2H () String)
(declare-fun var2I () String)
(declare-fun var2J () String)
(declare-fun var2K () String)
(declare-fun var2L () String)
(declare-fun var2M () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun unch22E () String)
(declare-fun ch2E () String)
(declare-fun unch12E () String)
(declare-fun unch22F () String)
(declare-fun ch2F () String)
(declare-fun unch12F () String)
(declare-fun unch22G () String)
(declare-fun ch2G () String)
(declare-fun unch12G () String)
(declare-fun unch22H () String)
(declare-fun ch2H () String)
(declare-fun unch12H () String)
(declare-fun unch22I () String)
(declare-fun ch2I () String)
(declare-fun unch12I () String)
(declare-fun unch22J () String)
(declare-fun ch2J () String)
(declare-fun unch12J () String)
(declare-fun unch22K () String)
(declare-fun ch2K () String)
(declare-fun unch12K () String)
(declare-fun unch22L () String)
(declare-fun ch2L () String)
(declare-fun unch12L () String)
(declare-fun unch22M () String)
(declare-fun ch2M () String)
(declare-fun unch12M () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun sc2E () Int)
(declare-fun sc2F () Int)
(declare-fun sc2G () Int)
(declare-fun sc2H () Int)
(declare-fun sc2I () Int)
(declare-fun sc2J () Int)
(declare-fun sc2K () Int)
(declare-fun sc2L () Int)
(declare-fun sc2M () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun var3E () String)
(declare-fun var3F () String)
(declare-fun var3G () String)
(declare-fun var3H () String)
(declare-fun var3I () String)
(declare-fun var3J () String)
(declare-fun var3K () String)
(declare-fun var3L () String)
(declare-fun var3M () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun unch23E () String)
(declare-fun ch3E () String)
(declare-fun unch13E () String)
(declare-fun unch23F () String)
(declare-fun ch3F () String)
(declare-fun unch13F () String)
(declare-fun unch23G () String)
(declare-fun ch3G () String)
(declare-fun unch13G () String)
(declare-fun unch23H () String)
(declare-fun ch3H () String)
(declare-fun unch13H () String)
(declare-fun unch23I () String)
(declare-fun ch3I () String)
(declare-fun unch13I () String)
(declare-fun unch23J () String)
(declare-fun ch3J () String)
(declare-fun unch13J () String)
(declare-fun unch23K () String)
(declare-fun ch3K () String)
(declare-fun unch13K () String)
(declare-fun unch23L () String)
(declare-fun ch3L () String)
(declare-fun unch13L () String)
(declare-fun unch23M () String)
(declare-fun ch3M () String)
(declare-fun unch13M () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun sc3E () Int)
(declare-fun sc3F () Int)
(declare-fun sc3G () Int)
(declare-fun sc3H () Int)
(declare-fun sc3I () Int)
(declare-fun sc3J () Int)
(declare-fun sc3K () Int)
(declare-fun sc3L () Int)
(declare-fun sc3M () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun var4E () String)
(declare-fun var4F () String)
(declare-fun var4G () String)
(declare-fun var4H () String)
(declare-fun var4I () String)
(declare-fun var4J () String)
(declare-fun var4K () String)
(declare-fun var4L () String)
(declare-fun var4M () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun unch24E () String)
(declare-fun ch4E () String)
(declare-fun unch14E () String)
(declare-fun unch24F () String)
(declare-fun ch4F () String)
(declare-fun unch14F () String)
(declare-fun unch24G () String)
(declare-fun ch4G () String)
(declare-fun unch14G () String)
(declare-fun unch24H () String)
(declare-fun ch4H () String)
(declare-fun unch14H () String)
(declare-fun unch24I () String)
(declare-fun ch4I () String)
(declare-fun unch14I () String)
(declare-fun unch24J () String)
(declare-fun ch4J () String)
(declare-fun unch14J () String)
(declare-fun unch24K () String)
(declare-fun ch4K () String)
(declare-fun unch14K () String)
(declare-fun unch24L () String)
(declare-fun ch4L () String)
(declare-fun unch14L () String)
(declare-fun unch24M () String)
(declare-fun ch4M () String)
(declare-fun unch14M () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun sc4E () Int)
(declare-fun sc4F () Int)
(declare-fun sc4G () Int)
(declare-fun sc4H () Int)
(declare-fun sc4I () Int)
(declare-fun sc4J () Int)
(declare-fun sc4K () Int)
(declare-fun sc4L () Int)
(declare-fun sc4M () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun var5E () String)
(declare-fun var5F () String)
(declare-fun var5G () String)
(declare-fun var5H () String)
(declare-fun var5I () String)
(declare-fun var5J () String)
(declare-fun var5K () String)
(declare-fun var5L () String)
(declare-fun var5M () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun unch25E () String)
(declare-fun ch5E () String)
(declare-fun unch15E () String)
(declare-fun unch25F () String)
(declare-fun ch5F () String)
(declare-fun unch15F () String)
(declare-fun unch25G () String)
(declare-fun ch5G () String)
(declare-fun unch15G () String)
(declare-fun unch25H () String)
(declare-fun ch5H () String)
(declare-fun unch15H () String)
(declare-fun unch25I () String)
(declare-fun ch5I () String)
(declare-fun unch15I () String)
(declare-fun unch25J () String)
(declare-fun ch5J () String)
(declare-fun unch15J () String)
(declare-fun unch25K () String)
(declare-fun ch5K () String)
(declare-fun unch15K () String)
(declare-fun unch25L () String)
(declare-fun ch5L () String)
(declare-fun unch15L () String)
(declare-fun unch25M () String)
(declare-fun ch5M () String)
(declare-fun unch15M () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun sc5E () Int)
(declare-fun sc5F () Int)
(declare-fun sc5G () Int)
(declare-fun sc5H () Int)
(declare-fun sc5I () Int)
(declare-fun sc5J () Int)
(declare-fun sc5K () Int)
(declare-fun sc5L () Int)
(declare-fun sc5M () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun var6E () String)
(declare-fun var6F () String)
(declare-fun var6G () String)
(declare-fun var6H () String)
(declare-fun var6I () String)
(declare-fun var6J () String)
(declare-fun var6K () String)
(declare-fun var6L () String)
(declare-fun var6M () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun unch26E () String)
(declare-fun ch6E () String)
(declare-fun unch16E () String)
(declare-fun unch26F () String)
(declare-fun ch6F () String)
(declare-fun unch16F () String)
(declare-fun unch26G () String)
(declare-fun ch6G () String)
(declare-fun unch16G () String)
(declare-fun unch26H () String)
(declare-fun ch6H () String)
(declare-fun unch16H () String)
(declare-fun unch26I () String)
(declare-fun ch6I () String)
(declare-fun unch16I () String)
(declare-fun unch26J () String)
(declare-fun ch6J () String)
(declare-fun unch16J () String)
(declare-fun unch26K () String)
(declare-fun ch6K () String)
(declare-fun unch16K () String)
(declare-fun unch26L () String)
(declare-fun ch6L () String)
(declare-fun unch16L () String)
(declare-fun unch26M () String)
(declare-fun ch6M () String)
(declare-fun unch16M () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun sc6E () Int)
(declare-fun sc6F () Int)
(declare-fun sc6G () Int)
(declare-fun sc6H () Int)
(declare-fun sc6I () Int)
(declare-fun sc6J () Int)
(declare-fun sc6K () Int)
(declare-fun sc6L () Int)
(declare-fun sc6M () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun var7E () String)
(declare-fun var7F () String)
(declare-fun var7G () String)
(declare-fun var7H () String)
(declare-fun var7I () String)
(declare-fun var7J () String)
(declare-fun var7K () String)
(declare-fun var7L () String)
(declare-fun var7M () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun unch27E () String)
(declare-fun ch7E () String)
(declare-fun unch17E () String)
(declare-fun unch27F () String)
(declare-fun ch7F () String)
(declare-fun unch17F () String)
(declare-fun unch27G () String)
(declare-fun ch7G () String)
(declare-fun unch17G () String)
(declare-fun unch27H () String)
(declare-fun ch7H () String)
(declare-fun unch17H () String)
(declare-fun unch27I () String)
(declare-fun ch7I () String)
(declare-fun unch17I () String)
(declare-fun unch27J () String)
(declare-fun ch7J () String)
(declare-fun unch17J () String)
(declare-fun unch27K () String)
(declare-fun ch7K () String)
(declare-fun unch17K () String)
(declare-fun unch27L () String)
(declare-fun ch7L () String)
(declare-fun unch17L () String)
(declare-fun unch27M () String)
(declare-fun ch7M () String)
(declare-fun unch17M () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun sc7E () Int)
(declare-fun sc7F () Int)
(declare-fun sc7G () Int)
(declare-fun sc7H () Int)
(declare-fun sc7I () Int)
(declare-fun sc7J () Int)
(declare-fun sc7K () Int)
(declare-fun sc7L () Int)
(declare-fun sc7M () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (<= (str.len var0E) 1))
(assert (<= (str.len var0F) 1))
(assert (<= (str.len var0G) 1))
(assert (<= (str.len var0H) 1))
(assert (<= (str.len var0I) 1))
(assert (<= (str.len var0J) 1))
(assert (<= (str.len var0K) 1))
(assert (<= (str.len var0L) 1))
(assert (<= (str.len var0M) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= (str.++ preE (str.++ stem0 sufE)) (str.++ unch10E (str.++ ch0E unch20E))))
(assert (= (str.++ preF (str.++ stem0 sufF)) (str.++ unch10F (str.++ ch0F unch20F))))
(assert (= (str.++ preG (str.++ stem0 sufG)) (str.++ unch10G (str.++ ch0G unch20G))))
(assert (= (str.++ preH (str.++ stem0 sufH)) (str.++ unch10H (str.++ ch0H unch20H))))
(assert (= (str.++ preI (str.++ stem0 sufI)) (str.++ unch10I (str.++ ch0I unch20I))))
(assert (= (str.++ preJ (str.++ stem0 sufJ)) (str.++ unch10J (str.++ ch0J unch20J))))
(assert (= (str.++ preK (str.++ stem0 sufK)) (str.++ unch10K (str.++ ch0K unch20K))))
(assert (= (str.++ preL (str.++ stem0 sufL)) (str.++ unch10L (str.++ ch0L unch20L))))
(assert (= (str.++ preM (str.++ stem0 sufM)) (str.++ unch10M (str.++ ch0M unch20M))))
(assert (= "pamman" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "pammaKOXm" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "pamnarXm" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "pap" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= "paptero" (str.++ unch10E (str.++ var0E unch20E))))
(assert (= "papkwa" (str.++ unch10F (str.++ var0F unch20F))))
(assert (= "pappota" (str.++ unch10G (str.++ var0G unch20G))))
(assert (= "papkaEi" (str.++ unch10H (str.++ var0H unch20H))))
(assert (= "papi" (str.++ unch10I (str.++ var0I unch20I))))
(assert (= "papXn" (str.++ unch10J (str.++ var0J unch20J))))
(assert (= "pape" (str.++ unch10K (str.++ var0K unch20K))))
(assert (= "papita" (str.++ unch10L (str.++ var0L unch20L))))
(assert (= "papXro" (str.++ unch10M (str.++ var0M unch20M))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (= (ite (= ch0E var0E) 0 1) sc0E))
(assert (= (ite (= ch0F var0F) 0 1) sc0F))
(assert (= (ite (= ch0G var0G) 0 1) sc0G))
(assert (= (ite (= ch0H var0H) 0 1) sc0H))
(assert (= (ite (= ch0I var0I) 0 1) sc0I))
(assert (= (ite (= ch0J var0J) 0 1) sc0J))
(assert (= (ite (= ch0K var0K) 0 1) sc0K))
(assert (= (ite (= ch0L var0L) 0 1) sc0L))
(assert (= (ite (= ch0M var0M) 0 1) sc0M))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= sc0E 1))
(assert (<= sc0F 1))
(assert (<= sc0G 1))
(assert (<= sc0H 1))
(assert (<= sc0I 1))
(assert (<= sc0J 1))
(assert (<= sc0K 1))
(assert (<= sc0L 1))
(assert (<= sc0M 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (<= (str.len var1E) 1))
(assert (<= (str.len var1F) 1))
(assert (<= (str.len var1G) 1))
(assert (<= (str.len var1H) 1))
(assert (<= (str.len var1I) 1))
(assert (<= (str.len var1J) 1))
(assert (<= (str.len var1K) 1))
(assert (<= (str.len var1L) 1))
(assert (<= (str.len var1M) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= (str.++ preE (str.++ stem1 sufE)) (str.++ unch11E (str.++ ch1E unch21E))))
(assert (= (str.++ preF (str.++ stem1 sufF)) (str.++ unch11F (str.++ ch1F unch21F))))
(assert (= (str.++ preG (str.++ stem1 sufG)) (str.++ unch11G (str.++ ch1G unch21G))))
(assert (= (str.++ preH (str.++ stem1 sufH)) (str.++ unch11H (str.++ ch1H unch21H))))
(assert (= (str.++ preI (str.++ stem1 sufI)) (str.++ unch11I (str.++ ch1I unch21I))))
(assert (= (str.++ preJ (str.++ stem1 sufJ)) (str.++ unch11J (str.++ ch1J unch21J))))
(assert (= (str.++ preK (str.++ stem1 sufK)) (str.++ unch11K (str.++ ch1K unch21K))))
(assert (= (str.++ preL (str.++ stem1 sufL)) (str.++ unch11L (str.++ ch1L unch21L))))
(assert (= (str.++ preM (str.++ stem1 sufM)) (str.++ unch11M (str.++ ch1M unch21M))))
(assert (= "summan" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "summaKOXm" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "sumnarXm" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "sup" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= "suptero" (str.++ unch11E (str.++ var1E unch21E))))
(assert (= "supkwa" (str.++ unch11F (str.++ var1F unch21F))))
(assert (= "suppota" (str.++ unch11G (str.++ var1G unch21G))))
(assert (= "supkaEi" (str.++ unch11H (str.++ var1H unch21H))))
(assert (= "suZi" (str.++ unch11I (str.++ var1I unch21I))))
(assert (= "suZXn" (str.++ unch11J (str.++ var1J unch21J))))
(assert (= "suZe" (str.++ unch11K (str.++ var1K unch21K))))
(assert (= "suZita" (str.++ unch11L (str.++ var1L unch21L))))
(assert (= "suZXro" (str.++ unch11M (str.++ var1M unch21M))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (= (ite (= ch1E var1E) 0 1) sc1E))
(assert (= (ite (= ch1F var1F) 0 1) sc1F))
(assert (= (ite (= ch1G var1G) 0 1) sc1G))
(assert (= (ite (= ch1H var1H) 0 1) sc1H))
(assert (= (ite (= ch1I var1I) 0 1) sc1I))
(assert (= (ite (= ch1J var1J) 0 1) sc1J))
(assert (= (ite (= ch1K var1K) 0 1) sc1K))
(assert (= (ite (= ch1L var1L) 0 1) sc1L))
(assert (= (ite (= ch1M var1M) 0 1) sc1M))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= sc1E 1))
(assert (<= sc1F 1))
(assert (<= sc1G 1))
(assert (<= sc1H 1))
(assert (<= sc1I 1))
(assert (<= sc1J 1))
(assert (<= sc1K 1))
(assert (<= sc1L 1))
(assert (<= sc1M 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (<= (str.len var2E) 1))
(assert (<= (str.len var2F) 1))
(assert (<= (str.len var2G) 1))
(assert (<= (str.len var2H) 1))
(assert (<= (str.len var2I) 1))
(assert (<= (str.len var2J) 1))
(assert (<= (str.len var2K) 1))
(assert (<= (str.len var2L) 1))
(assert (<= (str.len var2M) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= (str.++ preE (str.++ stem2 sufE)) (str.++ unch12E (str.++ ch2E unch22E))))
(assert (= (str.++ preF (str.++ stem2 sufF)) (str.++ unch12F (str.++ ch2F unch22F))))
(assert (= (str.++ preG (str.++ stem2 sufG)) (str.++ unch12G (str.++ ch2G unch22G))))
(assert (= (str.++ preH (str.++ stem2 sufH)) (str.++ unch12H (str.++ ch2H unch22H))))
(assert (= (str.++ preI (str.++ stem2 sufI)) (str.++ unch12I (str.++ ch2I unch22I))))
(assert (= (str.++ preJ (str.++ stem2 sufJ)) (str.++ unch12J (str.++ ch2J unch22J))))
(assert (= (str.++ preK (str.++ stem2 sufK)) (str.++ unch12K (str.++ ch2K unch22K))))
(assert (= (str.++ preL (str.++ stem2 sufL)) (str.++ unch12L (str.++ ch2L unch22L))))
(assert (= (str.++ preM (str.++ stem2 sufM)) (str.++ unch12M (str.++ ch2M unch22M))))
(assert (= "pamman" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "pammaKOXm" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "pamnarXm" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "pam" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= "pamtero" (str.++ unch12E (str.++ var2E unch22E))))
(assert (= "pamkwa" (str.++ unch12F (str.++ var2F unch22F))))
(assert (= "pampota" (str.++ unch12G (str.++ var2G unch22G))))
(assert (= "pamkaEi" (str.++ unch12H (str.++ var2H unch22H))))
(assert (= "pami" (str.++ unch12I (str.++ var2I unch22I))))
(assert (= "pamXn" (str.++ unch12J (str.++ var2J unch22J))))
(assert (= "pame" (str.++ unch12K (str.++ var2K unch22K))))
(assert (= "pamita" (str.++ unch12L (str.++ var2L unch22L))))
(assert (= "pamXro" (str.++ unch12M (str.++ var2M unch22M))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (= (ite (= ch2E var2E) 0 1) sc2E))
(assert (= (ite (= ch2F var2F) 0 1) sc2F))
(assert (= (ite (= ch2G var2G) 0 1) sc2G))
(assert (= (ite (= ch2H var2H) 0 1) sc2H))
(assert (= (ite (= ch2I var2I) 0 1) sc2I))
(assert (= (ite (= ch2J var2J) 0 1) sc2J))
(assert (= (ite (= ch2K var2K) 0 1) sc2K))
(assert (= (ite (= ch2L var2L) 0 1) sc2L))
(assert (= (ite (= ch2M var2M) 0 1) sc2M))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= sc2E 1))
(assert (<= sc2F 1))
(assert (<= sc2G 1))
(assert (<= sc2H 1))
(assert (<= sc2I 1))
(assert (<= sc2J 1))
(assert (<= sc2K 1))
(assert (<= sc2L 1))
(assert (<= sc2M 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (<= (str.len var3E) 1))
(assert (<= (str.len var3F) 1))
(assert (<= (str.len var3G) 1))
(assert (<= (str.len var3H) 1))
(assert (<= (str.len var3I) 1))
(assert (<= (str.len var3J) 1))
(assert (<= (str.len var3K) 1))
(assert (<= (str.len var3L) 1))
(assert (<= (str.len var3M) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= (str.++ preE (str.++ stem3 sufE)) (str.++ unch13E (str.++ ch3E unch23E))))
(assert (= (str.++ preF (str.++ stem3 sufF)) (str.++ unch13F (str.++ ch3F unch23F))))
(assert (= (str.++ preG (str.++ stem3 sufG)) (str.++ unch13G (str.++ ch3G unch23G))))
(assert (= (str.++ preH (str.++ stem3 sufH)) (str.++ unch13H (str.++ ch3H unch23H))))
(assert (= (str.++ preI (str.++ stem3 sufI)) (str.++ unch13I (str.++ ch3I unch23I))))
(assert (= (str.++ preJ (str.++ stem3 sufJ)) (str.++ unch13J (str.++ ch3J unch23J))))
(assert (= (str.++ preK (str.++ stem3 sufK)) (str.++ unch13K (str.++ ch3K unch23K))))
(assert (= (str.++ preL (str.++ stem3 sufL)) (str.++ unch13L (str.++ ch3L unch23L))))
(assert (= (str.++ preM (str.++ stem3 sufM)) (str.++ unch13M (str.++ ch3M unch23M))))
(assert (= "pamman" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "pammaKOXm" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "pannarXm" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "pat" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= "pattero" (str.++ unch13E (str.++ var3E unch23E))))
(assert (= "pakkwa" (str.++ unch13F (str.++ var3F unch23F))))
(assert (= "pappota" (str.++ unch13G (str.++ var3G unch23G))))
(assert (= "pakkaEi" (str.++ unch13H (str.++ var3H unch23H))))
(assert (= "pa1i" (str.++ unch13I (str.++ var3I unch23I))))
(assert (= "pa2Xn" (str.++ unch13J (str.++ var3J unch23J))))
(assert (= "pa2e" (str.++ unch13K (str.++ var3K unch23K))))
(assert (= "pa1ita" (str.++ unch13L (str.++ var3L unch23L))))
(assert (= "pa2Xro" (str.++ unch13M (str.++ var3M unch23M))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (= (ite (= ch3E var3E) 0 1) sc3E))
(assert (= (ite (= ch3F var3F) 0 1) sc3F))
(assert (= (ite (= ch3G var3G) 0 1) sc3G))
(assert (= (ite (= ch3H var3H) 0 1) sc3H))
(assert (= (ite (= ch3I var3I) 0 1) sc3I))
(assert (= (ite (= ch3J var3J) 0 1) sc3J))
(assert (= (ite (= ch3K var3K) 0 1) sc3K))
(assert (= (ite (= ch3L var3L) 0 1) sc3L))
(assert (= (ite (= ch3M var3M) 0 1) sc3M))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= sc3E 1))
(assert (<= sc3F 1))
(assert (<= sc3G 1))
(assert (<= sc3H 1))
(assert (<= sc3I 1))
(assert (<= sc3J 1))
(assert (<= sc3K 1))
(assert (<= sc3L 1))
(assert (<= sc3M 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (<= (str.len var4E) 1))
(assert (<= (str.len var4F) 1))
(assert (<= (str.len var4G) 1))
(assert (<= (str.len var4H) 1))
(assert (<= (str.len var4I) 1))
(assert (<= (str.len var4J) 1))
(assert (<= (str.len var4K) 1))
(assert (<= (str.len var4L) 1))
(assert (<= (str.len var4M) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= (str.++ preE (str.++ stem4 sufE)) (str.++ unch14E (str.++ ch4E unch24E))))
(assert (= (str.++ preF (str.++ stem4 sufF)) (str.++ unch14F (str.++ ch4F unch24F))))
(assert (= (str.++ preG (str.++ stem4 sufG)) (str.++ unch14G (str.++ ch4G unch24G))))
(assert (= (str.++ preH (str.++ stem4 sufH)) (str.++ unch14H (str.++ ch4H unch24H))))
(assert (= (str.++ preI (str.++ stem4 sufI)) (str.++ unch14I (str.++ ch4I unch24I))))
(assert (= (str.++ preJ (str.++ stem4 sufJ)) (str.++ unch14J (str.++ ch4J unch24J))))
(assert (= (str.++ preK (str.++ stem4 sufK)) (str.++ unch14K (str.++ ch4K unch24K))))
(assert (= (str.++ preL (str.++ stem4 sufL)) (str.++ unch14L (str.++ ch4L unch24L))))
(assert (= (str.++ preM (str.++ stem4 sufM)) (str.++ unch14M (str.++ ch4M unch24M))))
(assert (= "namman" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "nammaKOXm" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "nannarXm" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "nat" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= "nattero" (str.++ unch14E (str.++ var4E unch24E))))
(assert (= "nakkwa" (str.++ unch14F (str.++ var4F unch24F))))
(assert (= "nappota" (str.++ unch14G (str.++ var4G unch24G))))
(assert (= "nakkaEi" (str.++ unch14H (str.++ var4H unch24H))))
(assert (= "nasi" (str.++ unch14I (str.++ var4I unch24I))))
(assert (= "nasXn" (str.++ unch14J (str.++ var4J unch24J))))
(assert (= "nase" (str.++ unch14K (str.++ var4K unch24K))))
(assert (= "nasita" (str.++ unch14L (str.++ var4L unch24L))))
(assert (= "nasXro" (str.++ unch14M (str.++ var4M unch24M))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (= (ite (= ch4E var4E) 0 1) sc4E))
(assert (= (ite (= ch4F var4F) 0 1) sc4F))
(assert (= (ite (= ch4G var4G) 0 1) sc4G))
(assert (= (ite (= ch4H var4H) 0 1) sc4H))
(assert (= (ite (= ch4I var4I) 0 1) sc4I))
(assert (= (ite (= ch4J var4J) 0 1) sc4J))
(assert (= (ite (= ch4K var4K) 0 1) sc4K))
(assert (= (ite (= ch4L var4L) 0 1) sc4L))
(assert (= (ite (= ch4M var4M) 0 1) sc4M))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= sc4E 1))
(assert (<= sc4F 1))
(assert (<= sc4G 1))
(assert (<= sc4H 1))
(assert (<= sc4I 1))
(assert (<= sc4J 1))
(assert (<= sc4K 1))
(assert (<= sc4L 1))
(assert (<= sc4M 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (<= (str.len var5E) 1))
(assert (<= (str.len var5F) 1))
(assert (<= (str.len var5G) 1))
(assert (<= (str.len var5H) 1))
(assert (<= (str.len var5I) 1))
(assert (<= (str.len var5J) 1))
(assert (<= (str.len var5K) 1))
(assert (<= (str.len var5L) 1))
(assert (<= (str.len var5M) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= (str.++ preE (str.++ stem5 sufE)) (str.++ unch15E (str.++ ch5E unch25E))))
(assert (= (str.++ preF (str.++ stem5 sufF)) (str.++ unch15F (str.++ ch5F unch25F))))
(assert (= (str.++ preG (str.++ stem5 sufG)) (str.++ unch15G (str.++ ch5G unch25G))))
(assert (= (str.++ preH (str.++ stem5 sufH)) (str.++ unch15H (str.++ ch5H unch25H))))
(assert (= (str.++ preI (str.++ stem5 sufI)) (str.++ unch15I (str.++ ch5I unch25I))))
(assert (= (str.++ preJ (str.++ stem5 sufJ)) (str.++ unch15J (str.++ ch5J unch25J))))
(assert (= (str.++ preK (str.++ stem5 sufK)) (str.++ unch15K (str.++ ch5K unch25K))))
(assert (= (str.++ preL (str.++ stem5 sufL)) (str.++ unch15L (str.++ ch5L unch25L))))
(assert (= (str.++ preM (str.++ stem5 sufM)) (str.++ unch15M (str.++ ch5M unch25M))))
(assert (= "namman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "nammaKOXm" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "nannarXm" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "nat" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= "nattero" (str.++ unch15E (str.++ var5E unch25E))))
(assert (= "nakkwa" (str.++ unch15F (str.++ var5F unch25F))))
(assert (= "nappota" (str.++ unch15G (str.++ var5G unch25G))))
(assert (= "nakkaEi" (str.++ unch15H (str.++ var5H unch25H))))
(assert (= "naEi" (str.++ unch15I (str.++ var5I unch25I))))
(assert (= "naEXn" (str.++ unch15J (str.++ var5J unch25J))))
(assert (= "naEe" (str.++ unch15K (str.++ var5K unch25K))))
(assert (= "naEita" (str.++ unch15L (str.++ var5L unch25L))))
(assert (= "naEXro" (str.++ unch15M (str.++ var5M unch25M))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (= (ite (= ch5E var5E) 0 1) sc5E))
(assert (= (ite (= ch5F var5F) 0 1) sc5F))
(assert (= (ite (= ch5G var5G) 0 1) sc5G))
(assert (= (ite (= ch5H var5H) 0 1) sc5H))
(assert (= (ite (= ch5I var5I) 0 1) sc5I))
(assert (= (ite (= ch5J var5J) 0 1) sc5J))
(assert (= (ite (= ch5K var5K) 0 1) sc5K))
(assert (= (ite (= ch5L var5L) 0 1) sc5L))
(assert (= (ite (= ch5M var5M) 0 1) sc5M))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= sc5E 1))
(assert (<= sc5F 1))
(assert (<= sc5G 1))
(assert (<= sc5H 1))
(assert (<= sc5I 1))
(assert (<= sc5J 1))
(assert (<= sc5K 1))
(assert (<= sc5L 1))
(assert (<= sc5M 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (<= (str.len var6E) 1))
(assert (<= (str.len var6F) 1))
(assert (<= (str.len var6G) 1))
(assert (<= (str.len var6H) 1))
(assert (<= (str.len var6I) 1))
(assert (<= (str.len var6J) 1))
(assert (<= (str.len var6K) 1))
(assert (<= (str.len var6L) 1))
(assert (<= (str.len var6M) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= (str.++ preE (str.++ stem6 sufE)) (str.++ unch16E (str.++ ch6E unch26E))))
(assert (= (str.++ preF (str.++ stem6 sufF)) (str.++ unch16F (str.++ ch6F unch26F))))
(assert (= (str.++ preG (str.++ stem6 sufG)) (str.++ unch16G (str.++ ch6G unch26G))))
(assert (= (str.++ preH (str.++ stem6 sufH)) (str.++ unch16H (str.++ ch6H unch26H))))
(assert (= (str.++ preI (str.++ stem6 sufI)) (str.++ unch16I (str.++ ch6I unch26I))))
(assert (= (str.++ preJ (str.++ stem6 sufJ)) (str.++ unch16J (str.++ ch6J unch26J))))
(assert (= (str.++ preK (str.++ stem6 sufK)) (str.++ unch16K (str.++ ch6K unch26K))))
(assert (= (str.++ preL (str.++ stem6 sufL)) (str.++ unch16L (str.++ ch6L unch26L))))
(assert (= (str.++ preM (str.++ stem6 sufM)) (str.++ unch16M (str.++ ch6M unch26M))))
(assert (= "namman" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "nammaKOXm" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "nannarXm" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "nat" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= "nattero" (str.++ unch16E (str.++ var6E unch26E))))
(assert (= "nakkwa" (str.++ unch16F (str.++ var6F unch26F))))
(assert (= "nappota" (str.++ unch16G (str.++ var6G unch26G))))
(assert (= "nakkaEi" (str.++ unch16H (str.++ var6H unch26H))))
(assert (= "na1i" (str.++ unch16I (str.++ var6I unch26I))))
(assert (= "na1Xn" (str.++ unch16J (str.++ var6J unch26J))))
(assert (= "na1e" (str.++ unch16K (str.++ var6K unch26K))))
(assert (= "na1ita" (str.++ unch16L (str.++ var6L unch26L))))
(assert (= "na1Xro" (str.++ unch16M (str.++ var6M unch26M))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (= (ite (= ch6E var6E) 0 1) sc6E))
(assert (= (ite (= ch6F var6F) 0 1) sc6F))
(assert (= (ite (= ch6G var6G) 0 1) sc6G))
(assert (= (ite (= ch6H var6H) 0 1) sc6H))
(assert (= (ite (= ch6I var6I) 0 1) sc6I))
(assert (= (ite (= ch6J var6J) 0 1) sc6J))
(assert (= (ite (= ch6K var6K) 0 1) sc6K))
(assert (= (ite (= ch6L var6L) 0 1) sc6L))
(assert (= (ite (= ch6M var6M) 0 1) sc6M))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= sc6E 1))
(assert (<= sc6F 1))
(assert (<= sc6G 1))
(assert (<= sc6H 1))
(assert (<= sc6I 1))
(assert (<= sc6J 1))
(assert (<= sc6K 1))
(assert (<= sc6L 1))
(assert (<= sc6M 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (<= (str.len var7E) 1))
(assert (<= (str.len var7F) 1))
(assert (<= (str.len var7G) 1))
(assert (<= (str.len var7H) 1))
(assert (<= (str.len var7I) 1))
(assert (<= (str.len var7J) 1))
(assert (<= (str.len var7K) 1))
(assert (<= (str.len var7L) 1))
(assert (<= (str.len var7M) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= (str.++ preE (str.++ stem7 sufE)) (str.++ unch17E (str.++ ch7E unch27E))))
(assert (= (str.++ preF (str.++ stem7 sufF)) (str.++ unch17F (str.++ ch7F unch27F))))
(assert (= (str.++ preG (str.++ stem7 sufG)) (str.++ unch17G (str.++ ch7G unch27G))))
(assert (= (str.++ preH (str.++ stem7 sufH)) (str.++ unch17H (str.++ ch7H unch27H))))
(assert (= (str.++ preI (str.++ stem7 sufI)) (str.++ unch17I (str.++ ch7I unch27I))))
(assert (= (str.++ preJ (str.++ stem7 sufJ)) (str.++ unch17J (str.++ ch7J unch27J))))
(assert (= (str.++ preK (str.++ stem7 sufK)) (str.++ unch17K (str.++ ch7K unch27K))))
(assert (= (str.++ preL (str.++ stem7 sufL)) (str.++ unch17L (str.++ ch7L unch27L))))
(assert (= (str.++ preM (str.++ stem7 sufM)) (str.++ unch17M (str.++ ch7M unch27M))))
(assert (= "pamman" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pammaKOXm" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pannarXm" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pan" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= "pantero" (str.++ unch17E (str.++ var7E unch27E))))
(assert (= "paKkwa" (str.++ unch17F (str.++ var7F unch27F))))
(assert (= "pampota" (str.++ unch17G (str.++ var7G unch27G))))
(assert (= "paKkaEi" (str.++ unch17H (str.++ var7H unch27H))))
(assert (= "pani" (str.++ unch17I (str.++ var7I unch27I))))
(assert (= "panXn" (str.++ unch17J (str.++ var7J unch27J))))
(assert (= "pane" (str.++ unch17K (str.++ var7K unch27K))))
(assert (= "panita" (str.++ unch17L (str.++ var7L unch27L))))
(assert (= "panXro" (str.++ unch17M (str.++ var7M unch27M))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (= (ite (= ch7E var7E) 0 1) sc7E))
(assert (= (ite (= ch7F var7F) 0 1) sc7F))
(assert (= (ite (= ch7G var7G) 0 1) sc7G))
(assert (= (ite (= ch7H var7H) 0 1) sc7H))
(assert (= (ite (= ch7I var7I) 0 1) sc7I))
(assert (= (ite (= ch7J var7J) 0 1) sc7J))
(assert (= (ite (= ch7K var7K) 0 1) sc7K))
(assert (= (ite (= ch7L var7L) 0 1) sc7L))
(assert (= (ite (= ch7M var7M) 0 1) sc7M))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= sc7E 1))
(assert (<= sc7F 1))
(assert (<= sc7G 1))
(assert (<= sc7H 1))
(assert (<= sc7I 1))
(assert (<= sc7J 1))
(assert (<= sc7K 1))
(assert (<= sc7L 1))
(assert (<= sc7M 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      sc0E
      sc0F
      sc0G
      sc0H
      sc0I
      sc0J
      sc0K
      sc0L
      sc0M
      0
      sc1A
      sc1B
      sc1C
      sc1D
      sc1E
      sc1F
      sc1G
      sc1H
      sc1I
      sc1J
      sc1K
      sc1L
      sc1M
      0
      sc2A
      sc2B
      sc2C
      sc2D
      sc2E
      sc2F
      sc2G
      sc2H
      sc2I
      sc2J
      sc2K
      sc2L
      sc2M
      0
      sc3A
      sc3B
      sc3C
      sc3D
      sc3E
      sc3F
      sc3G
      sc3H
      sc3I
      sc3J
      sc3K
      sc3L
      sc3M
      0
      sc4A
      sc4B
      sc4C
      sc4D
      sc4E
      sc4F
      sc4G
      sc4H
      sc4I
      sc4J
      sc4K
      sc4L
      sc4M
      0
      sc5A
      sc5B
      sc5C
      sc5D
      sc5E
      sc5F
      sc5G
      sc5H
      sc5I
      sc5J
      sc5K
      sc5L
      sc5M
      0
      sc6A
      sc6B
      sc6C
      sc6D
      sc6E
      sc6F
      sc6G
      sc6H
      sc6I
      sc6J
      sc6K
      sc6L
      sc6M
      0
      sc7A
      sc7B
      sc7C
      sc7D
      sc7E
      sc7F
      sc7G
      sc7H
      sc7I
      sc7J
      sc7K
      sc7L
      sc7M)
   17))
