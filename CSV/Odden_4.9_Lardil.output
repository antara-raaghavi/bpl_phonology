[['kentapal', 'kentapalin', 'kentapalŋar', 'kentapaluṛ'], ['ketar', 'ketarin', 'ketarŋar', 'ketaruṛ'], ['mijaṛ', 'mijaṛin', 'mijaṛŋar', 'mijaṛuṛ'], ['jupur', 'jupurin', 'jupurŋar', 'jupuruṛ'], ['taŋur', 'taŋurin', 'taŋurŋar', 'taŋuruṛ'], ['jaraman', 'jaramanin', 'jaramanar', 'jaramankuṛ'], ['maaṇ', 'maaṇin', 'maaṇar', 'maaṇkuṛ'], ['pirŋen', 'pirŋenin', 'pirŋenar', 'pirŋenkuṛ'], ['mela', 'melan', 'melaŋar', 'melaṛ'], ['tawa', 'tawan', 'tawaŋar', 'tawaṛ'], ['wanka', 'wankan', 'wankaŋar', 'wankaṛ'], ['kuŋka', 'kuŋkan', 'kuŋkaŋar', 'kuŋkaṛ'], ['tarŋka', 'tarŋkan', 'tarŋkaŋar', 'tarŋkaṛ'], ['ŋuka', 'ŋukun', 'ŋukuŋar', 'ŋukuṛ'], ['ŋuṛa', 'ŋuṛun', 'ŋuṛuŋar', 'ŋuṛuṛ'], ['kaṭa', 'kaṭun', 'kaṭuŋar', 'kaṭuṛ'], ['muṇa', 'muṇun', 'muṇuŋar', 'muṇuṛ'], ['ŋawa', 'ŋawun', 'ŋawuŋar', 'ŋawuṛ'], ['keṇṭe', 'keṇṭin', 'keṇṭiŋar', 'keṇṭiwuṛ'], ['tjimpe', 'tjimpin', 'tjimpiŋar', 'tjimpiwuṛ'], ['ŋiṇe', 'ŋiṇin', 'ŋiṇiŋar', 'ŋiṇiwuṛ'], ['pape', 'papin', 'papiŋar', 'papiwuṛ'], ['tjempe', 'tjempen', 'tjempeŋar', 'tjempeṛ'], ['wiṭe', 'wiṭen', 'wiṭeŋar', 'wiṭeṛ'], ['waŋal', 'waŋalkin', 'waŋalkar', 'waŋalkuṛ'], ['menjel', 'menjelkin', 'menjelkar', 'menjelkuṛ'], ['makar', 'makarkin', 'makarkar', 'makarkuṛ'], ['jalul', 'jalulun', 'jaluluŋar', 'jaluluṛ'], ['majar', 'majaran', 'majaraŋar', 'majaraṛ'], ['talkur', 'talkuran', 'talkuraŋar', 'talkuraṛ'], ['wiwal', 'wiwalan', 'wiwalaŋar', 'wiwalaṛ'], ['karikar', 'karikarin', 'karikariŋar', 'karikariwuṛ'], ['jilijil', 'jilijilin', 'jilijiliŋar', 'jilijiliwuṛ'], ['jukar', 'jukarpan', 'jukarpaŋar', 'jukarpaṛ'], ['pulŋar', 'pulŋarpan', 'pulŋarpaŋar', 'pulŋarpaṛ'], ['wulun', 'wulunkan', 'wulunkaŋar', 'wulunkaṛ'], ['wuṭal', 'wuṭaltjin', 'wuṭaltjiŋar', 'wuṭaltjiwur'], ['kantukan', 'kantukantun', 'kantukantuŋar', 'kantukantuṛ'], ['karwakar', 'karwakarwan', 'karwakarwaŋar', 'karwakarwaṛ'], ['turara', 'turaraŋin', 'turaraŋar', 'turaraŋkuṛ'], ['ŋalu', 'ŋalukin', 'ŋalukar', 'ŋalukuṛ'], ['kurka', 'kurkaŋin', 'kurkaŋar', 'kurkaŋkuṛ'], ['taŋku', 'taŋkuŋin', 'taŋkuŋar', 'taŋkuŋkuṛ'], ['kurpuṛu', 'kurpuṛuŋin', 'kurpuṛuŋar', 'kurpuṛuŋkuṛ'], ['putu', 'putukan', 'putukaŋar', 'putukaṛ'], ['maali', 'maalijan', 'maalijaŋar', 'maalijaṛ'], ['tjiṇtirpu', 'tjiṇtirpuwan', 'tjiṇtirpuwaŋar', 'tjiṇtirpuwaṛ'], ['pukatji', 'pukatjijan', 'pukatjijaŋar', 'pukatjijaṛ'], ['murkuni', 'murkuniman', 'murkunimaŋar', 'murkunimaṛ'], ['ŋawuŋa', 'ŋawuŋawun', 'ŋawuŋawuŋar', 'ŋawuŋawuṛ'], ['tipiti', 'tipitipin', 'tipitipiŋar', 'tipitipiwuṛ'], ['tapu', 'taputjin', 'taputjiŋar', 'taputjiwuṛ'], ['muŋkumu', 'muŋkumuŋkun', 'muŋkumuŋkuŋar', 'muŋkumuŋkuṛ'], ['tjumputju', 'tjumputjumpun', 'tjumputjumpuŋar', 'tjumputjumpuṛ']]
kentapal  >  ['k', 'e', 'n', 't', 'a', 'p', 'a', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
kentapalin  >  ['k', 'e', 'n', 't', 'a', 'p', 'a', 'l', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
kentapalŋar  >  ['k', 'e', 'n', 't', 'a', 'p', 'a', 'l', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
kentapaluṛ  >  ['k', 'e', 'n', 't', 'a', 'p', 'a', 'l', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
ketar  >  ['k', 'e', 't', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
ketarin  >  ['k', 'e', 't', 'a', 'r', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
ketarŋar  >  ['k', 'e', 't', 'a', 'r', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
ketaruṛ  >  ['k', 'e', 't', 'a', 'r', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
mijaṛ  >  ['m', 'i', 'j', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
mijaṛin  >  ['m', 'i', 'j', 'a', 'O', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
mijaṛŋar  >  ['m', 'i', 'j', 'a', 'O', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
mijaṛuṛ  >  ['m', 'i', 'j', 'a', 'O', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jupur  >  ['j', 'u', 'p', 'u', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jupurin  >  ['j', 'u', 'p', 'u', 'r', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jupurŋar  >  ['j', 'u', 'p', 'u', 'r', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jupuruṛ  >  ['j', 'u', 'p', 'u', 'r', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
taŋur  >  ['t', 'a', 'K', 'u', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
taŋurin  >  ['t', 'a', 'K', 'u', 'r', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
taŋurŋar  >  ['t', 'a', 'K', 'u', 'r', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
taŋuruṛ  >  ['t', 'a', 'K', 'u', 'r', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jaraman  >  ['j', 'a', 'r', 'a', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jaramanin  >  ['j', 'a', 'r', 'a', 'm', 'a', 'n', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jaramanar  >  ['j', 'a', 'r', 'a', 'm', 'a', 'n', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
jaramankuṛ  >  ['j', 'a', 'r', 'a', 'm', 'a', 'n', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O'}
maaṇ  >  ['m', 'a', 'a', 'X'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
maaṇin  >  ['m', 'a', 'a', 'X', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
maaṇar  >  ['m', 'a', 'a', 'X', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
maaṇkuṛ  >  ['m', 'a', 'a', 'X', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
pirŋen  >  ['p', 'i', 'r', 'K', 'e', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
pirŋenin  >  ['p', 'i', 'r', 'K', 'e', 'n', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
pirŋenar  >  ['p', 'i', 'r', 'K', 'e', 'n', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
pirŋenkuṛ  >  ['p', 'i', 'r', 'K', 'e', 'n', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
mela  >  ['m', 'e', 'l', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
melan  >  ['m', 'e', 'l', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
melaŋar  >  ['m', 'e', 'l', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
melaṛ  >  ['m', 'e', 'l', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tawa  >  ['t', 'a', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tawan  >  ['t', 'a', 'w', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tawaŋar  >  ['t', 'a', 'w', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tawaṛ  >  ['t', 'a', 'w', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
wanka  >  ['w', 'a', 'n', 'k', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
wankan  >  ['w', 'a', 'n', 'k', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
wankaŋar  >  ['w', 'a', 'n', 'k', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
wankaṛ  >  ['w', 'a', 'n', 'k', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
kuŋka  >  ['k', 'u', 'K', 'k', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
kuŋkan  >  ['k', 'u', 'K', 'k', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
kuŋkaŋar  >  ['k', 'u', 'K', 'k', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
kuŋkaṛ  >  ['k', 'u', 'K', 'k', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tarŋka  >  ['t', 'a', 'r', 'K', 'k', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tarŋkan  >  ['t', 'a', 'r', 'K', 'k', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tarŋkaŋar  >  ['t', 'a', 'r', 'K', 'k', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
tarŋkaṛ  >  ['t', 'a', 'r', 'K', 'k', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋuka  >  ['K', 'u', 'k', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋukun  >  ['K', 'u', 'k', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋukuŋar  >  ['K', 'u', 'k', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋukuṛ  >  ['K', 'u', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋuṛa  >  ['K', 'u', 'O', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋuṛun  >  ['K', 'u', 'O', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋuṛuŋar  >  ['K', 'u', 'O', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
ŋuṛuṛ  >  ['K', 'u', 'O', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X'}
kaṭa  >  ['k', 'a', 'Z', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kaṭun  >  ['k', 'a', 'Z', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kaṭuŋar  >  ['k', 'a', 'Z', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kaṭuṛ  >  ['k', 'a', 'Z', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muṇa  >  ['m', 'u', 'X', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muṇun  >  ['m', 'u', 'X', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muṇuŋar  >  ['m', 'u', 'X', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muṇuṛ  >  ['m', 'u', 'X', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawa  >  ['K', 'a', 'w', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawun  >  ['K', 'a', 'w', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawuŋar  >  ['K', 'a', 'w', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawuṛ  >  ['K', 'a', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
keṇṭe  >  ['k', 'e', 'X', 'Z', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
keṇṭin  >  ['k', 'e', 'X', 'Z', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
keṇṭiŋar  >  ['k', 'e', 'X', 'Z', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
keṇṭiwuṛ  >  ['k', 'e', 'X', 'Z', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjimpe  >  ['t', 'j', 'i', 'm', 'p', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjimpin  >  ['t', 'j', 'i', 'm', 'p', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjimpiŋar  >  ['t', 'j', 'i', 'm', 'p', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjimpiwuṛ  >  ['t', 'j', 'i', 'm', 'p', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋiṇe  >  ['K', 'i', 'X', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋiṇin  >  ['K', 'i', 'X', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋiṇiŋar  >  ['K', 'i', 'X', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋiṇiwuṛ  >  ['K', 'i', 'X', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pape  >  ['p', 'a', 'p', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
papin  >  ['p', 'a', 'p', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
papiŋar  >  ['p', 'a', 'p', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
papiwuṛ  >  ['p', 'a', 'p', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjempe  >  ['t', 'j', 'e', 'm', 'p', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjempen  >  ['t', 'j', 'e', 'm', 'p', 'e', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjempeŋar  >  ['t', 'j', 'e', 'm', 'p', 'e', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjempeṛ  >  ['t', 'j', 'e', 'm', 'p', 'e', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiṭe  >  ['w', 'i', 'Z', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiṭen  >  ['w', 'i', 'Z', 'e', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiṭeŋar  >  ['w', 'i', 'Z', 'e', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiṭeṛ  >  ['w', 'i', 'Z', 'e', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
waŋal  >  ['w', 'a', 'K', 'a', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
waŋalkin  >  ['w', 'a', 'K', 'a', 'l', 'k', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
waŋalkar  >  ['w', 'a', 'K', 'a', 'l', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
waŋalkuṛ  >  ['w', 'a', 'K', 'a', 'l', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
menjel  >  ['m', 'e', 'n', 'j', 'e', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
menjelkin  >  ['m', 'e', 'n', 'j', 'e', 'l', 'k', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
menjelkar  >  ['m', 'e', 'n', 'j', 'e', 'l', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
menjelkuṛ  >  ['m', 'e', 'n', 'j', 'e', 'l', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
makar  >  ['m', 'a', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
makarkin  >  ['m', 'a', 'k', 'a', 'r', 'k', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
makarkar  >  ['m', 'a', 'k', 'a', 'r', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
makarkuṛ  >  ['m', 'a', 'k', 'a', 'r', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jalul  >  ['j', 'a', 'l', 'u', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jalulun  >  ['j', 'a', 'l', 'u', 'l', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jaluluŋar  >  ['j', 'a', 'l', 'u', 'l', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jaluluṛ  >  ['j', 'a', 'l', 'u', 'l', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
majar  >  ['m', 'a', 'j', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
majaran  >  ['m', 'a', 'j', 'a', 'r', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
majaraŋar  >  ['m', 'a', 'j', 'a', 'r', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
majaraṛ  >  ['m', 'a', 'j', 'a', 'r', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
talkur  >  ['t', 'a', 'l', 'k', 'u', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
talkuran  >  ['t', 'a', 'l', 'k', 'u', 'r', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
talkuraŋar  >  ['t', 'a', 'l', 'k', 'u', 'r', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
talkuraṛ  >  ['t', 'a', 'l', 'k', 'u', 'r', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiwal  >  ['w', 'i', 'w', 'a', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiwalan  >  ['w', 'i', 'w', 'a', 'l', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiwalaŋar  >  ['w', 'i', 'w', 'a', 'l', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wiwalaṛ  >  ['w', 'i', 'w', 'a', 'l', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karikar  >  ['k', 'a', 'r', 'i', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karikarin  >  ['k', 'a', 'r', 'i', 'k', 'a', 'r', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karikariŋar  >  ['k', 'a', 'r', 'i', 'k', 'a', 'r', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karikariwuṛ  >  ['k', 'a', 'r', 'i', 'k', 'a', 'r', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jilijil  >  ['j', 'i', 'l', 'i', 'j', 'i', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jilijilin  >  ['j', 'i', 'l', 'i', 'j', 'i', 'l', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jilijiliŋar  >  ['j', 'i', 'l', 'i', 'j', 'i', 'l', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jilijiliwuṛ  >  ['j', 'i', 'l', 'i', 'j', 'i', 'l', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jukar  >  ['j', 'u', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jukarpan  >  ['j', 'u', 'k', 'a', 'r', 'p', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jukarpaŋar  >  ['j', 'u', 'k', 'a', 'r', 'p', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
jukarpaṛ  >  ['j', 'u', 'k', 'a', 'r', 'p', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pulŋar  >  ['p', 'u', 'l', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pulŋarpan  >  ['p', 'u', 'l', 'K', 'a', 'r', 'p', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pulŋarpaŋar  >  ['p', 'u', 'l', 'K', 'a', 'r', 'p', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pulŋarpaṛ  >  ['p', 'u', 'l', 'K', 'a', 'r', 'p', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wulun  >  ['w', 'u', 'l', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wulunkan  >  ['w', 'u', 'l', 'u', 'n', 'k', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wulunkaŋar  >  ['w', 'u', 'l', 'u', 'n', 'k', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wulunkaṛ  >  ['w', 'u', 'l', 'u', 'n', 'k', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wuṭal  >  ['w', 'u', 'Z', 'a', 'l'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wuṭaltjin  >  ['w', 'u', 'Z', 'a', 'l', 't', 'j', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wuṭaltjiŋar  >  ['w', 'u', 'Z', 'a', 'l', 't', 'j', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
wuṭaltjiwur  >  ['w', 'u', 'Z', 'a', 'l', 't', 'j', 'i', 'w', 'u', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kantukan  >  ['k', 'a', 'n', 't', 'u', 'k', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kantukantun  >  ['k', 'a', 'n', 't', 'u', 'k', 'a', 'n', 't', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kantukantuŋar  >  ['k', 'a', 'n', 't', 'u', 'k', 'a', 'n', 't', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kantukantuṛ  >  ['k', 'a', 'n', 't', 'u', 'k', 'a', 'n', 't', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karwakar  >  ['k', 'a', 'r', 'w', 'a', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karwakarwan  >  ['k', 'a', 'r', 'w', 'a', 'k', 'a', 'r', 'w', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karwakarwaŋar  >  ['k', 'a', 'r', 'w', 'a', 'k', 'a', 'r', 'w', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
karwakarwaṛ  >  ['k', 'a', 'r', 'w', 'a', 'k', 'a', 'r', 'w', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
turara  >  ['t', 'u', 'r', 'a', 'r', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
turaraŋin  >  ['t', 'u', 'r', 'a', 'r', 'a', 'K', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
turaraŋar  >  ['t', 'u', 'r', 'a', 'r', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
turaraŋkuṛ  >  ['t', 'u', 'r', 'a', 'r', 'a', 'K', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋalu  >  ['K', 'a', 'l', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋalukin  >  ['K', 'a', 'l', 'u', 'k', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋalukar  >  ['K', 'a', 'l', 'u', 'k', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋalukuṛ  >  ['K', 'a', 'l', 'u', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurka  >  ['k', 'u', 'r', 'k', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurkaŋin  >  ['k', 'u', 'r', 'k', 'a', 'K', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurkaŋar  >  ['k', 'u', 'r', 'k', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurkaŋkuṛ  >  ['k', 'u', 'r', 'k', 'a', 'K', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taŋku  >  ['t', 'a', 'K', 'k', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taŋkuŋin  >  ['t', 'a', 'K', 'k', 'u', 'K', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taŋkuŋar  >  ['t', 'a', 'K', 'k', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taŋkuŋkuṛ  >  ['t', 'a', 'K', 'k', 'u', 'K', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurpuṛu  >  ['k', 'u', 'r', 'p', 'u', 'O', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurpuṛuŋin  >  ['k', 'u', 'r', 'p', 'u', 'O', 'u', 'K', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurpuṛuŋar  >  ['k', 'u', 'r', 'p', 'u', 'O', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
kurpuṛuŋkuṛ  >  ['k', 'u', 'r', 'p', 'u', 'O', 'u', 'K', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
putu  >  ['p', 'u', 't', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
putukan  >  ['p', 'u', 't', 'u', 'k', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
putukaŋar  >  ['p', 'u', 't', 'u', 'k', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
putukaṛ  >  ['p', 'u', 't', 'u', 'k', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
maali  >  ['m', 'a', 'a', 'l', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
maalijan  >  ['m', 'a', 'a', 'l', 'i', 'j', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
maalijaŋar  >  ['m', 'a', 'a', 'l', 'i', 'j', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
maalijaṛ  >  ['m', 'a', 'a', 'l', 'i', 'j', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjiṇtirpu  >  ['t', 'j', 'i', 'X', 't', 'i', 'r', 'p', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjiṇtirpuwan  >  ['t', 'j', 'i', 'X', 't', 'i', 'r', 'p', 'u', 'w', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjiṇtirpuwaŋar  >  ['t', 'j', 'i', 'X', 't', 'i', 'r', 'p', 'u', 'w', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjiṇtirpuwaṛ  >  ['t', 'j', 'i', 'X', 't', 'i', 'r', 'p', 'u', 'w', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pukatji  >  ['p', 'u', 'k', 'a', 't', 'j', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pukatjijan  >  ['p', 'u', 'k', 'a', 't', 'j', 'i', 'j', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pukatjijaŋar  >  ['p', 'u', 'k', 'a', 't', 'j', 'i', 'j', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
pukatjijaṛ  >  ['p', 'u', 'k', 'a', 't', 'j', 'i', 'j', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
murkuni  >  ['m', 'u', 'r', 'k', 'u', 'n', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
murkuniman  >  ['m', 'u', 'r', 'k', 'u', 'n', 'i', 'm', 'a', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
murkunimaŋar  >  ['m', 'u', 'r', 'k', 'u', 'n', 'i', 'm', 'a', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
murkunimaṛ  >  ['m', 'u', 'r', 'k', 'u', 'n', 'i', 'm', 'a', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawuŋa  >  ['K', 'a', 'w', 'u', 'K', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawuŋawun  >  ['K', 'a', 'w', 'u', 'K', 'a', 'w', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawuŋawuŋar  >  ['K', 'a', 'w', 'u', 'K', 'a', 'w', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
ŋawuŋawuṛ  >  ['K', 'a', 'w', 'u', 'K', 'a', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tipiti  >  ['t', 'i', 'p', 'i', 't', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tipitipin  >  ['t', 'i', 'p', 'i', 't', 'i', 'p', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tipitipiŋar  >  ['t', 'i', 'p', 'i', 't', 'i', 'p', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tipitipiwuṛ  >  ['t', 'i', 'p', 'i', 't', 'i', 'p', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tapu  >  ['t', 'a', 'p', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taputjin  >  ['t', 'a', 'p', 'u', 't', 'j', 'i', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taputjiŋar  >  ['t', 'a', 'p', 'u', 't', 'j', 'i', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
taputjiwuṛ  >  ['t', 'a', 'p', 'u', 't', 'j', 'i', 'w', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muŋkumu  >  ['m', 'u', 'K', 'k', 'u', 'm', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muŋkumuŋkun  >  ['m', 'u', 'K', 'k', 'u', 'm', 'u', 'K', 'k', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muŋkumuŋkuŋar  >  ['m', 'u', 'K', 'k', 'u', 'm', 'u', 'K', 'k', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
muŋkumuŋkuṛ  >  ['m', 'u', 'K', 'k', 'u', 'm', 'u', 'K', 'k', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjumputju  >  ['t', 'j', 'u', 'm', 'p', 'u', 't', 'j', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjumputjumpun  >  ['t', 'j', 'u', 'm', 'p', 'u', 't', 'j', 'u', 'm', 'p', 'u', 'n'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjumputjumpuŋar  >  ['t', 'j', 'u', 'm', 'p', 'u', 't', 'j', 'u', 'm', 'p', 'u', 'K', 'a', 'r'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
tjumputjumpuṛ  >  ['t', 'j', 'u', 'm', 'p', 'u', 't', 'j', 'u', 'm', 'p', 'u', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'ṛ': 'O', 'ṇ': 'X', 'ṭ': 'Z'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   4))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   5))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   6))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   7))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   8))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   9))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   10))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   11))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   12))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   13))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   14))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   15))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   16))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   17))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   18))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun var0C () String)
(declare-fun var0D () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun unch20C () String)
(declare-fun ch0C () String)
(declare-fun unch10C () String)
(declare-fun sufC () String)
(declare-fun preC () String)
(declare-fun unch20D () String)
(declare-fun ch0D () String)
(declare-fun unch10D () String)
(declare-fun sufD () String)
(declare-fun preD () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun sc0C () Int)
(declare-fun sc0D () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun var1C () String)
(declare-fun var1D () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun unch21C () String)
(declare-fun ch1C () String)
(declare-fun unch11C () String)
(declare-fun unch21D () String)
(declare-fun ch1D () String)
(declare-fun unch11D () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun sc1C () Int)
(declare-fun sc1D () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun var2C () String)
(declare-fun var2D () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun unch22C () String)
(declare-fun ch2C () String)
(declare-fun unch12C () String)
(declare-fun unch22D () String)
(declare-fun ch2D () String)
(declare-fun unch12D () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun sc2C () Int)
(declare-fun sc2D () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun var3C () String)
(declare-fun var3D () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun unch23C () String)
(declare-fun ch3C () String)
(declare-fun unch13C () String)
(declare-fun unch23D () String)
(declare-fun ch3D () String)
(declare-fun unch13D () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun sc3C () Int)
(declare-fun sc3D () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun var4C () String)
(declare-fun var4D () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun unch24C () String)
(declare-fun ch4C () String)
(declare-fun unch14C () String)
(declare-fun unch24D () String)
(declare-fun ch4D () String)
(declare-fun unch14D () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun sc4C () Int)
(declare-fun sc4D () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun var5C () String)
(declare-fun var5D () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun unch25C () String)
(declare-fun ch5C () String)
(declare-fun unch15C () String)
(declare-fun unch25D () String)
(declare-fun ch5D () String)
(declare-fun unch15D () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun sc5C () Int)
(declare-fun sc5D () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun var6C () String)
(declare-fun var6D () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun unch26C () String)
(declare-fun ch6C () String)
(declare-fun unch16C () String)
(declare-fun unch26D () String)
(declare-fun ch6D () String)
(declare-fun unch16D () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun sc6C () Int)
(declare-fun sc6D () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun var7C () String)
(declare-fun var7D () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun unch27C () String)
(declare-fun ch7C () String)
(declare-fun unch17C () String)
(declare-fun unch27D () String)
(declare-fun ch7D () String)
(declare-fun unch17D () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun sc7C () Int)
(declare-fun sc7D () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun var8C () String)
(declare-fun var8D () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun unch28C () String)
(declare-fun ch8C () String)
(declare-fun unch18C () String)
(declare-fun unch28D () String)
(declare-fun ch8D () String)
(declare-fun unch18D () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun sc8C () Int)
(declare-fun sc8D () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun var9C () String)
(declare-fun var9D () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun unch29C () String)
(declare-fun ch9C () String)
(declare-fun unch19C () String)
(declare-fun unch29D () String)
(declare-fun ch9D () String)
(declare-fun unch19D () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun sc9C () Int)
(declare-fun sc9D () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun var10C () String)
(declare-fun var10D () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun unch210C () String)
(declare-fun ch10C () String)
(declare-fun unch110C () String)
(declare-fun unch210D () String)
(declare-fun ch10D () String)
(declare-fun unch110D () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun sc10C () Int)
(declare-fun sc10D () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun var11C () String)
(declare-fun var11D () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun unch211C () String)
(declare-fun ch11C () String)
(declare-fun unch111C () String)
(declare-fun unch211D () String)
(declare-fun ch11D () String)
(declare-fun unch111D () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun sc11C () Int)
(declare-fun sc11D () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun var12C () String)
(declare-fun var12D () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun unch212C () String)
(declare-fun ch12C () String)
(declare-fun unch112C () String)
(declare-fun unch212D () String)
(declare-fun ch12D () String)
(declare-fun unch112D () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun sc12C () Int)
(declare-fun sc12D () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun var13C () String)
(declare-fun var13D () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun unch213C () String)
(declare-fun ch13C () String)
(declare-fun unch113C () String)
(declare-fun unch213D () String)
(declare-fun ch13D () String)
(declare-fun unch113D () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun sc13C () Int)
(declare-fun sc13D () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun var14C () String)
(declare-fun var14D () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun unch214C () String)
(declare-fun ch14C () String)
(declare-fun unch114C () String)
(declare-fun unch214D () String)
(declare-fun ch14D () String)
(declare-fun unch114D () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun sc14C () Int)
(declare-fun sc14D () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun var15C () String)
(declare-fun var15D () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun unch215C () String)
(declare-fun ch15C () String)
(declare-fun unch115C () String)
(declare-fun unch215D () String)
(declare-fun ch15D () String)
(declare-fun unch115D () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun sc15C () Int)
(declare-fun sc15D () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun var16C () String)
(declare-fun var16D () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun unch216C () String)
(declare-fun ch16C () String)
(declare-fun unch116C () String)
(declare-fun unch216D () String)
(declare-fun ch16D () String)
(declare-fun unch116D () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun sc16C () Int)
(declare-fun sc16D () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun var17C () String)
(declare-fun var17D () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun unch217C () String)
(declare-fun ch17C () String)
(declare-fun unch117C () String)
(declare-fun unch217D () String)
(declare-fun ch17D () String)
(declare-fun unch117D () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun sc17C () Int)
(declare-fun sc17D () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun var18C () String)
(declare-fun var18D () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun unch218C () String)
(declare-fun ch18C () String)
(declare-fun unch118C () String)
(declare-fun unch218D () String)
(declare-fun ch18D () String)
(declare-fun unch118D () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun sc18C () Int)
(declare-fun sc18D () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun var19C () String)
(declare-fun var19D () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun unch219C () String)
(declare-fun ch19C () String)
(declare-fun unch119C () String)
(declare-fun unch219D () String)
(declare-fun ch19D () String)
(declare-fun unch119D () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun sc19C () Int)
(declare-fun sc19D () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun var20C () String)
(declare-fun var20D () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun unch220C () String)
(declare-fun ch20C () String)
(declare-fun unch120C () String)
(declare-fun unch220D () String)
(declare-fun ch20D () String)
(declare-fun unch120D () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun sc20C () Int)
(declare-fun sc20D () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun var21C () String)
(declare-fun var21D () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun unch221C () String)
(declare-fun ch21C () String)
(declare-fun unch121C () String)
(declare-fun unch221D () String)
(declare-fun ch21D () String)
(declare-fun unch121D () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun sc21C () Int)
(declare-fun sc21D () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun var22C () String)
(declare-fun var22D () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun unch222C () String)
(declare-fun ch22C () String)
(declare-fun unch122C () String)
(declare-fun unch222D () String)
(declare-fun ch22D () String)
(declare-fun unch122D () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun sc22C () Int)
(declare-fun sc22D () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun var23C () String)
(declare-fun var23D () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun unch223C () String)
(declare-fun ch23C () String)
(declare-fun unch123C () String)
(declare-fun unch223D () String)
(declare-fun ch23D () String)
(declare-fun unch123D () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun sc23C () Int)
(declare-fun sc23D () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun var24C () String)
(declare-fun var24D () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun unch224C () String)
(declare-fun ch24C () String)
(declare-fun unch124C () String)
(declare-fun unch224D () String)
(declare-fun ch24D () String)
(declare-fun unch124D () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun sc24C () Int)
(declare-fun sc24D () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun var25C () String)
(declare-fun var25D () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun unch225C () String)
(declare-fun ch25C () String)
(declare-fun unch125C () String)
(declare-fun unch225D () String)
(declare-fun ch25D () String)
(declare-fun unch125D () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun sc25C () Int)
(declare-fun sc25D () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun var26C () String)
(declare-fun var26D () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun unch226C () String)
(declare-fun ch26C () String)
(declare-fun unch126C () String)
(declare-fun unch226D () String)
(declare-fun ch26D () String)
(declare-fun unch126D () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun sc26C () Int)
(declare-fun sc26D () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun var27C () String)
(declare-fun var27D () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun unch227C () String)
(declare-fun ch27C () String)
(declare-fun unch127C () String)
(declare-fun unch227D () String)
(declare-fun ch27D () String)
(declare-fun unch127D () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun sc27C () Int)
(declare-fun sc27D () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun var28C () String)
(declare-fun var28D () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun unch228C () String)
(declare-fun ch28C () String)
(declare-fun unch128C () String)
(declare-fun unch228D () String)
(declare-fun ch28D () String)
(declare-fun unch128D () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun sc28C () Int)
(declare-fun sc28D () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun var29C () String)
(declare-fun var29D () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun unch229C () String)
(declare-fun ch29C () String)
(declare-fun unch129C () String)
(declare-fun unch229D () String)
(declare-fun ch29D () String)
(declare-fun unch129D () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun sc29C () Int)
(declare-fun sc29D () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun var30C () String)
(declare-fun var30D () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun unch230C () String)
(declare-fun ch30C () String)
(declare-fun unch130C () String)
(declare-fun unch230D () String)
(declare-fun ch30D () String)
(declare-fun unch130D () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun sc30C () Int)
(declare-fun sc30D () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun var31C () String)
(declare-fun var31D () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun unch231C () String)
(declare-fun ch31C () String)
(declare-fun unch131C () String)
(declare-fun unch231D () String)
(declare-fun ch31D () String)
(declare-fun unch131D () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun sc31C () Int)
(declare-fun sc31D () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun var32C () String)
(declare-fun var32D () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun unch232C () String)
(declare-fun ch32C () String)
(declare-fun unch132C () String)
(declare-fun unch232D () String)
(declare-fun ch32D () String)
(declare-fun unch132D () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun sc32C () Int)
(declare-fun sc32D () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun var33C () String)
(declare-fun var33D () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun unch233C () String)
(declare-fun ch33C () String)
(declare-fun unch133C () String)
(declare-fun unch233D () String)
(declare-fun ch33D () String)
(declare-fun unch133D () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun sc33C () Int)
(declare-fun sc33D () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun var34C () String)
(declare-fun var34D () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun unch234C () String)
(declare-fun ch34C () String)
(declare-fun unch134C () String)
(declare-fun unch234D () String)
(declare-fun ch34D () String)
(declare-fun unch134D () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun sc34C () Int)
(declare-fun sc34D () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun var35C () String)
(declare-fun var35D () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun unch235C () String)
(declare-fun ch35C () String)
(declare-fun unch135C () String)
(declare-fun unch235D () String)
(declare-fun ch35D () String)
(declare-fun unch135D () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun sc35C () Int)
(declare-fun sc35D () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun var36C () String)
(declare-fun var36D () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun unch236C () String)
(declare-fun ch36C () String)
(declare-fun unch136C () String)
(declare-fun unch236D () String)
(declare-fun ch36D () String)
(declare-fun unch136D () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun sc36C () Int)
(declare-fun sc36D () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun var37C () String)
(declare-fun var37D () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun unch237C () String)
(declare-fun ch37C () String)
(declare-fun unch137C () String)
(declare-fun unch237D () String)
(declare-fun ch37D () String)
(declare-fun unch137D () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun sc37C () Int)
(declare-fun sc37D () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun var38C () String)
(declare-fun var38D () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun unch238C () String)
(declare-fun ch38C () String)
(declare-fun unch138C () String)
(declare-fun unch238D () String)
(declare-fun ch38D () String)
(declare-fun unch138D () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun sc38C () Int)
(declare-fun sc38D () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun var39C () String)
(declare-fun var39D () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun unch239C () String)
(declare-fun ch39C () String)
(declare-fun unch139C () String)
(declare-fun unch239D () String)
(declare-fun ch39D () String)
(declare-fun unch139D () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun sc39C () Int)
(declare-fun sc39D () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun var40C () String)
(declare-fun var40D () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun unch240C () String)
(declare-fun ch40C () String)
(declare-fun unch140C () String)
(declare-fun unch240D () String)
(declare-fun ch40D () String)
(declare-fun unch140D () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun sc40C () Int)
(declare-fun sc40D () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun var41C () String)
(declare-fun var41D () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun unch241C () String)
(declare-fun ch41C () String)
(declare-fun unch141C () String)
(declare-fun unch241D () String)
(declare-fun ch41D () String)
(declare-fun unch141D () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun sc41C () Int)
(declare-fun sc41D () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun var42C () String)
(declare-fun var42D () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun unch242C () String)
(declare-fun ch42C () String)
(declare-fun unch142C () String)
(declare-fun unch242D () String)
(declare-fun ch42D () String)
(declare-fun unch142D () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun sc42C () Int)
(declare-fun sc42D () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun var43C () String)
(declare-fun var43D () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun unch243C () String)
(declare-fun ch43C () String)
(declare-fun unch143C () String)
(declare-fun unch243D () String)
(declare-fun ch43D () String)
(declare-fun unch143D () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun sc43C () Int)
(declare-fun sc43D () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun var44C () String)
(declare-fun var44D () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun unch244C () String)
(declare-fun ch44C () String)
(declare-fun unch144C () String)
(declare-fun unch244D () String)
(declare-fun ch44D () String)
(declare-fun unch144D () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun sc44C () Int)
(declare-fun sc44D () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun var45C () String)
(declare-fun var45D () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun unch245C () String)
(declare-fun ch45C () String)
(declare-fun unch145C () String)
(declare-fun unch245D () String)
(declare-fun ch45D () String)
(declare-fun unch145D () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun sc45C () Int)
(declare-fun sc45D () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun var46C () String)
(declare-fun var46D () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun unch246C () String)
(declare-fun ch46C () String)
(declare-fun unch146C () String)
(declare-fun unch246D () String)
(declare-fun ch46D () String)
(declare-fun unch146D () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun sc46C () Int)
(declare-fun sc46D () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun var47C () String)
(declare-fun var47D () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun unch247C () String)
(declare-fun ch47C () String)
(declare-fun unch147C () String)
(declare-fun unch247D () String)
(declare-fun ch47D () String)
(declare-fun unch147D () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun sc47C () Int)
(declare-fun sc47D () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun var48C () String)
(declare-fun var48D () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun unch248C () String)
(declare-fun ch48C () String)
(declare-fun unch148C () String)
(declare-fun unch248D () String)
(declare-fun ch48D () String)
(declare-fun unch148D () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun sc48C () Int)
(declare-fun sc48D () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun var49C () String)
(declare-fun var49D () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun unch249C () String)
(declare-fun ch49C () String)
(declare-fun unch149C () String)
(declare-fun unch249D () String)
(declare-fun ch49D () String)
(declare-fun unch149D () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun sc49C () Int)
(declare-fun sc49D () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun var50C () String)
(declare-fun var50D () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun unch250C () String)
(declare-fun ch50C () String)
(declare-fun unch150C () String)
(declare-fun unch250D () String)
(declare-fun ch50D () String)
(declare-fun unch150D () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun sc50C () Int)
(declare-fun sc50D () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun var51C () String)
(declare-fun var51D () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun unch251C () String)
(declare-fun ch51C () String)
(declare-fun unch151C () String)
(declare-fun unch251D () String)
(declare-fun ch51D () String)
(declare-fun unch151D () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun sc51C () Int)
(declare-fun sc51D () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun var52C () String)
(declare-fun var52D () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun unch252C () String)
(declare-fun ch52C () String)
(declare-fun unch152C () String)
(declare-fun unch252D () String)
(declare-fun ch52D () String)
(declare-fun unch152D () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun sc52C () Int)
(declare-fun sc52D () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun var53C () String)
(declare-fun var53D () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun unch253C () String)
(declare-fun ch53C () String)
(declare-fun unch153C () String)
(declare-fun unch253D () String)
(declare-fun ch53D () String)
(declare-fun unch153D () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun sc53C () Int)
(declare-fun sc53D () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (<= (str.len var0C) 1))
(assert (<= (str.len var0D) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= (str.++ preC (str.++ stem0 sufC)) (str.++ unch10C (str.++ ch0C unch20C))))
(assert (= (str.++ preD (str.++ stem0 sufD)) (str.++ unch10D (str.++ ch0D unch20D))))
(assert (= "kentapal" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "kentapalin" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= "kentapalKar" (str.++ unch10C (str.++ var0C unch20C))))
(assert (= "kentapaluO" (str.++ unch10D (str.++ var0D unch20D))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (= (ite (= ch0C var0C) 0 1) sc0C))
(assert (= (ite (= ch0D var0D) 0 1) sc0D))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= sc0C 1))
(assert (<= sc0D 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (<= (str.len var1C) 1))
(assert (<= (str.len var1D) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= (str.++ preC (str.++ stem1 sufC)) (str.++ unch11C (str.++ ch1C unch21C))))
(assert (= (str.++ preD (str.++ stem1 sufD)) (str.++ unch11D (str.++ ch1D unch21D))))
(assert (= "ketar" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "ketarin" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= "ketarKar" (str.++ unch11C (str.++ var1C unch21C))))
(assert (= "ketaruO" (str.++ unch11D (str.++ var1D unch21D))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (= (ite (= ch1C var1C) 0 1) sc1C))
(assert (= (ite (= ch1D var1D) 0 1) sc1D))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= sc1C 1))
(assert (<= sc1D 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (<= (str.len var2C) 1))
(assert (<= (str.len var2D) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= (str.++ preC (str.++ stem2 sufC)) (str.++ unch12C (str.++ ch2C unch22C))))
(assert (= (str.++ preD (str.++ stem2 sufD)) (str.++ unch12D (str.++ ch2D unch22D))))
(assert (= "mijaO" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "mijaOin" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= "mijaOKar" (str.++ unch12C (str.++ var2C unch22C))))
(assert (= "mijaOuO" (str.++ unch12D (str.++ var2D unch22D))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (= (ite (= ch2C var2C) 0 1) sc2C))
(assert (= (ite (= ch2D var2D) 0 1) sc2D))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= sc2C 1))
(assert (<= sc2D 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (<= (str.len var3C) 1))
(assert (<= (str.len var3D) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= (str.++ preC (str.++ stem3 sufC)) (str.++ unch13C (str.++ ch3C unch23C))))
(assert (= (str.++ preD (str.++ stem3 sufD)) (str.++ unch13D (str.++ ch3D unch23D))))
(assert (= "jupur" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "jupurin" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= "jupurKar" (str.++ unch13C (str.++ var3C unch23C))))
(assert (= "jupuruO" (str.++ unch13D (str.++ var3D unch23D))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (= (ite (= ch3C var3C) 0 1) sc3C))
(assert (= (ite (= ch3D var3D) 0 1) sc3D))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= sc3C 1))
(assert (<= sc3D 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (<= (str.len var4C) 1))
(assert (<= (str.len var4D) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= (str.++ preC (str.++ stem4 sufC)) (str.++ unch14C (str.++ ch4C unch24C))))
(assert (= (str.++ preD (str.++ stem4 sufD)) (str.++ unch14D (str.++ ch4D unch24D))))
(assert (= "taKur" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "taKurin" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= "taKurKar" (str.++ unch14C (str.++ var4C unch24C))))
(assert (= "taKuruO" (str.++ unch14D (str.++ var4D unch24D))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (= (ite (= ch4C var4C) 0 1) sc4C))
(assert (= (ite (= ch4D var4D) 0 1) sc4D))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= sc4C 1))
(assert (<= sc4D 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (<= (str.len var5C) 1))
(assert (<= (str.len var5D) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= (str.++ preC (str.++ stem5 sufC)) (str.++ unch15C (str.++ ch5C unch25C))))
(assert (= (str.++ preD (str.++ stem5 sufD)) (str.++ unch15D (str.++ ch5D unch25D))))
(assert (= "jaraman" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "jaramanin" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= "jaramanar" (str.++ unch15C (str.++ var5C unch25C))))
(assert (= "jaramankuO" (str.++ unch15D (str.++ var5D unch25D))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (= (ite (= ch5C var5C) 0 1) sc5C))
(assert (= (ite (= ch5D var5D) 0 1) sc5D))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= sc5C 1))
(assert (<= sc5D 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (<= (str.len var6C) 1))
(assert (<= (str.len var6D) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= (str.++ preC (str.++ stem6 sufC)) (str.++ unch16C (str.++ ch6C unch26C))))
(assert (= (str.++ preD (str.++ stem6 sufD)) (str.++ unch16D (str.++ ch6D unch26D))))
(assert (= "maaX" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "maaXin" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= "maaXar" (str.++ unch16C (str.++ var6C unch26C))))
(assert (= "maaXkuO" (str.++ unch16D (str.++ var6D unch26D))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (= (ite (= ch6C var6C) 0 1) sc6C))
(assert (= (ite (= ch6D var6D) 0 1) sc6D))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= sc6C 1))
(assert (<= sc6D 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (<= (str.len var7C) 1))
(assert (<= (str.len var7D) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= (str.++ preC (str.++ stem7 sufC)) (str.++ unch17C (str.++ ch7C unch27C))))
(assert (= (str.++ preD (str.++ stem7 sufD)) (str.++ unch17D (str.++ ch7D unch27D))))
(assert (= "pirKen" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "pirKenin" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= "pirKenar" (str.++ unch17C (str.++ var7C unch27C))))
(assert (= "pirKenkuO" (str.++ unch17D (str.++ var7D unch27D))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (= (ite (= ch7C var7C) 0 1) sc7C))
(assert (= (ite (= ch7D var7D) 0 1) sc7D))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= sc7C 1))
(assert (<= sc7D 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (<= (str.len var8C) 1))
(assert (<= (str.len var8D) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= (str.++ preC (str.++ stem8 sufC)) (str.++ unch18C (str.++ ch8C unch28C))))
(assert (= (str.++ preD (str.++ stem8 sufD)) (str.++ unch18D (str.++ ch8D unch28D))))
(assert (= "mela" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "melan" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= "melaKar" (str.++ unch18C (str.++ var8C unch28C))))
(assert (= "melaO" (str.++ unch18D (str.++ var8D unch28D))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (= (ite (= ch8C var8C) 0 1) sc8C))
(assert (= (ite (= ch8D var8D) 0 1) sc8D))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= sc8C 1))
(assert (<= sc8D 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (<= (str.len var9C) 1))
(assert (<= (str.len var9D) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= (str.++ preC (str.++ stem9 sufC)) (str.++ unch19C (str.++ ch9C unch29C))))
(assert (= (str.++ preD (str.++ stem9 sufD)) (str.++ unch19D (str.++ ch9D unch29D))))
(assert (= "tawa" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "tawan" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= "tawaKar" (str.++ unch19C (str.++ var9C unch29C))))
(assert (= "tawaO" (str.++ unch19D (str.++ var9D unch29D))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (= (ite (= ch9C var9C) 0 1) sc9C))
(assert (= (ite (= ch9D var9D) 0 1) sc9D))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= sc9C 1))
(assert (<= sc9D 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (<= (str.len var10C) 1))
(assert (<= (str.len var10D) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= (str.++ preC (str.++ stem10 sufC)) (str.++ unch110C (str.++ ch10C unch210C))))
(assert (= (str.++ preD (str.++ stem10 sufD)) (str.++ unch110D (str.++ ch10D unch210D))))
(assert (= "wanka" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "wankan" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= "wankaKar" (str.++ unch110C (str.++ var10C unch210C))))
(assert (= "wankaO" (str.++ unch110D (str.++ var10D unch210D))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (= (ite (= ch10C var10C) 0 1) sc10C))
(assert (= (ite (= ch10D var10D) 0 1) sc10D))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= sc10C 1))
(assert (<= sc10D 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (<= (str.len var11C) 1))
(assert (<= (str.len var11D) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= (str.++ preC (str.++ stem11 sufC)) (str.++ unch111C (str.++ ch11C unch211C))))
(assert (= (str.++ preD (str.++ stem11 sufD)) (str.++ unch111D (str.++ ch11D unch211D))))
(assert (= "kuKka" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "kuKkan" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= "kuKkaKar" (str.++ unch111C (str.++ var11C unch211C))))
(assert (= "kuKkaO" (str.++ unch111D (str.++ var11D unch211D))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (= (ite (= ch11C var11C) 0 1) sc11C))
(assert (= (ite (= ch11D var11D) 0 1) sc11D))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= sc11C 1))
(assert (<= sc11D 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (<= (str.len var12C) 1))
(assert (<= (str.len var12D) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= (str.++ preC (str.++ stem12 sufC)) (str.++ unch112C (str.++ ch12C unch212C))))
(assert (= (str.++ preD (str.++ stem12 sufD)) (str.++ unch112D (str.++ ch12D unch212D))))
(assert (= "tarKka" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "tarKkan" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= "tarKkaKar" (str.++ unch112C (str.++ var12C unch212C))))
(assert (= "tarKkaO" (str.++ unch112D (str.++ var12D unch212D))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (= (ite (= ch12C var12C) 0 1) sc12C))
(assert (= (ite (= ch12D var12D) 0 1) sc12D))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= sc12C 1))
(assert (<= sc12D 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (<= (str.len var13C) 1))
(assert (<= (str.len var13D) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= (str.++ preC (str.++ stem13 sufC)) (str.++ unch113C (str.++ ch13C unch213C))))
(assert (= (str.++ preD (str.++ stem13 sufD)) (str.++ unch113D (str.++ ch13D unch213D))))
(assert (= "Kuka" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "Kukun" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= "KukuKar" (str.++ unch113C (str.++ var13C unch213C))))
(assert (= "KukuO" (str.++ unch113D (str.++ var13D unch213D))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (= (ite (= ch13C var13C) 0 1) sc13C))
(assert (= (ite (= ch13D var13D) 0 1) sc13D))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= sc13C 1))
(assert (<= sc13D 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (<= (str.len var14C) 1))
(assert (<= (str.len var14D) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= (str.++ preC (str.++ stem14 sufC)) (str.++ unch114C (str.++ ch14C unch214C))))
(assert (= (str.++ preD (str.++ stem14 sufD)) (str.++ unch114D (str.++ ch14D unch214D))))
(assert (= "KuOa" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "KuOun" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= "KuOuKar" (str.++ unch114C (str.++ var14C unch214C))))
(assert (= "KuOuO" (str.++ unch114D (str.++ var14D unch214D))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (= (ite (= ch14C var14C) 0 1) sc14C))
(assert (= (ite (= ch14D var14D) 0 1) sc14D))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= sc14C 1))
(assert (<= sc14D 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (<= (str.len var15C) 1))
(assert (<= (str.len var15D) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= (str.++ preC (str.++ stem15 sufC)) (str.++ unch115C (str.++ ch15C unch215C))))
(assert (= (str.++ preD (str.++ stem15 sufD)) (str.++ unch115D (str.++ ch15D unch215D))))
(assert (= "kaZa" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "kaZun" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= "kaZuKar" (str.++ unch115C (str.++ var15C unch215C))))
(assert (= "kaZuO" (str.++ unch115D (str.++ var15D unch215D))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (= (ite (= ch15C var15C) 0 1) sc15C))
(assert (= (ite (= ch15D var15D) 0 1) sc15D))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= sc15C 1))
(assert (<= sc15D 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (<= (str.len var16C) 1))
(assert (<= (str.len var16D) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= (str.++ preC (str.++ stem16 sufC)) (str.++ unch116C (str.++ ch16C unch216C))))
(assert (= (str.++ preD (str.++ stem16 sufD)) (str.++ unch116D (str.++ ch16D unch216D))))
(assert (= "muXa" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "muXun" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= "muXuKar" (str.++ unch116C (str.++ var16C unch216C))))
(assert (= "muXuO" (str.++ unch116D (str.++ var16D unch216D))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (= (ite (= ch16C var16C) 0 1) sc16C))
(assert (= (ite (= ch16D var16D) 0 1) sc16D))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= sc16C 1))
(assert (<= sc16D 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (<= (str.len var17C) 1))
(assert (<= (str.len var17D) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= (str.++ preC (str.++ stem17 sufC)) (str.++ unch117C (str.++ ch17C unch217C))))
(assert (= (str.++ preD (str.++ stem17 sufD)) (str.++ unch117D (str.++ ch17D unch217D))))
(assert (= "Kawa" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "Kawun" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= "KawuKar" (str.++ unch117C (str.++ var17C unch217C))))
(assert (= "KawuO" (str.++ unch117D (str.++ var17D unch217D))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (= (ite (= ch17C var17C) 0 1) sc17C))
(assert (= (ite (= ch17D var17D) 0 1) sc17D))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= sc17C 1))
(assert (<= sc17D 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (<= (str.len var18C) 1))
(assert (<= (str.len var18D) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= (str.++ preC (str.++ stem18 sufC)) (str.++ unch118C (str.++ ch18C unch218C))))
(assert (= (str.++ preD (str.++ stem18 sufD)) (str.++ unch118D (str.++ ch18D unch218D))))
(assert (= "keXZe" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "keXZin" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= "keXZiKar" (str.++ unch118C (str.++ var18C unch218C))))
(assert (= "keXZiwuO" (str.++ unch118D (str.++ var18D unch218D))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (= (ite (= ch18C var18C) 0 1) sc18C))
(assert (= (ite (= ch18D var18D) 0 1) sc18D))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= sc18C 1))
(assert (<= sc18D 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (<= (str.len var19C) 1))
(assert (<= (str.len var19D) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= (str.++ preC (str.++ stem19 sufC)) (str.++ unch119C (str.++ ch19C unch219C))))
(assert (= (str.++ preD (str.++ stem19 sufD)) (str.++ unch119D (str.++ ch19D unch219D))))
(assert (= "tjimpe" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "tjimpin" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= "tjimpiKar" (str.++ unch119C (str.++ var19C unch219C))))
(assert (= "tjimpiwuO" (str.++ unch119D (str.++ var19D unch219D))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (= (ite (= ch19C var19C) 0 1) sc19C))
(assert (= (ite (= ch19D var19D) 0 1) sc19D))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= sc19C 1))
(assert (<= sc19D 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (<= (str.len var20C) 1))
(assert (<= (str.len var20D) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= (str.++ preC (str.++ stem20 sufC)) (str.++ unch120C (str.++ ch20C unch220C))))
(assert (= (str.++ preD (str.++ stem20 sufD)) (str.++ unch120D (str.++ ch20D unch220D))))
(assert (= "KiXe" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "KiXin" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= "KiXiKar" (str.++ unch120C (str.++ var20C unch220C))))
(assert (= "KiXiwuO" (str.++ unch120D (str.++ var20D unch220D))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (= (ite (= ch20C var20C) 0 1) sc20C))
(assert (= (ite (= ch20D var20D) 0 1) sc20D))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= sc20C 1))
(assert (<= sc20D 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (<= (str.len var21C) 1))
(assert (<= (str.len var21D) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= (str.++ preC (str.++ stem21 sufC)) (str.++ unch121C (str.++ ch21C unch221C))))
(assert (= (str.++ preD (str.++ stem21 sufD)) (str.++ unch121D (str.++ ch21D unch221D))))
(assert (= "pape" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "papin" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= "papiKar" (str.++ unch121C (str.++ var21C unch221C))))
(assert (= "papiwuO" (str.++ unch121D (str.++ var21D unch221D))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (= (ite (= ch21C var21C) 0 1) sc21C))
(assert (= (ite (= ch21D var21D) 0 1) sc21D))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= sc21C 1))
(assert (<= sc21D 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (<= (str.len var22C) 1))
(assert (<= (str.len var22D) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= (str.++ preC (str.++ stem22 sufC)) (str.++ unch122C (str.++ ch22C unch222C))))
(assert (= (str.++ preD (str.++ stem22 sufD)) (str.++ unch122D (str.++ ch22D unch222D))))
(assert (= "tjempe" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "tjempen" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= "tjempeKar" (str.++ unch122C (str.++ var22C unch222C))))
(assert (= "tjempeO" (str.++ unch122D (str.++ var22D unch222D))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (= (ite (= ch22C var22C) 0 1) sc22C))
(assert (= (ite (= ch22D var22D) 0 1) sc22D))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= sc22C 1))
(assert (<= sc22D 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (<= (str.len var23C) 1))
(assert (<= (str.len var23D) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= (str.++ preC (str.++ stem23 sufC)) (str.++ unch123C (str.++ ch23C unch223C))))
(assert (= (str.++ preD (str.++ stem23 sufD)) (str.++ unch123D (str.++ ch23D unch223D))))
(assert (= "wiZe" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "wiZen" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= "wiZeKar" (str.++ unch123C (str.++ var23C unch223C))))
(assert (= "wiZeO" (str.++ unch123D (str.++ var23D unch223D))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (= (ite (= ch23C var23C) 0 1) sc23C))
(assert (= (ite (= ch23D var23D) 0 1) sc23D))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= sc23C 1))
(assert (<= sc23D 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (<= (str.len var24C) 1))
(assert (<= (str.len var24D) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= (str.++ preC (str.++ stem24 sufC)) (str.++ unch124C (str.++ ch24C unch224C))))
(assert (= (str.++ preD (str.++ stem24 sufD)) (str.++ unch124D (str.++ ch24D unch224D))))
(assert (= "waKal" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "waKalkin" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= "waKalkar" (str.++ unch124C (str.++ var24C unch224C))))
(assert (= "waKalkuO" (str.++ unch124D (str.++ var24D unch224D))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (= (ite (= ch24C var24C) 0 1) sc24C))
(assert (= (ite (= ch24D var24D) 0 1) sc24D))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= sc24C 1))
(assert (<= sc24D 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (<= (str.len var25C) 1))
(assert (<= (str.len var25D) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= (str.++ preC (str.++ stem25 sufC)) (str.++ unch125C (str.++ ch25C unch225C))))
(assert (= (str.++ preD (str.++ stem25 sufD)) (str.++ unch125D (str.++ ch25D unch225D))))
(assert (= "menjel" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "menjelkin" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= "menjelkar" (str.++ unch125C (str.++ var25C unch225C))))
(assert (= "menjelkuO" (str.++ unch125D (str.++ var25D unch225D))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (= (ite (= ch25C var25C) 0 1) sc25C))
(assert (= (ite (= ch25D var25D) 0 1) sc25D))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= sc25C 1))
(assert (<= sc25D 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (<= (str.len var26C) 1))
(assert (<= (str.len var26D) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= (str.++ preC (str.++ stem26 sufC)) (str.++ unch126C (str.++ ch26C unch226C))))
(assert (= (str.++ preD (str.++ stem26 sufD)) (str.++ unch126D (str.++ ch26D unch226D))))
(assert (= "makar" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "makarkin" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= "makarkar" (str.++ unch126C (str.++ var26C unch226C))))
(assert (= "makarkuO" (str.++ unch126D (str.++ var26D unch226D))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (= (ite (= ch26C var26C) 0 1) sc26C))
(assert (= (ite (= ch26D var26D) 0 1) sc26D))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= sc26C 1))
(assert (<= sc26D 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (<= (str.len var27C) 1))
(assert (<= (str.len var27D) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= (str.++ preC (str.++ stem27 sufC)) (str.++ unch127C (str.++ ch27C unch227C))))
(assert (= (str.++ preD (str.++ stem27 sufD)) (str.++ unch127D (str.++ ch27D unch227D))))
(assert (= "jalul" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "jalulun" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= "jaluluKar" (str.++ unch127C (str.++ var27C unch227C))))
(assert (= "jaluluO" (str.++ unch127D (str.++ var27D unch227D))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (= (ite (= ch27C var27C) 0 1) sc27C))
(assert (= (ite (= ch27D var27D) 0 1) sc27D))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= sc27C 1))
(assert (<= sc27D 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (<= (str.len var28C) 1))
(assert (<= (str.len var28D) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= (str.++ preC (str.++ stem28 sufC)) (str.++ unch128C (str.++ ch28C unch228C))))
(assert (= (str.++ preD (str.++ stem28 sufD)) (str.++ unch128D (str.++ ch28D unch228D))))
(assert (= "majar" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "majaran" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= "majaraKar" (str.++ unch128C (str.++ var28C unch228C))))
(assert (= "majaraO" (str.++ unch128D (str.++ var28D unch228D))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (= (ite (= ch28C var28C) 0 1) sc28C))
(assert (= (ite (= ch28D var28D) 0 1) sc28D))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= sc28C 1))
(assert (<= sc28D 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (<= (str.len var29C) 1))
(assert (<= (str.len var29D) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= (str.++ preC (str.++ stem29 sufC)) (str.++ unch129C (str.++ ch29C unch229C))))
(assert (= (str.++ preD (str.++ stem29 sufD)) (str.++ unch129D (str.++ ch29D unch229D))))
(assert (= "talkur" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "talkuran" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= "talkuraKar" (str.++ unch129C (str.++ var29C unch229C))))
(assert (= "talkuraO" (str.++ unch129D (str.++ var29D unch229D))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (= (ite (= ch29C var29C) 0 1) sc29C))
(assert (= (ite (= ch29D var29D) 0 1) sc29D))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= sc29C 1))
(assert (<= sc29D 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (<= (str.len var30C) 1))
(assert (<= (str.len var30D) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= (str.++ preC (str.++ stem30 sufC)) (str.++ unch130C (str.++ ch30C unch230C))))
(assert (= (str.++ preD (str.++ stem30 sufD)) (str.++ unch130D (str.++ ch30D unch230D))))
(assert (= "wiwal" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "wiwalan" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= "wiwalaKar" (str.++ unch130C (str.++ var30C unch230C))))
(assert (= "wiwalaO" (str.++ unch130D (str.++ var30D unch230D))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (= (ite (= ch30C var30C) 0 1) sc30C))
(assert (= (ite (= ch30D var30D) 0 1) sc30D))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= sc30C 1))
(assert (<= sc30D 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (<= (str.len var31C) 1))
(assert (<= (str.len var31D) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= (str.++ preC (str.++ stem31 sufC)) (str.++ unch131C (str.++ ch31C unch231C))))
(assert (= (str.++ preD (str.++ stem31 sufD)) (str.++ unch131D (str.++ ch31D unch231D))))
(assert (= "karikar" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "karikarin" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= "karikariKar" (str.++ unch131C (str.++ var31C unch231C))))
(assert (= "karikariwuO" (str.++ unch131D (str.++ var31D unch231D))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (= (ite (= ch31C var31C) 0 1) sc31C))
(assert (= (ite (= ch31D var31D) 0 1) sc31D))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= sc31C 1))
(assert (<= sc31D 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (<= (str.len var32C) 1))
(assert (<= (str.len var32D) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= (str.++ preC (str.++ stem32 sufC)) (str.++ unch132C (str.++ ch32C unch232C))))
(assert (= (str.++ preD (str.++ stem32 sufD)) (str.++ unch132D (str.++ ch32D unch232D))))
(assert (= "jilijil" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "jilijilin" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= "jilijiliKar" (str.++ unch132C (str.++ var32C unch232C))))
(assert (= "jilijiliwuO" (str.++ unch132D (str.++ var32D unch232D))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (= (ite (= ch32C var32C) 0 1) sc32C))
(assert (= (ite (= ch32D var32D) 0 1) sc32D))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= sc32C 1))
(assert (<= sc32D 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (<= (str.len var33C) 1))
(assert (<= (str.len var33D) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= (str.++ preC (str.++ stem33 sufC)) (str.++ unch133C (str.++ ch33C unch233C))))
(assert (= (str.++ preD (str.++ stem33 sufD)) (str.++ unch133D (str.++ ch33D unch233D))))
(assert (= "jukar" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "jukarpan" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= "jukarpaKar" (str.++ unch133C (str.++ var33C unch233C))))
(assert (= "jukarpaO" (str.++ unch133D (str.++ var33D unch233D))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (= (ite (= ch33C var33C) 0 1) sc33C))
(assert (= (ite (= ch33D var33D) 0 1) sc33D))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= sc33C 1))
(assert (<= sc33D 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (<= (str.len var34C) 1))
(assert (<= (str.len var34D) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= (str.++ preC (str.++ stem34 sufC)) (str.++ unch134C (str.++ ch34C unch234C))))
(assert (= (str.++ preD (str.++ stem34 sufD)) (str.++ unch134D (str.++ ch34D unch234D))))
(assert (= "pulKar" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "pulKarpan" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= "pulKarpaKar" (str.++ unch134C (str.++ var34C unch234C))))
(assert (= "pulKarpaO" (str.++ unch134D (str.++ var34D unch234D))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (= (ite (= ch34C var34C) 0 1) sc34C))
(assert (= (ite (= ch34D var34D) 0 1) sc34D))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= sc34C 1))
(assert (<= sc34D 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (<= (str.len var35C) 1))
(assert (<= (str.len var35D) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= (str.++ preC (str.++ stem35 sufC)) (str.++ unch135C (str.++ ch35C unch235C))))
(assert (= (str.++ preD (str.++ stem35 sufD)) (str.++ unch135D (str.++ ch35D unch235D))))
(assert (= "wulun" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "wulunkan" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= "wulunkaKar" (str.++ unch135C (str.++ var35C unch235C))))
(assert (= "wulunkaO" (str.++ unch135D (str.++ var35D unch235D))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (= (ite (= ch35C var35C) 0 1) sc35C))
(assert (= (ite (= ch35D var35D) 0 1) sc35D))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= sc35C 1))
(assert (<= sc35D 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (<= (str.len var36C) 1))
(assert (<= (str.len var36D) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= (str.++ preC (str.++ stem36 sufC)) (str.++ unch136C (str.++ ch36C unch236C))))
(assert (= (str.++ preD (str.++ stem36 sufD)) (str.++ unch136D (str.++ ch36D unch236D))))
(assert (= "wuZal" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "wuZaltjin" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= "wuZaltjiKar" (str.++ unch136C (str.++ var36C unch236C))))
(assert (= "wuZaltjiwur" (str.++ unch136D (str.++ var36D unch236D))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (= (ite (= ch36C var36C) 0 1) sc36C))
(assert (= (ite (= ch36D var36D) 0 1) sc36D))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= sc36C 1))
(assert (<= sc36D 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (<= (str.len var37C) 1))
(assert (<= (str.len var37D) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= (str.++ preC (str.++ stem37 sufC)) (str.++ unch137C (str.++ ch37C unch237C))))
(assert (= (str.++ preD (str.++ stem37 sufD)) (str.++ unch137D (str.++ ch37D unch237D))))
(assert (= "kantukan" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "kantukantun" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= "kantukantuKar" (str.++ unch137C (str.++ var37C unch237C))))
(assert (= "kantukantuO" (str.++ unch137D (str.++ var37D unch237D))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (= (ite (= ch37C var37C) 0 1) sc37C))
(assert (= (ite (= ch37D var37D) 0 1) sc37D))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= sc37C 1))
(assert (<= sc37D 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (<= (str.len var38C) 1))
(assert (<= (str.len var38D) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= (str.++ preC (str.++ stem38 sufC)) (str.++ unch138C (str.++ ch38C unch238C))))
(assert (= (str.++ preD (str.++ stem38 sufD)) (str.++ unch138D (str.++ ch38D unch238D))))
(assert (= "karwakar" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "karwakarwan" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= "karwakarwaKar" (str.++ unch138C (str.++ var38C unch238C))))
(assert (= "karwakarwaO" (str.++ unch138D (str.++ var38D unch238D))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (= (ite (= ch38C var38C) 0 1) sc38C))
(assert (= (ite (= ch38D var38D) 0 1) sc38D))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= sc38C 1))
(assert (<= sc38D 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (<= (str.len var39C) 1))
(assert (<= (str.len var39D) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= (str.++ preC (str.++ stem39 sufC)) (str.++ unch139C (str.++ ch39C unch239C))))
(assert (= (str.++ preD (str.++ stem39 sufD)) (str.++ unch139D (str.++ ch39D unch239D))))
(assert (= "turara" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "turaraKin" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= "turaraKar" (str.++ unch139C (str.++ var39C unch239C))))
(assert (= "turaraKkuO" (str.++ unch139D (str.++ var39D unch239D))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (= (ite (= ch39C var39C) 0 1) sc39C))
(assert (= (ite (= ch39D var39D) 0 1) sc39D))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= sc39C 1))
(assert (<= sc39D 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (<= (str.len var40C) 1))
(assert (<= (str.len var40D) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= (str.++ preC (str.++ stem40 sufC)) (str.++ unch140C (str.++ ch40C unch240C))))
(assert (= (str.++ preD (str.++ stem40 sufD)) (str.++ unch140D (str.++ ch40D unch240D))))
(assert (= "Kalu" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "Kalukin" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= "Kalukar" (str.++ unch140C (str.++ var40C unch240C))))
(assert (= "KalukuO" (str.++ unch140D (str.++ var40D unch240D))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (= (ite (= ch40C var40C) 0 1) sc40C))
(assert (= (ite (= ch40D var40D) 0 1) sc40D))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= sc40C 1))
(assert (<= sc40D 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (<= (str.len var41C) 1))
(assert (<= (str.len var41D) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= (str.++ preC (str.++ stem41 sufC)) (str.++ unch141C (str.++ ch41C unch241C))))
(assert (= (str.++ preD (str.++ stem41 sufD)) (str.++ unch141D (str.++ ch41D unch241D))))
(assert (= "kurka" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "kurkaKin" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= "kurkaKar" (str.++ unch141C (str.++ var41C unch241C))))
(assert (= "kurkaKkuO" (str.++ unch141D (str.++ var41D unch241D))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (= (ite (= ch41C var41C) 0 1) sc41C))
(assert (= (ite (= ch41D var41D) 0 1) sc41D))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= sc41C 1))
(assert (<= sc41D 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (<= (str.len var42C) 1))
(assert (<= (str.len var42D) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= (str.++ preC (str.++ stem42 sufC)) (str.++ unch142C (str.++ ch42C unch242C))))
(assert (= (str.++ preD (str.++ stem42 sufD)) (str.++ unch142D (str.++ ch42D unch242D))))
(assert (= "taKku" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKkuKin" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= "taKkuKar" (str.++ unch142C (str.++ var42C unch242C))))
(assert (= "taKkuKkuO" (str.++ unch142D (str.++ var42D unch242D))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (= (ite (= ch42C var42C) 0 1) sc42C))
(assert (= (ite (= ch42D var42D) 0 1) sc42D))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= sc42C 1))
(assert (<= sc42D 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (<= (str.len var43C) 1))
(assert (<= (str.len var43D) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= (str.++ preC (str.++ stem43 sufC)) (str.++ unch143C (str.++ ch43C unch243C))))
(assert (= (str.++ preD (str.++ stem43 sufD)) (str.++ unch143D (str.++ ch43D unch243D))))
(assert (= "kurpuOu" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "kurpuOuKin" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= "kurpuOuKar" (str.++ unch143C (str.++ var43C unch243C))))
(assert (= "kurpuOuKkuO" (str.++ unch143D (str.++ var43D unch243D))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (= (ite (= ch43C var43C) 0 1) sc43C))
(assert (= (ite (= ch43D var43D) 0 1) sc43D))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= sc43C 1))
(assert (<= sc43D 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (<= (str.len var44C) 1))
(assert (<= (str.len var44D) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= (str.++ preC (str.++ stem44 sufC)) (str.++ unch144C (str.++ ch44C unch244C))))
(assert (= (str.++ preD (str.++ stem44 sufD)) (str.++ unch144D (str.++ ch44D unch244D))))
(assert (= "putu" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "putukan" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= "putukaKar" (str.++ unch144C (str.++ var44C unch244C))))
(assert (= "putukaO" (str.++ unch144D (str.++ var44D unch244D))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (= (ite (= ch44C var44C) 0 1) sc44C))
(assert (= (ite (= ch44D var44D) 0 1) sc44D))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= sc44C 1))
(assert (<= sc44D 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (<= (str.len var45C) 1))
(assert (<= (str.len var45D) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= (str.++ preC (str.++ stem45 sufC)) (str.++ unch145C (str.++ ch45C unch245C))))
(assert (= (str.++ preD (str.++ stem45 sufD)) (str.++ unch145D (str.++ ch45D unch245D))))
(assert (= "maali" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "maalijan" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= "maalijaKar" (str.++ unch145C (str.++ var45C unch245C))))
(assert (= "maalijaO" (str.++ unch145D (str.++ var45D unch245D))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (= (ite (= ch45C var45C) 0 1) sc45C))
(assert (= (ite (= ch45D var45D) 0 1) sc45D))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= sc45C 1))
(assert (<= sc45D 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (<= (str.len var46C) 1))
(assert (<= (str.len var46D) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= (str.++ preC (str.++ stem46 sufC)) (str.++ unch146C (str.++ ch46C unch246C))))
(assert (= (str.++ preD (str.++ stem46 sufD)) (str.++ unch146D (str.++ ch46D unch246D))))
(assert (= "tjiXtirpu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tjiXtirpuwan" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= "tjiXtirpuwaKar" (str.++ unch146C (str.++ var46C unch246C))))
(assert (= "tjiXtirpuwaO" (str.++ unch146D (str.++ var46D unch246D))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (= (ite (= ch46C var46C) 0 1) sc46C))
(assert (= (ite (= ch46D var46D) 0 1) sc46D))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= sc46C 1))
(assert (<= sc46D 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (<= (str.len var47C) 1))
(assert (<= (str.len var47D) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= (str.++ preC (str.++ stem47 sufC)) (str.++ unch147C (str.++ ch47C unch247C))))
(assert (= (str.++ preD (str.++ stem47 sufD)) (str.++ unch147D (str.++ ch47D unch247D))))
(assert (= "pukatji" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "pukatjijan" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= "pukatjijaKar" (str.++ unch147C (str.++ var47C unch247C))))
(assert (= "pukatjijaO" (str.++ unch147D (str.++ var47D unch247D))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (= (ite (= ch47C var47C) 0 1) sc47C))
(assert (= (ite (= ch47D var47D) 0 1) sc47D))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= sc47C 1))
(assert (<= sc47D 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (<= (str.len var48C) 1))
(assert (<= (str.len var48D) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= (str.++ preC (str.++ stem48 sufC)) (str.++ unch148C (str.++ ch48C unch248C))))
(assert (= (str.++ preD (str.++ stem48 sufD)) (str.++ unch148D (str.++ ch48D unch248D))))
(assert (= "murkuni" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "murkuniman" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= "murkunimaKar" (str.++ unch148C (str.++ var48C unch248C))))
(assert (= "murkunimaO" (str.++ unch148D (str.++ var48D unch248D))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (= (ite (= ch48C var48C) 0 1) sc48C))
(assert (= (ite (= ch48D var48D) 0 1) sc48D))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= sc48C 1))
(assert (<= sc48D 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (<= (str.len var49C) 1))
(assert (<= (str.len var49D) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= (str.++ preC (str.++ stem49 sufC)) (str.++ unch149C (str.++ ch49C unch249C))))
(assert (= (str.++ preD (str.++ stem49 sufD)) (str.++ unch149D (str.++ ch49D unch249D))))
(assert (= "KawuKa" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "KawuKawun" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= "KawuKawuKar" (str.++ unch149C (str.++ var49C unch249C))))
(assert (= "KawuKawuO" (str.++ unch149D (str.++ var49D unch249D))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (= (ite (= ch49C var49C) 0 1) sc49C))
(assert (= (ite (= ch49D var49D) 0 1) sc49D))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= sc49C 1))
(assert (<= sc49D 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (<= (str.len var50C) 1))
(assert (<= (str.len var50D) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= (str.++ preC (str.++ stem50 sufC)) (str.++ unch150C (str.++ ch50C unch250C))))
(assert (= (str.++ preD (str.++ stem50 sufD)) (str.++ unch150D (str.++ ch50D unch250D))))
(assert (= "tipiti" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "tipitipin" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= "tipitipiKar" (str.++ unch150C (str.++ var50C unch250C))))
(assert (= "tipitipiwuO" (str.++ unch150D (str.++ var50D unch250D))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (= (ite (= ch50C var50C) 0 1) sc50C))
(assert (= (ite (= ch50D var50D) 0 1) sc50D))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= sc50C 1))
(assert (<= sc50D 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (<= (str.len var51C) 1))
(assert (<= (str.len var51D) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= (str.++ preC (str.++ stem51 sufC)) (str.++ unch151C (str.++ ch51C unch251C))))
(assert (= (str.++ preD (str.++ stem51 sufD)) (str.++ unch151D (str.++ ch51D unch251D))))
(assert (= "tapu" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "taputjin" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= "taputjiKar" (str.++ unch151C (str.++ var51C unch251C))))
(assert (= "taputjiwuO" (str.++ unch151D (str.++ var51D unch251D))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (= (ite (= ch51C var51C) 0 1) sc51C))
(assert (= (ite (= ch51D var51D) 0 1) sc51D))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= sc51C 1))
(assert (<= sc51D 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (<= (str.len var52C) 1))
(assert (<= (str.len var52D) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= (str.++ preC (str.++ stem52 sufC)) (str.++ unch152C (str.++ ch52C unch252C))))
(assert (= (str.++ preD (str.++ stem52 sufD)) (str.++ unch152D (str.++ ch52D unch252D))))
(assert (= "muKkumu" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "muKkumuKkun" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= "muKkumuKkuKar" (str.++ unch152C (str.++ var52C unch252C))))
(assert (= "muKkumuKkuO" (str.++ unch152D (str.++ var52D unch252D))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (= (ite (= ch52C var52C) 0 1) sc52C))
(assert (= (ite (= ch52D var52D) 0 1) sc52D))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= sc52C 1))
(assert (<= sc52D 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (<= (str.len var53C) 1))
(assert (<= (str.len var53D) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= (str.++ preC (str.++ stem53 sufC)) (str.++ unch153C (str.++ ch53C unch253C))))
(assert (= (str.++ preD (str.++ stem53 sufD)) (str.++ unch153D (str.++ ch53D unch253D))))
(assert (= "tjumputju" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "tjumputjumpun" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= "tjumputjumpuKar" (str.++ unch153C (str.++ var53C unch253C))))
(assert (= "tjumputjumpuO" (str.++ unch153D (str.++ var53D unch253D))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (= (ite (= ch53C var53C) 0 1) sc53C))
(assert (= (ite (= ch53D var53D) 0 1) sc53D))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= sc53C 1))
(assert (<= sc53D 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      sc0C
      sc0D
      0
      sc1A
      sc1B
      sc1C
      sc1D
      0
      sc2A
      sc2B
      sc2C
      sc2D
      0
      sc3A
      sc3B
      sc3C
      sc3D
      0
      sc4A
      sc4B
      sc4C
      sc4D
      0
      sc5A
      sc5B
      sc5C
      sc5D
      0
      sc6A
      sc6B
      sc6C
      sc6D
      0
      sc7A
      sc7B
      sc7C
      sc7D
      0
      sc8A
      sc8B
      sc8C
      sc8D
      0
      sc9A
      sc9B
      sc9C
      sc9D
      0
      sc10A
      sc10B
      sc10C
      sc10D
      0
      sc11A
      sc11B
      sc11C
      sc11D
      0
      sc12A
      sc12B
      sc12C
      sc12D
      0
      sc13A
      sc13B
      sc13C
      sc13D
      0
      sc14A
      sc14B
      sc14C
      sc14D
      0
      sc15A
      sc15B
      sc15C
      sc15D
      0
      sc16A
      sc16B
      sc16C
      sc16D
      0
      sc17A
      sc17B
      sc17C
      sc17D
      0
      sc18A
      sc18B
      sc18C
      sc18D
      0
      sc19A
      sc19B
      sc19C
      sc19D
      0
      sc20A
      sc20B
      sc20C
      sc20D
      0
      sc21A
      sc21B
      sc21C
      sc21D
      0
      sc22A
      sc22B
      sc22C
      sc22D
      0
      sc23A
      sc23B
      sc23C
      sc23D
      0
      sc24A
      sc24B
      sc24C
      sc24D
      0
      sc25A
      sc25B
      sc25C
      sc25D
      0
      sc26A
      sc26B
      sc26C
      sc26D
      0
      sc27A
      sc27B
      sc27C
      sc27D
      0
      sc28A
      sc28B
      sc28C
      sc28D
      0
      sc29A
      sc29B
      sc29C
      sc29D
      0
      sc30A
      sc30B
      sc30C
      sc30D
      0
      sc31A
      sc31B
      sc31C
      sc31D
      0
      sc32A
      sc32B
      sc32C
      sc32D
      0
      sc33A
      sc33B
      sc33C
      sc33D
      0
      sc34A
      sc34B
      sc34C
      sc34D
      0
      sc35A
      sc35B
      sc35C
      sc35D
      0
      sc36A
      sc36B
      sc36C
      sc36D
      0
      sc37A
      sc37B
      sc37C
      sc37D
      0
      sc38A
      sc38B
      sc38C
      sc38D
      0
      sc39A
      sc39B
      sc39C
      sc39D
      0
      sc40A
      sc40B
      sc40C
      sc40D
      0
      sc41A
      sc41B
      sc41C
      sc41D
      0
      sc42A
      sc42B
      sc42C
      sc42D
      0
      sc43A
      sc43B
      sc43C
      sc43D
      0
      sc44A
      sc44B
      sc44C
      sc44D
      0
      sc45A
      sc45B
      sc45C
      sc45D
      0
      sc46A
      sc46B
      sc46C
      sc46D
      0
      sc47A
      sc47B
      sc47C
      sc47D
      0
      sc48A
      sc48B
      sc48C
      sc48D
      0
      sc49A
      sc49B
      sc49C
      sc49D
      0
      sc50A
      sc50B
      sc50C
      sc50D
      0
      sc51A
      sc51B
      sc51C
      sc51D
      0
      sc52A
      sc52B
      sc52C
      sc52D
      0
      sc53A
      sc53B
      sc53C
      sc53D)
   19))
