[['olo', 'oloia'], ['lafo', 'lafoia'], ['aŋa', 'aŋaia'], ['usu', 'usuia'], ['tau', 'tauia'], ['taui', 'tauia'], ['saːʔili', 'saːʔilia'], ['vaŋai', 'vaŋaia'], ['paʔi', 'paʔia'], ['naumati', 'naumatia'], ['saːuni', 'saːunia'], ['seŋi', 'seŋia'], ['lele', 'lelea'], ['suʔe', 'suʔea'], ['taʔe', 'taʔea'], ['tafe', 'tafea'], ['taːupule', 'taːupulea'], ['palepale', 'palepalea'], ['tuː', 'tuːlia'], ['tau', 'taulia'], ['ʔalo', 'ʔalofia'], ['oso', 'osofia'], ['sao', 'saofia'], ['asu', 'asuŋia'], ['pole', 'poleŋia'], ['ifo', 'ifoŋia'], ['ula', 'ulaŋia'], ['milo', 'milosia'], ['valu', 'valusia'], ['vela', 'velasia'], ['api', 'apitia'], ['eʔe', 'eʔetia'], ['lavaː', 'lavaːtia'], ['uː', 'uːtia'], ['puni', 'punitia'], ['siʔo', 'siʔomia'], ['ŋalo', 'ŋalomia'], ['sopo', 'sopoʔia'], ['au', 'aulia'], ['maːtau', 'maːtaulia'], ['ili', 'ilifia'], ['ulu', 'ulufia'], ['taŋo', 'taŋofia'], ['soa', 'soaŋia'], ['fesili', 'fesiliŋia'], ['ʔote', 'ʔoteŋia'], ['tofu', 'tofuŋia'], ['laʔa', 'laʔasia'], ['taŋi', 'taŋisia'], ['motu', 'motusia'], ['mataʔu', 'mataʔutia'], ['sau', 'sautia'], ['oʔo', 'oʔotia'], ['ufi', 'ufitia'], ['tanu', 'tanumia'], ['moʔo', 'moʔomia'], ['tao', 'taomia'], ['fana', 'fanaʔia']]
olo  >  ['o', 'l', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
oloia  >  ['o', 'l', 'o', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
lafo  >  ['l', 'a', 'f', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
lafoia  >  ['l', 'a', 'f', 'o', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
aŋa  >  ['a', 'K', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
aŋaia  >  ['a', 'K', 'a', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
usu  >  ['u', 's', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
usuia  >  ['u', 's', 'u', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tau  >  ['t', 'a', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tauia  >  ['t', 'a', 'u', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
taui  >  ['t', 'a', 'u', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
tauia  >  ['t', 'a', 'u', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g'}
saːʔili  >  ['s', 'O', 'X', 'i', 'l', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
saːʔilia  >  ['s', 'O', 'X', 'i', 'l', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
vaŋai  >  ['v', 'a', 'K', 'a', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
vaŋaia  >  ['v', 'a', 'K', 'a', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
paʔi  >  ['p', 'a', 'X', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
paʔia  >  ['p', 'a', 'X', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
naumati  >  ['n', 'a', 'u', 'm', 'a', 't', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
naumatia  >  ['n', 'a', 'u', 'm', 'a', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
saːuni  >  ['s', 'O', 'u', 'n', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
saːunia  >  ['s', 'O', 'u', 'n', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
seŋi  >  ['s', 'e', 'K', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
seŋia  >  ['s', 'e', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
lele  >  ['l', 'e', 'l', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
lelea  >  ['l', 'e', 'l', 'e', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
suʔe  >  ['s', 'u', 'X', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
suʔea  >  ['s', 'u', 'X', 'e', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
taʔe  >  ['t', 'a', 'X', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
taʔea  >  ['t', 'a', 'X', 'e', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
tafe  >  ['t', 'a', 'f', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
tafea  >  ['t', 'a', 'f', 'e', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
taːupule  >  ['t', 'O', 'u', 'p', 'u', 'l', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
taːupulea  >  ['t', 'O', 'u', 'p', 'u', 'l', 'e', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
palepale  >  ['p', 'a', 'l', 'e', 'p', 'a', 'l', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
palepalea  >  ['p', 'a', 'l', 'e', 'p', 'a', 'l', 'e', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X'}
tuː  >  ['t', 'Z'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tuːlia  >  ['t', 'Z', 'l', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tau  >  ['t', 'a', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
taulia  >  ['t', 'a', 'u', 'l', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ʔalo  >  ['X', 'a', 'l', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ʔalofia  >  ['X', 'a', 'l', 'o', 'f', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
oso  >  ['o', 's', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
osofia  >  ['o', 's', 'o', 'f', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
sao  >  ['s', 'a', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
saofia  >  ['s', 'a', 'o', 'f', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
asu  >  ['a', 's', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
asuŋia  >  ['a', 's', 'u', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
pole  >  ['p', 'o', 'l', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
poleŋia  >  ['p', 'o', 'l', 'e', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ifo  >  ['i', 'f', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ifoŋia  >  ['i', 'f', 'o', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ula  >  ['u', 'l', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ulaŋia  >  ['u', 'l', 'a', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
milo  >  ['m', 'i', 'l', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
milosia  >  ['m', 'i', 'l', 'o', 's', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
valu  >  ['v', 'a', 'l', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
valusia  >  ['v', 'a', 'l', 'u', 's', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
vela  >  ['v', 'e', 'l', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
velasia  >  ['v', 'e', 'l', 'a', 's', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
api  >  ['a', 'p', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
apitia  >  ['a', 'p', 'i', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
eʔe  >  ['e', 'X', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
eʔetia  >  ['e', 'X', 'e', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
lavaː  >  ['l', 'a', 'v', 'O'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
lavaːtia  >  ['l', 'a', 'v', 'O', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
uː  >  ['Z'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
uːtia  >  ['Z', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
puni  >  ['p', 'u', 'n', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
punitia  >  ['p', 'u', 'n', 'i', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
siʔo  >  ['s', 'i', 'X', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
siʔomia  >  ['s', 'i', 'X', 'o', 'm', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ŋalo  >  ['K', 'a', 'l', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ŋalomia  >  ['K', 'a', 'l', 'o', 'm', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
sopo  >  ['s', 'o', 'p', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
sopoʔia  >  ['s', 'o', 'p', 'o', 'X', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
au  >  ['a', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
aulia  >  ['a', 'u', 'l', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
maːtau  >  ['m', 'O', 't', 'a', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
maːtaulia  >  ['m', 'O', 't', 'a', 'u', 'l', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ili  >  ['i', 'l', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ilifia  >  ['i', 'l', 'i', 'f', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ulu  >  ['u', 'l', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ulufia  >  ['u', 'l', 'u', 'f', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
taŋo  >  ['t', 'a', 'K', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
taŋofia  >  ['t', 'a', 'K', 'o', 'f', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
soa  >  ['s', 'o', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
soaŋia  >  ['s', 'o', 'a', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
fesili  >  ['f', 'e', 's', 'i', 'l', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
fesiliŋia  >  ['f', 'e', 's', 'i', 'l', 'i', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ʔote  >  ['X', 'o', 't', 'e'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ʔoteŋia  >  ['X', 'o', 't', 'e', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tofu  >  ['t', 'o', 'f', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tofuŋia  >  ['t', 'o', 'f', 'u', 'K', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
laʔa  >  ['l', 'a', 'X', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
laʔasia  >  ['l', 'a', 'X', 'a', 's', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
taŋi  >  ['t', 'a', 'K', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
taŋisia  >  ['t', 'a', 'K', 'i', 's', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
motu  >  ['m', 'o', 't', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
motusia  >  ['m', 'o', 't', 'u', 's', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
mataʔu  >  ['m', 'a', 't', 'a', 'X', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
mataʔutia  >  ['m', 'a', 't', 'a', 'X', 'u', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
sau  >  ['s', 'a', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
sautia  >  ['s', 'a', 'u', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
oʔo  >  ['o', 'X', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
oʔotia  >  ['o', 'X', 'o', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ufi  >  ['u', 'f', 'i'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
ufitia  >  ['u', 'f', 'i', 't', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tanu  >  ['t', 'a', 'n', 'u'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tanumia  >  ['t', 'a', 'n', 'u', 'm', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
moʔo  >  ['m', 'o', 'X', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
moʔomia  >  ['m', 'o', 'X', 'o', 'm', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
tao  >  ['t', 'a', 'o'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
taomia  >  ['t', 'a', 'o', 'm', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
fana  >  ['f', 'a', 'n', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
fanaʔia  >  ['f', 'a', 'n', 'a', 'X', 'i', 'a'] {'ø': 'A', 'ʃ': 'B', 'ɯ': 'C', 'ʤ': 'D', 'ʧ': 'E', 'ː': 'F', 'ɛ': 'G', 'ə': 'H', 'ɑ': 'I', 'œ': 'J', 'ŋ': 'K', 'ʋ': 'L', 'ʌ': 'M', 'ʊ': 'N', 'ʦ': 'P', 'æ': 'Q', 'ʣ': 'R', 'ʈ': 'S', 'ɖ': 'T', 'ʒ': 'U', 'ɱ': 'V', 'ɩ': 'W', 'ɲ': 'Y', 'ɡ': 'g', 'aː': 'O', 'ʔ': 'X', 'uː': 'Z'}
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   4))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   4))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   5))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   5))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   6))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   6))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   7))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   7))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   8))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   8))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   9))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   9))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   10))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   10))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   11))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   11))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   12))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   12))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   13))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   13))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   14))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   14))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   15))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   15))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   16))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   16))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   17))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   17))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   18))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   18))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   19))
(assert (= (+ 0
      sc0A
      sc1A
      sc2A
      sc3A
      sc4A
      sc5A
      sc6A
      sc7A
      sc8A
      sc9A
      sc10A
      sc11A
      sc12A
      sc13A
      sc14A
      sc15A
      sc16A
      sc17A
      sc18A
      sc19A
      sc20A
      sc21A
      sc22A
      sc23A
      sc24A
      sc25A
      sc26A
      sc27A
      sc28A
      sc29A
      sc30A
      sc31A
      sc32A
      sc33A
      sc34A
      sc35A
      sc36A
      sc37A
      sc38A
      sc39A
      sc40A
      sc41A
      sc42A
      sc43A
      sc44A
      sc45A
      sc46A
      sc47A
      sc48A
      sc49A
      sc50A
      sc51A
      sc52A
      sc53A
      sc54A
      sc55A
      sc56A
      sc57A)
   0))

None
(declare-fun var0A () String)
(declare-fun var0B () String)
(declare-fun unch20A () String)
(declare-fun ch0A () String)
(declare-fun unch10A () String)
(declare-fun sufA () String)
(declare-fun stem0 () String)
(declare-fun preA () String)
(declare-fun unch20B () String)
(declare-fun ch0B () String)
(declare-fun unch10B () String)
(declare-fun sufB () String)
(declare-fun preB () String)
(declare-fun l0 () Int)
(declare-fun sc0A () Int)
(declare-fun sc0B () Int)
(declare-fun var1A () String)
(declare-fun var1B () String)
(declare-fun unch21A () String)
(declare-fun ch1A () String)
(declare-fun unch11A () String)
(declare-fun stem1 () String)
(declare-fun unch21B () String)
(declare-fun ch1B () String)
(declare-fun unch11B () String)
(declare-fun l1 () Int)
(declare-fun sc1A () Int)
(declare-fun sc1B () Int)
(declare-fun var2A () String)
(declare-fun var2B () String)
(declare-fun unch22A () String)
(declare-fun ch2A () String)
(declare-fun unch12A () String)
(declare-fun stem2 () String)
(declare-fun unch22B () String)
(declare-fun ch2B () String)
(declare-fun unch12B () String)
(declare-fun l2 () Int)
(declare-fun sc2A () Int)
(declare-fun sc2B () Int)
(declare-fun var3A () String)
(declare-fun var3B () String)
(declare-fun unch23A () String)
(declare-fun ch3A () String)
(declare-fun unch13A () String)
(declare-fun stem3 () String)
(declare-fun unch23B () String)
(declare-fun ch3B () String)
(declare-fun unch13B () String)
(declare-fun l3 () Int)
(declare-fun sc3A () Int)
(declare-fun sc3B () Int)
(declare-fun var4A () String)
(declare-fun var4B () String)
(declare-fun unch24A () String)
(declare-fun ch4A () String)
(declare-fun unch14A () String)
(declare-fun stem4 () String)
(declare-fun unch24B () String)
(declare-fun ch4B () String)
(declare-fun unch14B () String)
(declare-fun l4 () Int)
(declare-fun sc4A () Int)
(declare-fun sc4B () Int)
(declare-fun var5A () String)
(declare-fun var5B () String)
(declare-fun unch25A () String)
(declare-fun ch5A () String)
(declare-fun unch15A () String)
(declare-fun stem5 () String)
(declare-fun unch25B () String)
(declare-fun ch5B () String)
(declare-fun unch15B () String)
(declare-fun l5 () Int)
(declare-fun sc5A () Int)
(declare-fun sc5B () Int)
(declare-fun var6A () String)
(declare-fun var6B () String)
(declare-fun unch26A () String)
(declare-fun ch6A () String)
(declare-fun unch16A () String)
(declare-fun stem6 () String)
(declare-fun unch26B () String)
(declare-fun ch6B () String)
(declare-fun unch16B () String)
(declare-fun l6 () Int)
(declare-fun sc6A () Int)
(declare-fun sc6B () Int)
(declare-fun var7A () String)
(declare-fun var7B () String)
(declare-fun unch27A () String)
(declare-fun ch7A () String)
(declare-fun unch17A () String)
(declare-fun stem7 () String)
(declare-fun unch27B () String)
(declare-fun ch7B () String)
(declare-fun unch17B () String)
(declare-fun l7 () Int)
(declare-fun sc7A () Int)
(declare-fun sc7B () Int)
(declare-fun var8A () String)
(declare-fun var8B () String)
(declare-fun unch28A () String)
(declare-fun ch8A () String)
(declare-fun unch18A () String)
(declare-fun stem8 () String)
(declare-fun unch28B () String)
(declare-fun ch8B () String)
(declare-fun unch18B () String)
(declare-fun l8 () Int)
(declare-fun sc8A () Int)
(declare-fun sc8B () Int)
(declare-fun var9A () String)
(declare-fun var9B () String)
(declare-fun unch29A () String)
(declare-fun ch9A () String)
(declare-fun unch19A () String)
(declare-fun stem9 () String)
(declare-fun unch29B () String)
(declare-fun ch9B () String)
(declare-fun unch19B () String)
(declare-fun l9 () Int)
(declare-fun sc9A () Int)
(declare-fun sc9B () Int)
(declare-fun var10A () String)
(declare-fun var10B () String)
(declare-fun unch210A () String)
(declare-fun ch10A () String)
(declare-fun unch110A () String)
(declare-fun stem10 () String)
(declare-fun unch210B () String)
(declare-fun ch10B () String)
(declare-fun unch110B () String)
(declare-fun l10 () Int)
(declare-fun sc10A () Int)
(declare-fun sc10B () Int)
(declare-fun var11A () String)
(declare-fun var11B () String)
(declare-fun unch211A () String)
(declare-fun ch11A () String)
(declare-fun unch111A () String)
(declare-fun stem11 () String)
(declare-fun unch211B () String)
(declare-fun ch11B () String)
(declare-fun unch111B () String)
(declare-fun l11 () Int)
(declare-fun sc11A () Int)
(declare-fun sc11B () Int)
(declare-fun var12A () String)
(declare-fun var12B () String)
(declare-fun unch212A () String)
(declare-fun ch12A () String)
(declare-fun unch112A () String)
(declare-fun stem12 () String)
(declare-fun unch212B () String)
(declare-fun ch12B () String)
(declare-fun unch112B () String)
(declare-fun l12 () Int)
(declare-fun sc12A () Int)
(declare-fun sc12B () Int)
(declare-fun var13A () String)
(declare-fun var13B () String)
(declare-fun unch213A () String)
(declare-fun ch13A () String)
(declare-fun unch113A () String)
(declare-fun stem13 () String)
(declare-fun unch213B () String)
(declare-fun ch13B () String)
(declare-fun unch113B () String)
(declare-fun l13 () Int)
(declare-fun sc13A () Int)
(declare-fun sc13B () Int)
(declare-fun var14A () String)
(declare-fun var14B () String)
(declare-fun unch214A () String)
(declare-fun ch14A () String)
(declare-fun unch114A () String)
(declare-fun stem14 () String)
(declare-fun unch214B () String)
(declare-fun ch14B () String)
(declare-fun unch114B () String)
(declare-fun l14 () Int)
(declare-fun sc14A () Int)
(declare-fun sc14B () Int)
(declare-fun var15A () String)
(declare-fun var15B () String)
(declare-fun unch215A () String)
(declare-fun ch15A () String)
(declare-fun unch115A () String)
(declare-fun stem15 () String)
(declare-fun unch215B () String)
(declare-fun ch15B () String)
(declare-fun unch115B () String)
(declare-fun l15 () Int)
(declare-fun sc15A () Int)
(declare-fun sc15B () Int)
(declare-fun var16A () String)
(declare-fun var16B () String)
(declare-fun unch216A () String)
(declare-fun ch16A () String)
(declare-fun unch116A () String)
(declare-fun stem16 () String)
(declare-fun unch216B () String)
(declare-fun ch16B () String)
(declare-fun unch116B () String)
(declare-fun l16 () Int)
(declare-fun sc16A () Int)
(declare-fun sc16B () Int)
(declare-fun var17A () String)
(declare-fun var17B () String)
(declare-fun unch217A () String)
(declare-fun ch17A () String)
(declare-fun unch117A () String)
(declare-fun stem17 () String)
(declare-fun unch217B () String)
(declare-fun ch17B () String)
(declare-fun unch117B () String)
(declare-fun l17 () Int)
(declare-fun sc17A () Int)
(declare-fun sc17B () Int)
(declare-fun var18A () String)
(declare-fun var18B () String)
(declare-fun unch218A () String)
(declare-fun ch18A () String)
(declare-fun unch118A () String)
(declare-fun stem18 () String)
(declare-fun unch218B () String)
(declare-fun ch18B () String)
(declare-fun unch118B () String)
(declare-fun l18 () Int)
(declare-fun sc18A () Int)
(declare-fun sc18B () Int)
(declare-fun var19A () String)
(declare-fun var19B () String)
(declare-fun unch219A () String)
(declare-fun ch19A () String)
(declare-fun unch119A () String)
(declare-fun stem19 () String)
(declare-fun unch219B () String)
(declare-fun ch19B () String)
(declare-fun unch119B () String)
(declare-fun l19 () Int)
(declare-fun sc19A () Int)
(declare-fun sc19B () Int)
(declare-fun var20A () String)
(declare-fun var20B () String)
(declare-fun unch220A () String)
(declare-fun ch20A () String)
(declare-fun unch120A () String)
(declare-fun stem20 () String)
(declare-fun unch220B () String)
(declare-fun ch20B () String)
(declare-fun unch120B () String)
(declare-fun l20 () Int)
(declare-fun sc20A () Int)
(declare-fun sc20B () Int)
(declare-fun var21A () String)
(declare-fun var21B () String)
(declare-fun unch221A () String)
(declare-fun ch21A () String)
(declare-fun unch121A () String)
(declare-fun stem21 () String)
(declare-fun unch221B () String)
(declare-fun ch21B () String)
(declare-fun unch121B () String)
(declare-fun l21 () Int)
(declare-fun sc21A () Int)
(declare-fun sc21B () Int)
(declare-fun var22A () String)
(declare-fun var22B () String)
(declare-fun unch222A () String)
(declare-fun ch22A () String)
(declare-fun unch122A () String)
(declare-fun stem22 () String)
(declare-fun unch222B () String)
(declare-fun ch22B () String)
(declare-fun unch122B () String)
(declare-fun l22 () Int)
(declare-fun sc22A () Int)
(declare-fun sc22B () Int)
(declare-fun var23A () String)
(declare-fun var23B () String)
(declare-fun unch223A () String)
(declare-fun ch23A () String)
(declare-fun unch123A () String)
(declare-fun stem23 () String)
(declare-fun unch223B () String)
(declare-fun ch23B () String)
(declare-fun unch123B () String)
(declare-fun l23 () Int)
(declare-fun sc23A () Int)
(declare-fun sc23B () Int)
(declare-fun var24A () String)
(declare-fun var24B () String)
(declare-fun unch224A () String)
(declare-fun ch24A () String)
(declare-fun unch124A () String)
(declare-fun stem24 () String)
(declare-fun unch224B () String)
(declare-fun ch24B () String)
(declare-fun unch124B () String)
(declare-fun l24 () Int)
(declare-fun sc24A () Int)
(declare-fun sc24B () Int)
(declare-fun var25A () String)
(declare-fun var25B () String)
(declare-fun unch225A () String)
(declare-fun ch25A () String)
(declare-fun unch125A () String)
(declare-fun stem25 () String)
(declare-fun unch225B () String)
(declare-fun ch25B () String)
(declare-fun unch125B () String)
(declare-fun l25 () Int)
(declare-fun sc25A () Int)
(declare-fun sc25B () Int)
(declare-fun var26A () String)
(declare-fun var26B () String)
(declare-fun unch226A () String)
(declare-fun ch26A () String)
(declare-fun unch126A () String)
(declare-fun stem26 () String)
(declare-fun unch226B () String)
(declare-fun ch26B () String)
(declare-fun unch126B () String)
(declare-fun l26 () Int)
(declare-fun sc26A () Int)
(declare-fun sc26B () Int)
(declare-fun var27A () String)
(declare-fun var27B () String)
(declare-fun unch227A () String)
(declare-fun ch27A () String)
(declare-fun unch127A () String)
(declare-fun stem27 () String)
(declare-fun unch227B () String)
(declare-fun ch27B () String)
(declare-fun unch127B () String)
(declare-fun l27 () Int)
(declare-fun sc27A () Int)
(declare-fun sc27B () Int)
(declare-fun var28A () String)
(declare-fun var28B () String)
(declare-fun unch228A () String)
(declare-fun ch28A () String)
(declare-fun unch128A () String)
(declare-fun stem28 () String)
(declare-fun unch228B () String)
(declare-fun ch28B () String)
(declare-fun unch128B () String)
(declare-fun l28 () Int)
(declare-fun sc28A () Int)
(declare-fun sc28B () Int)
(declare-fun var29A () String)
(declare-fun var29B () String)
(declare-fun unch229A () String)
(declare-fun ch29A () String)
(declare-fun unch129A () String)
(declare-fun stem29 () String)
(declare-fun unch229B () String)
(declare-fun ch29B () String)
(declare-fun unch129B () String)
(declare-fun l29 () Int)
(declare-fun sc29A () Int)
(declare-fun sc29B () Int)
(declare-fun var30A () String)
(declare-fun var30B () String)
(declare-fun unch230A () String)
(declare-fun ch30A () String)
(declare-fun unch130A () String)
(declare-fun stem30 () String)
(declare-fun unch230B () String)
(declare-fun ch30B () String)
(declare-fun unch130B () String)
(declare-fun l30 () Int)
(declare-fun sc30A () Int)
(declare-fun sc30B () Int)
(declare-fun var31A () String)
(declare-fun var31B () String)
(declare-fun unch231A () String)
(declare-fun ch31A () String)
(declare-fun unch131A () String)
(declare-fun stem31 () String)
(declare-fun unch231B () String)
(declare-fun ch31B () String)
(declare-fun unch131B () String)
(declare-fun l31 () Int)
(declare-fun sc31A () Int)
(declare-fun sc31B () Int)
(declare-fun var32A () String)
(declare-fun var32B () String)
(declare-fun unch232A () String)
(declare-fun ch32A () String)
(declare-fun unch132A () String)
(declare-fun stem32 () String)
(declare-fun unch232B () String)
(declare-fun ch32B () String)
(declare-fun unch132B () String)
(declare-fun l32 () Int)
(declare-fun sc32A () Int)
(declare-fun sc32B () Int)
(declare-fun var33A () String)
(declare-fun var33B () String)
(declare-fun unch233A () String)
(declare-fun ch33A () String)
(declare-fun unch133A () String)
(declare-fun stem33 () String)
(declare-fun unch233B () String)
(declare-fun ch33B () String)
(declare-fun unch133B () String)
(declare-fun l33 () Int)
(declare-fun sc33A () Int)
(declare-fun sc33B () Int)
(declare-fun var34A () String)
(declare-fun var34B () String)
(declare-fun unch234A () String)
(declare-fun ch34A () String)
(declare-fun unch134A () String)
(declare-fun stem34 () String)
(declare-fun unch234B () String)
(declare-fun ch34B () String)
(declare-fun unch134B () String)
(declare-fun l34 () Int)
(declare-fun sc34A () Int)
(declare-fun sc34B () Int)
(declare-fun var35A () String)
(declare-fun var35B () String)
(declare-fun unch235A () String)
(declare-fun ch35A () String)
(declare-fun unch135A () String)
(declare-fun stem35 () String)
(declare-fun unch235B () String)
(declare-fun ch35B () String)
(declare-fun unch135B () String)
(declare-fun l35 () Int)
(declare-fun sc35A () Int)
(declare-fun sc35B () Int)
(declare-fun var36A () String)
(declare-fun var36B () String)
(declare-fun unch236A () String)
(declare-fun ch36A () String)
(declare-fun unch136A () String)
(declare-fun stem36 () String)
(declare-fun unch236B () String)
(declare-fun ch36B () String)
(declare-fun unch136B () String)
(declare-fun l36 () Int)
(declare-fun sc36A () Int)
(declare-fun sc36B () Int)
(declare-fun var37A () String)
(declare-fun var37B () String)
(declare-fun unch237A () String)
(declare-fun ch37A () String)
(declare-fun unch137A () String)
(declare-fun stem37 () String)
(declare-fun unch237B () String)
(declare-fun ch37B () String)
(declare-fun unch137B () String)
(declare-fun l37 () Int)
(declare-fun sc37A () Int)
(declare-fun sc37B () Int)
(declare-fun var38A () String)
(declare-fun var38B () String)
(declare-fun unch238A () String)
(declare-fun ch38A () String)
(declare-fun unch138A () String)
(declare-fun stem38 () String)
(declare-fun unch238B () String)
(declare-fun ch38B () String)
(declare-fun unch138B () String)
(declare-fun l38 () Int)
(declare-fun sc38A () Int)
(declare-fun sc38B () Int)
(declare-fun var39A () String)
(declare-fun var39B () String)
(declare-fun unch239A () String)
(declare-fun ch39A () String)
(declare-fun unch139A () String)
(declare-fun stem39 () String)
(declare-fun unch239B () String)
(declare-fun ch39B () String)
(declare-fun unch139B () String)
(declare-fun l39 () Int)
(declare-fun sc39A () Int)
(declare-fun sc39B () Int)
(declare-fun var40A () String)
(declare-fun var40B () String)
(declare-fun unch240A () String)
(declare-fun ch40A () String)
(declare-fun unch140A () String)
(declare-fun stem40 () String)
(declare-fun unch240B () String)
(declare-fun ch40B () String)
(declare-fun unch140B () String)
(declare-fun l40 () Int)
(declare-fun sc40A () Int)
(declare-fun sc40B () Int)
(declare-fun var41A () String)
(declare-fun var41B () String)
(declare-fun unch241A () String)
(declare-fun ch41A () String)
(declare-fun unch141A () String)
(declare-fun stem41 () String)
(declare-fun unch241B () String)
(declare-fun ch41B () String)
(declare-fun unch141B () String)
(declare-fun l41 () Int)
(declare-fun sc41A () Int)
(declare-fun sc41B () Int)
(declare-fun var42A () String)
(declare-fun var42B () String)
(declare-fun unch242A () String)
(declare-fun ch42A () String)
(declare-fun unch142A () String)
(declare-fun stem42 () String)
(declare-fun unch242B () String)
(declare-fun ch42B () String)
(declare-fun unch142B () String)
(declare-fun l42 () Int)
(declare-fun sc42A () Int)
(declare-fun sc42B () Int)
(declare-fun var43A () String)
(declare-fun var43B () String)
(declare-fun unch243A () String)
(declare-fun ch43A () String)
(declare-fun unch143A () String)
(declare-fun stem43 () String)
(declare-fun unch243B () String)
(declare-fun ch43B () String)
(declare-fun unch143B () String)
(declare-fun l43 () Int)
(declare-fun sc43A () Int)
(declare-fun sc43B () Int)
(declare-fun var44A () String)
(declare-fun var44B () String)
(declare-fun unch244A () String)
(declare-fun ch44A () String)
(declare-fun unch144A () String)
(declare-fun stem44 () String)
(declare-fun unch244B () String)
(declare-fun ch44B () String)
(declare-fun unch144B () String)
(declare-fun l44 () Int)
(declare-fun sc44A () Int)
(declare-fun sc44B () Int)
(declare-fun var45A () String)
(declare-fun var45B () String)
(declare-fun unch245A () String)
(declare-fun ch45A () String)
(declare-fun unch145A () String)
(declare-fun stem45 () String)
(declare-fun unch245B () String)
(declare-fun ch45B () String)
(declare-fun unch145B () String)
(declare-fun l45 () Int)
(declare-fun sc45A () Int)
(declare-fun sc45B () Int)
(declare-fun var46A () String)
(declare-fun var46B () String)
(declare-fun unch246A () String)
(declare-fun ch46A () String)
(declare-fun unch146A () String)
(declare-fun stem46 () String)
(declare-fun unch246B () String)
(declare-fun ch46B () String)
(declare-fun unch146B () String)
(declare-fun l46 () Int)
(declare-fun sc46A () Int)
(declare-fun sc46B () Int)
(declare-fun var47A () String)
(declare-fun var47B () String)
(declare-fun unch247A () String)
(declare-fun ch47A () String)
(declare-fun unch147A () String)
(declare-fun stem47 () String)
(declare-fun unch247B () String)
(declare-fun ch47B () String)
(declare-fun unch147B () String)
(declare-fun l47 () Int)
(declare-fun sc47A () Int)
(declare-fun sc47B () Int)
(declare-fun var48A () String)
(declare-fun var48B () String)
(declare-fun unch248A () String)
(declare-fun ch48A () String)
(declare-fun unch148A () String)
(declare-fun stem48 () String)
(declare-fun unch248B () String)
(declare-fun ch48B () String)
(declare-fun unch148B () String)
(declare-fun l48 () Int)
(declare-fun sc48A () Int)
(declare-fun sc48B () Int)
(declare-fun var49A () String)
(declare-fun var49B () String)
(declare-fun unch249A () String)
(declare-fun ch49A () String)
(declare-fun unch149A () String)
(declare-fun stem49 () String)
(declare-fun unch249B () String)
(declare-fun ch49B () String)
(declare-fun unch149B () String)
(declare-fun l49 () Int)
(declare-fun sc49A () Int)
(declare-fun sc49B () Int)
(declare-fun var50A () String)
(declare-fun var50B () String)
(declare-fun unch250A () String)
(declare-fun ch50A () String)
(declare-fun unch150A () String)
(declare-fun stem50 () String)
(declare-fun unch250B () String)
(declare-fun ch50B () String)
(declare-fun unch150B () String)
(declare-fun l50 () Int)
(declare-fun sc50A () Int)
(declare-fun sc50B () Int)
(declare-fun var51A () String)
(declare-fun var51B () String)
(declare-fun unch251A () String)
(declare-fun ch51A () String)
(declare-fun unch151A () String)
(declare-fun stem51 () String)
(declare-fun unch251B () String)
(declare-fun ch51B () String)
(declare-fun unch151B () String)
(declare-fun l51 () Int)
(declare-fun sc51A () Int)
(declare-fun sc51B () Int)
(declare-fun var52A () String)
(declare-fun var52B () String)
(declare-fun unch252A () String)
(declare-fun ch52A () String)
(declare-fun unch152A () String)
(declare-fun stem52 () String)
(declare-fun unch252B () String)
(declare-fun ch52B () String)
(declare-fun unch152B () String)
(declare-fun l52 () Int)
(declare-fun sc52A () Int)
(declare-fun sc52B () Int)
(declare-fun var53A () String)
(declare-fun var53B () String)
(declare-fun unch253A () String)
(declare-fun ch53A () String)
(declare-fun unch153A () String)
(declare-fun stem53 () String)
(declare-fun unch253B () String)
(declare-fun ch53B () String)
(declare-fun unch153B () String)
(declare-fun l53 () Int)
(declare-fun sc53A () Int)
(declare-fun sc53B () Int)
(declare-fun var54A () String)
(declare-fun var54B () String)
(declare-fun unch254A () String)
(declare-fun ch54A () String)
(declare-fun unch154A () String)
(declare-fun stem54 () String)
(declare-fun unch254B () String)
(declare-fun ch54B () String)
(declare-fun unch154B () String)
(declare-fun l54 () Int)
(declare-fun sc54A () Int)
(declare-fun sc54B () Int)
(declare-fun var55A () String)
(declare-fun var55B () String)
(declare-fun unch255A () String)
(declare-fun ch55A () String)
(declare-fun unch155A () String)
(declare-fun stem55 () String)
(declare-fun unch255B () String)
(declare-fun ch55B () String)
(declare-fun unch155B () String)
(declare-fun l55 () Int)
(declare-fun sc55A () Int)
(declare-fun sc55B () Int)
(declare-fun var56A () String)
(declare-fun var56B () String)
(declare-fun unch256A () String)
(declare-fun ch56A () String)
(declare-fun unch156A () String)
(declare-fun stem56 () String)
(declare-fun unch256B () String)
(declare-fun ch56B () String)
(declare-fun unch156B () String)
(declare-fun l56 () Int)
(declare-fun sc56A () Int)
(declare-fun sc56B () Int)
(declare-fun var57A () String)
(declare-fun var57B () String)
(declare-fun unch257A () String)
(declare-fun ch57A () String)
(declare-fun unch157A () String)
(declare-fun stem57 () String)
(declare-fun unch257B () String)
(declare-fun ch57B () String)
(declare-fun unch157B () String)
(declare-fun l57 () Int)
(declare-fun sc57A () Int)
(declare-fun sc57B () Int)
(assert (<= (str.len var0A) 1))
(assert (<= (str.len var0B) 1))
(assert (= (str.++ preA (str.++ stem0 sufA)) (str.++ unch10A (str.++ ch0A unch20A))))
(assert (= (str.++ preB (str.++ stem0 sufB)) (str.++ unch10B (str.++ ch0B unch20B))))
(assert (= "olo" (str.++ unch10A (str.++ var0A unch20A))))
(assert (= "oloia" (str.++ unch10B (str.++ var0B unch20B))))
(assert (= (str.len stem0) l0))
(assert (= (ite (= ch0A var0A) 0 1) sc0A))
(assert (= (ite (= ch0B var0B) 0 1) sc0B))
(assert (<= sc0A 1))
(assert (<= sc0B 1))
(assert (<= (str.len var1A) 1))
(assert (<= (str.len var1B) 1))
(assert (= (str.++ preA (str.++ stem1 sufA)) (str.++ unch11A (str.++ ch1A unch21A))))
(assert (= (str.++ preB (str.++ stem1 sufB)) (str.++ unch11B (str.++ ch1B unch21B))))
(assert (= "lafo" (str.++ unch11A (str.++ var1A unch21A))))
(assert (= "lafoia" (str.++ unch11B (str.++ var1B unch21B))))
(assert (= (str.len stem1) l1))
(assert (= (ite (= ch1A var1A) 0 1) sc1A))
(assert (= (ite (= ch1B var1B) 0 1) sc1B))
(assert (<= sc1A 1))
(assert (<= sc1B 1))
(assert (<= (str.len var2A) 1))
(assert (<= (str.len var2B) 1))
(assert (= (str.++ preA (str.++ stem2 sufA)) (str.++ unch12A (str.++ ch2A unch22A))))
(assert (= (str.++ preB (str.++ stem2 sufB)) (str.++ unch12B (str.++ ch2B unch22B))))
(assert (= "aKa" (str.++ unch12A (str.++ var2A unch22A))))
(assert (= "aKaia" (str.++ unch12B (str.++ var2B unch22B))))
(assert (= (str.len stem2) l2))
(assert (= (ite (= ch2A var2A) 0 1) sc2A))
(assert (= (ite (= ch2B var2B) 0 1) sc2B))
(assert (<= sc2A 1))
(assert (<= sc2B 1))
(assert (<= (str.len var3A) 1))
(assert (<= (str.len var3B) 1))
(assert (= (str.++ preA (str.++ stem3 sufA)) (str.++ unch13A (str.++ ch3A unch23A))))
(assert (= (str.++ preB (str.++ stem3 sufB)) (str.++ unch13B (str.++ ch3B unch23B))))
(assert (= "usu" (str.++ unch13A (str.++ var3A unch23A))))
(assert (= "usuia" (str.++ unch13B (str.++ var3B unch23B))))
(assert (= (str.len stem3) l3))
(assert (= (ite (= ch3A var3A) 0 1) sc3A))
(assert (= (ite (= ch3B var3B) 0 1) sc3B))
(assert (<= sc3A 1))
(assert (<= sc3B 1))
(assert (<= (str.len var4A) 1))
(assert (<= (str.len var4B) 1))
(assert (= (str.++ preA (str.++ stem4 sufA)) (str.++ unch14A (str.++ ch4A unch24A))))
(assert (= (str.++ preB (str.++ stem4 sufB)) (str.++ unch14B (str.++ ch4B unch24B))))
(assert (= "tau" (str.++ unch14A (str.++ var4A unch24A))))
(assert (= "tauia" (str.++ unch14B (str.++ var4B unch24B))))
(assert (= (str.len stem4) l4))
(assert (= (ite (= ch4A var4A) 0 1) sc4A))
(assert (= (ite (= ch4B var4B) 0 1) sc4B))
(assert (<= sc4A 1))
(assert (<= sc4B 1))
(assert (<= (str.len var5A) 1))
(assert (<= (str.len var5B) 1))
(assert (= (str.++ preA (str.++ stem5 sufA)) (str.++ unch15A (str.++ ch5A unch25A))))
(assert (= (str.++ preB (str.++ stem5 sufB)) (str.++ unch15B (str.++ ch5B unch25B))))
(assert (= "taui" (str.++ unch15A (str.++ var5A unch25A))))
(assert (= "tauia" (str.++ unch15B (str.++ var5B unch25B))))
(assert (= (str.len stem5) l5))
(assert (= (ite (= ch5A var5A) 0 1) sc5A))
(assert (= (ite (= ch5B var5B) 0 1) sc5B))
(assert (<= sc5A 1))
(assert (<= sc5B 1))
(assert (<= (str.len var6A) 1))
(assert (<= (str.len var6B) 1))
(assert (= (str.++ preA (str.++ stem6 sufA)) (str.++ unch16A (str.++ ch6A unch26A))))
(assert (= (str.++ preB (str.++ stem6 sufB)) (str.++ unch16B (str.++ ch6B unch26B))))
(assert (= "sOXili" (str.++ unch16A (str.++ var6A unch26A))))
(assert (= "sOXilia" (str.++ unch16B (str.++ var6B unch26B))))
(assert (= (str.len stem6) l6))
(assert (= (ite (= ch6A var6A) 0 1) sc6A))
(assert (= (ite (= ch6B var6B) 0 1) sc6B))
(assert (<= sc6A 1))
(assert (<= sc6B 1))
(assert (<= (str.len var7A) 1))
(assert (<= (str.len var7B) 1))
(assert (= (str.++ preA (str.++ stem7 sufA)) (str.++ unch17A (str.++ ch7A unch27A))))
(assert (= (str.++ preB (str.++ stem7 sufB)) (str.++ unch17B (str.++ ch7B unch27B))))
(assert (= "vaKai" (str.++ unch17A (str.++ var7A unch27A))))
(assert (= "vaKaia" (str.++ unch17B (str.++ var7B unch27B))))
(assert (= (str.len stem7) l7))
(assert (= (ite (= ch7A var7A) 0 1) sc7A))
(assert (= (ite (= ch7B var7B) 0 1) sc7B))
(assert (<= sc7A 1))
(assert (<= sc7B 1))
(assert (<= (str.len var8A) 1))
(assert (<= (str.len var8B) 1))
(assert (= (str.++ preA (str.++ stem8 sufA)) (str.++ unch18A (str.++ ch8A unch28A))))
(assert (= (str.++ preB (str.++ stem8 sufB)) (str.++ unch18B (str.++ ch8B unch28B))))
(assert (= "paXi" (str.++ unch18A (str.++ var8A unch28A))))
(assert (= "paXia" (str.++ unch18B (str.++ var8B unch28B))))
(assert (= (str.len stem8) l8))
(assert (= (ite (= ch8A var8A) 0 1) sc8A))
(assert (= (ite (= ch8B var8B) 0 1) sc8B))
(assert (<= sc8A 1))
(assert (<= sc8B 1))
(assert (<= (str.len var9A) 1))
(assert (<= (str.len var9B) 1))
(assert (= (str.++ preA (str.++ stem9 sufA)) (str.++ unch19A (str.++ ch9A unch29A))))
(assert (= (str.++ preB (str.++ stem9 sufB)) (str.++ unch19B (str.++ ch9B unch29B))))
(assert (= "naumati" (str.++ unch19A (str.++ var9A unch29A))))
(assert (= "naumatia" (str.++ unch19B (str.++ var9B unch29B))))
(assert (= (str.len stem9) l9))
(assert (= (ite (= ch9A var9A) 0 1) sc9A))
(assert (= (ite (= ch9B var9B) 0 1) sc9B))
(assert (<= sc9A 1))
(assert (<= sc9B 1))
(assert (<= (str.len var10A) 1))
(assert (<= (str.len var10B) 1))
(assert (= (str.++ preA (str.++ stem10 sufA)) (str.++ unch110A (str.++ ch10A unch210A))))
(assert (= (str.++ preB (str.++ stem10 sufB)) (str.++ unch110B (str.++ ch10B unch210B))))
(assert (= "sOuni" (str.++ unch110A (str.++ var10A unch210A))))
(assert (= "sOunia" (str.++ unch110B (str.++ var10B unch210B))))
(assert (= (str.len stem10) l10))
(assert (= (ite (= ch10A var10A) 0 1) sc10A))
(assert (= (ite (= ch10B var10B) 0 1) sc10B))
(assert (<= sc10A 1))
(assert (<= sc10B 1))
(assert (<= (str.len var11A) 1))
(assert (<= (str.len var11B) 1))
(assert (= (str.++ preA (str.++ stem11 sufA)) (str.++ unch111A (str.++ ch11A unch211A))))
(assert (= (str.++ preB (str.++ stem11 sufB)) (str.++ unch111B (str.++ ch11B unch211B))))
(assert (= "seKi" (str.++ unch111A (str.++ var11A unch211A))))
(assert (= "seKia" (str.++ unch111B (str.++ var11B unch211B))))
(assert (= (str.len stem11) l11))
(assert (= (ite (= ch11A var11A) 0 1) sc11A))
(assert (= (ite (= ch11B var11B) 0 1) sc11B))
(assert (<= sc11A 1))
(assert (<= sc11B 1))
(assert (<= (str.len var12A) 1))
(assert (<= (str.len var12B) 1))
(assert (= (str.++ preA (str.++ stem12 sufA)) (str.++ unch112A (str.++ ch12A unch212A))))
(assert (= (str.++ preB (str.++ stem12 sufB)) (str.++ unch112B (str.++ ch12B unch212B))))
(assert (= "lele" (str.++ unch112A (str.++ var12A unch212A))))
(assert (= "lelea" (str.++ unch112B (str.++ var12B unch212B))))
(assert (= (str.len stem12) l12))
(assert (= (ite (= ch12A var12A) 0 1) sc12A))
(assert (= (ite (= ch12B var12B) 0 1) sc12B))
(assert (<= sc12A 1))
(assert (<= sc12B 1))
(assert (<= (str.len var13A) 1))
(assert (<= (str.len var13B) 1))
(assert (= (str.++ preA (str.++ stem13 sufA)) (str.++ unch113A (str.++ ch13A unch213A))))
(assert (= (str.++ preB (str.++ stem13 sufB)) (str.++ unch113B (str.++ ch13B unch213B))))
(assert (= "suXe" (str.++ unch113A (str.++ var13A unch213A))))
(assert (= "suXea" (str.++ unch113B (str.++ var13B unch213B))))
(assert (= (str.len stem13) l13))
(assert (= (ite (= ch13A var13A) 0 1) sc13A))
(assert (= (ite (= ch13B var13B) 0 1) sc13B))
(assert (<= sc13A 1))
(assert (<= sc13B 1))
(assert (<= (str.len var14A) 1))
(assert (<= (str.len var14B) 1))
(assert (= (str.++ preA (str.++ stem14 sufA)) (str.++ unch114A (str.++ ch14A unch214A))))
(assert (= (str.++ preB (str.++ stem14 sufB)) (str.++ unch114B (str.++ ch14B unch214B))))
(assert (= "taXe" (str.++ unch114A (str.++ var14A unch214A))))
(assert (= "taXea" (str.++ unch114B (str.++ var14B unch214B))))
(assert (= (str.len stem14) l14))
(assert (= (ite (= ch14A var14A) 0 1) sc14A))
(assert (= (ite (= ch14B var14B) 0 1) sc14B))
(assert (<= sc14A 1))
(assert (<= sc14B 1))
(assert (<= (str.len var15A) 1))
(assert (<= (str.len var15B) 1))
(assert (= (str.++ preA (str.++ stem15 sufA)) (str.++ unch115A (str.++ ch15A unch215A))))
(assert (= (str.++ preB (str.++ stem15 sufB)) (str.++ unch115B (str.++ ch15B unch215B))))
(assert (= "tafe" (str.++ unch115A (str.++ var15A unch215A))))
(assert (= "tafea" (str.++ unch115B (str.++ var15B unch215B))))
(assert (= (str.len stem15) l15))
(assert (= (ite (= ch15A var15A) 0 1) sc15A))
(assert (= (ite (= ch15B var15B) 0 1) sc15B))
(assert (<= sc15A 1))
(assert (<= sc15B 1))
(assert (<= (str.len var16A) 1))
(assert (<= (str.len var16B) 1))
(assert (= (str.++ preA (str.++ stem16 sufA)) (str.++ unch116A (str.++ ch16A unch216A))))
(assert (= (str.++ preB (str.++ stem16 sufB)) (str.++ unch116B (str.++ ch16B unch216B))))
(assert (= "tOupule" (str.++ unch116A (str.++ var16A unch216A))))
(assert (= "tOupulea" (str.++ unch116B (str.++ var16B unch216B))))
(assert (= (str.len stem16) l16))
(assert (= (ite (= ch16A var16A) 0 1) sc16A))
(assert (= (ite (= ch16B var16B) 0 1) sc16B))
(assert (<= sc16A 1))
(assert (<= sc16B 1))
(assert (<= (str.len var17A) 1))
(assert (<= (str.len var17B) 1))
(assert (= (str.++ preA (str.++ stem17 sufA)) (str.++ unch117A (str.++ ch17A unch217A))))
(assert (= (str.++ preB (str.++ stem17 sufB)) (str.++ unch117B (str.++ ch17B unch217B))))
(assert (= "palepale" (str.++ unch117A (str.++ var17A unch217A))))
(assert (= "palepalea" (str.++ unch117B (str.++ var17B unch217B))))
(assert (= (str.len stem17) l17))
(assert (= (ite (= ch17A var17A) 0 1) sc17A))
(assert (= (ite (= ch17B var17B) 0 1) sc17B))
(assert (<= sc17A 1))
(assert (<= sc17B 1))
(assert (<= (str.len var18A) 1))
(assert (<= (str.len var18B) 1))
(assert (= (str.++ preA (str.++ stem18 sufA)) (str.++ unch118A (str.++ ch18A unch218A))))
(assert (= (str.++ preB (str.++ stem18 sufB)) (str.++ unch118B (str.++ ch18B unch218B))))
(assert (= "tZ" (str.++ unch118A (str.++ var18A unch218A))))
(assert (= "tZlia" (str.++ unch118B (str.++ var18B unch218B))))
(assert (= (str.len stem18) l18))
(assert (= (ite (= ch18A var18A) 0 1) sc18A))
(assert (= (ite (= ch18B var18B) 0 1) sc18B))
(assert (<= sc18A 1))
(assert (<= sc18B 1))
(assert (<= (str.len var19A) 1))
(assert (<= (str.len var19B) 1))
(assert (= (str.++ preA (str.++ stem19 sufA)) (str.++ unch119A (str.++ ch19A unch219A))))
(assert (= (str.++ preB (str.++ stem19 sufB)) (str.++ unch119B (str.++ ch19B unch219B))))
(assert (= "tau" (str.++ unch119A (str.++ var19A unch219A))))
(assert (= "taulia" (str.++ unch119B (str.++ var19B unch219B))))
(assert (= (str.len stem19) l19))
(assert (= (ite (= ch19A var19A) 0 1) sc19A))
(assert (= (ite (= ch19B var19B) 0 1) sc19B))
(assert (<= sc19A 1))
(assert (<= sc19B 1))
(assert (<= (str.len var20A) 1))
(assert (<= (str.len var20B) 1))
(assert (= (str.++ preA (str.++ stem20 sufA)) (str.++ unch120A (str.++ ch20A unch220A))))
(assert (= (str.++ preB (str.++ stem20 sufB)) (str.++ unch120B (str.++ ch20B unch220B))))
(assert (= "Xalo" (str.++ unch120A (str.++ var20A unch220A))))
(assert (= "Xalofia" (str.++ unch120B (str.++ var20B unch220B))))
(assert (= (str.len stem20) l20))
(assert (= (ite (= ch20A var20A) 0 1) sc20A))
(assert (= (ite (= ch20B var20B) 0 1) sc20B))
(assert (<= sc20A 1))
(assert (<= sc20B 1))
(assert (<= (str.len var21A) 1))
(assert (<= (str.len var21B) 1))
(assert (= (str.++ preA (str.++ stem21 sufA)) (str.++ unch121A (str.++ ch21A unch221A))))
(assert (= (str.++ preB (str.++ stem21 sufB)) (str.++ unch121B (str.++ ch21B unch221B))))
(assert (= "oso" (str.++ unch121A (str.++ var21A unch221A))))
(assert (= "osofia" (str.++ unch121B (str.++ var21B unch221B))))
(assert (= (str.len stem21) l21))
(assert (= (ite (= ch21A var21A) 0 1) sc21A))
(assert (= (ite (= ch21B var21B) 0 1) sc21B))
(assert (<= sc21A 1))
(assert (<= sc21B 1))
(assert (<= (str.len var22A) 1))
(assert (<= (str.len var22B) 1))
(assert (= (str.++ preA (str.++ stem22 sufA)) (str.++ unch122A (str.++ ch22A unch222A))))
(assert (= (str.++ preB (str.++ stem22 sufB)) (str.++ unch122B (str.++ ch22B unch222B))))
(assert (= "sao" (str.++ unch122A (str.++ var22A unch222A))))
(assert (= "saofia" (str.++ unch122B (str.++ var22B unch222B))))
(assert (= (str.len stem22) l22))
(assert (= (ite (= ch22A var22A) 0 1) sc22A))
(assert (= (ite (= ch22B var22B) 0 1) sc22B))
(assert (<= sc22A 1))
(assert (<= sc22B 1))
(assert (<= (str.len var23A) 1))
(assert (<= (str.len var23B) 1))
(assert (= (str.++ preA (str.++ stem23 sufA)) (str.++ unch123A (str.++ ch23A unch223A))))
(assert (= (str.++ preB (str.++ stem23 sufB)) (str.++ unch123B (str.++ ch23B unch223B))))
(assert (= "asu" (str.++ unch123A (str.++ var23A unch223A))))
(assert (= "asuKia" (str.++ unch123B (str.++ var23B unch223B))))
(assert (= (str.len stem23) l23))
(assert (= (ite (= ch23A var23A) 0 1) sc23A))
(assert (= (ite (= ch23B var23B) 0 1) sc23B))
(assert (<= sc23A 1))
(assert (<= sc23B 1))
(assert (<= (str.len var24A) 1))
(assert (<= (str.len var24B) 1))
(assert (= (str.++ preA (str.++ stem24 sufA)) (str.++ unch124A (str.++ ch24A unch224A))))
(assert (= (str.++ preB (str.++ stem24 sufB)) (str.++ unch124B (str.++ ch24B unch224B))))
(assert (= "pole" (str.++ unch124A (str.++ var24A unch224A))))
(assert (= "poleKia" (str.++ unch124B (str.++ var24B unch224B))))
(assert (= (str.len stem24) l24))
(assert (= (ite (= ch24A var24A) 0 1) sc24A))
(assert (= (ite (= ch24B var24B) 0 1) sc24B))
(assert (<= sc24A 1))
(assert (<= sc24B 1))
(assert (<= (str.len var25A) 1))
(assert (<= (str.len var25B) 1))
(assert (= (str.++ preA (str.++ stem25 sufA)) (str.++ unch125A (str.++ ch25A unch225A))))
(assert (= (str.++ preB (str.++ stem25 sufB)) (str.++ unch125B (str.++ ch25B unch225B))))
(assert (= "ifo" (str.++ unch125A (str.++ var25A unch225A))))
(assert (= "ifoKia" (str.++ unch125B (str.++ var25B unch225B))))
(assert (= (str.len stem25) l25))
(assert (= (ite (= ch25A var25A) 0 1) sc25A))
(assert (= (ite (= ch25B var25B) 0 1) sc25B))
(assert (<= sc25A 1))
(assert (<= sc25B 1))
(assert (<= (str.len var26A) 1))
(assert (<= (str.len var26B) 1))
(assert (= (str.++ preA (str.++ stem26 sufA)) (str.++ unch126A (str.++ ch26A unch226A))))
(assert (= (str.++ preB (str.++ stem26 sufB)) (str.++ unch126B (str.++ ch26B unch226B))))
(assert (= "ula" (str.++ unch126A (str.++ var26A unch226A))))
(assert (= "ulaKia" (str.++ unch126B (str.++ var26B unch226B))))
(assert (= (str.len stem26) l26))
(assert (= (ite (= ch26A var26A) 0 1) sc26A))
(assert (= (ite (= ch26B var26B) 0 1) sc26B))
(assert (<= sc26A 1))
(assert (<= sc26B 1))
(assert (<= (str.len var27A) 1))
(assert (<= (str.len var27B) 1))
(assert (= (str.++ preA (str.++ stem27 sufA)) (str.++ unch127A (str.++ ch27A unch227A))))
(assert (= (str.++ preB (str.++ stem27 sufB)) (str.++ unch127B (str.++ ch27B unch227B))))
(assert (= "milo" (str.++ unch127A (str.++ var27A unch227A))))
(assert (= "milosia" (str.++ unch127B (str.++ var27B unch227B))))
(assert (= (str.len stem27) l27))
(assert (= (ite (= ch27A var27A) 0 1) sc27A))
(assert (= (ite (= ch27B var27B) 0 1) sc27B))
(assert (<= sc27A 1))
(assert (<= sc27B 1))
(assert (<= (str.len var28A) 1))
(assert (<= (str.len var28B) 1))
(assert (= (str.++ preA (str.++ stem28 sufA)) (str.++ unch128A (str.++ ch28A unch228A))))
(assert (= (str.++ preB (str.++ stem28 sufB)) (str.++ unch128B (str.++ ch28B unch228B))))
(assert (= "valu" (str.++ unch128A (str.++ var28A unch228A))))
(assert (= "valusia" (str.++ unch128B (str.++ var28B unch228B))))
(assert (= (str.len stem28) l28))
(assert (= (ite (= ch28A var28A) 0 1) sc28A))
(assert (= (ite (= ch28B var28B) 0 1) sc28B))
(assert (<= sc28A 1))
(assert (<= sc28B 1))
(assert (<= (str.len var29A) 1))
(assert (<= (str.len var29B) 1))
(assert (= (str.++ preA (str.++ stem29 sufA)) (str.++ unch129A (str.++ ch29A unch229A))))
(assert (= (str.++ preB (str.++ stem29 sufB)) (str.++ unch129B (str.++ ch29B unch229B))))
(assert (= "vela" (str.++ unch129A (str.++ var29A unch229A))))
(assert (= "velasia" (str.++ unch129B (str.++ var29B unch229B))))
(assert (= (str.len stem29) l29))
(assert (= (ite (= ch29A var29A) 0 1) sc29A))
(assert (= (ite (= ch29B var29B) 0 1) sc29B))
(assert (<= sc29A 1))
(assert (<= sc29B 1))
(assert (<= (str.len var30A) 1))
(assert (<= (str.len var30B) 1))
(assert (= (str.++ preA (str.++ stem30 sufA)) (str.++ unch130A (str.++ ch30A unch230A))))
(assert (= (str.++ preB (str.++ stem30 sufB)) (str.++ unch130B (str.++ ch30B unch230B))))
(assert (= "api" (str.++ unch130A (str.++ var30A unch230A))))
(assert (= "apitia" (str.++ unch130B (str.++ var30B unch230B))))
(assert (= (str.len stem30) l30))
(assert (= (ite (= ch30A var30A) 0 1) sc30A))
(assert (= (ite (= ch30B var30B) 0 1) sc30B))
(assert (<= sc30A 1))
(assert (<= sc30B 1))
(assert (<= (str.len var31A) 1))
(assert (<= (str.len var31B) 1))
(assert (= (str.++ preA (str.++ stem31 sufA)) (str.++ unch131A (str.++ ch31A unch231A))))
(assert (= (str.++ preB (str.++ stem31 sufB)) (str.++ unch131B (str.++ ch31B unch231B))))
(assert (= "eXe" (str.++ unch131A (str.++ var31A unch231A))))
(assert (= "eXetia" (str.++ unch131B (str.++ var31B unch231B))))
(assert (= (str.len stem31) l31))
(assert (= (ite (= ch31A var31A) 0 1) sc31A))
(assert (= (ite (= ch31B var31B) 0 1) sc31B))
(assert (<= sc31A 1))
(assert (<= sc31B 1))
(assert (<= (str.len var32A) 1))
(assert (<= (str.len var32B) 1))
(assert (= (str.++ preA (str.++ stem32 sufA)) (str.++ unch132A (str.++ ch32A unch232A))))
(assert (= (str.++ preB (str.++ stem32 sufB)) (str.++ unch132B (str.++ ch32B unch232B))))
(assert (= "lavO" (str.++ unch132A (str.++ var32A unch232A))))
(assert (= "lavOtia" (str.++ unch132B (str.++ var32B unch232B))))
(assert (= (str.len stem32) l32))
(assert (= (ite (= ch32A var32A) 0 1) sc32A))
(assert (= (ite (= ch32B var32B) 0 1) sc32B))
(assert (<= sc32A 1))
(assert (<= sc32B 1))
(assert (<= (str.len var33A) 1))
(assert (<= (str.len var33B) 1))
(assert (= (str.++ preA (str.++ stem33 sufA)) (str.++ unch133A (str.++ ch33A unch233A))))
(assert (= (str.++ preB (str.++ stem33 sufB)) (str.++ unch133B (str.++ ch33B unch233B))))
(assert (= "Z" (str.++ unch133A (str.++ var33A unch233A))))
(assert (= "Ztia" (str.++ unch133B (str.++ var33B unch233B))))
(assert (= (str.len stem33) l33))
(assert (= (ite (= ch33A var33A) 0 1) sc33A))
(assert (= (ite (= ch33B var33B) 0 1) sc33B))
(assert (<= sc33A 1))
(assert (<= sc33B 1))
(assert (<= (str.len var34A) 1))
(assert (<= (str.len var34B) 1))
(assert (= (str.++ preA (str.++ stem34 sufA)) (str.++ unch134A (str.++ ch34A unch234A))))
(assert (= (str.++ preB (str.++ stem34 sufB)) (str.++ unch134B (str.++ ch34B unch234B))))
(assert (= "puni" (str.++ unch134A (str.++ var34A unch234A))))
(assert (= "punitia" (str.++ unch134B (str.++ var34B unch234B))))
(assert (= (str.len stem34) l34))
(assert (= (ite (= ch34A var34A) 0 1) sc34A))
(assert (= (ite (= ch34B var34B) 0 1) sc34B))
(assert (<= sc34A 1))
(assert (<= sc34B 1))
(assert (<= (str.len var35A) 1))
(assert (<= (str.len var35B) 1))
(assert (= (str.++ preA (str.++ stem35 sufA)) (str.++ unch135A (str.++ ch35A unch235A))))
(assert (= (str.++ preB (str.++ stem35 sufB)) (str.++ unch135B (str.++ ch35B unch235B))))
(assert (= "siXo" (str.++ unch135A (str.++ var35A unch235A))))
(assert (= "siXomia" (str.++ unch135B (str.++ var35B unch235B))))
(assert (= (str.len stem35) l35))
(assert (= (ite (= ch35A var35A) 0 1) sc35A))
(assert (= (ite (= ch35B var35B) 0 1) sc35B))
(assert (<= sc35A 1))
(assert (<= sc35B 1))
(assert (<= (str.len var36A) 1))
(assert (<= (str.len var36B) 1))
(assert (= (str.++ preA (str.++ stem36 sufA)) (str.++ unch136A (str.++ ch36A unch236A))))
(assert (= (str.++ preB (str.++ stem36 sufB)) (str.++ unch136B (str.++ ch36B unch236B))))
(assert (= "Kalo" (str.++ unch136A (str.++ var36A unch236A))))
(assert (= "Kalomia" (str.++ unch136B (str.++ var36B unch236B))))
(assert (= (str.len stem36) l36))
(assert (= (ite (= ch36A var36A) 0 1) sc36A))
(assert (= (ite (= ch36B var36B) 0 1) sc36B))
(assert (<= sc36A 1))
(assert (<= sc36B 1))
(assert (<= (str.len var37A) 1))
(assert (<= (str.len var37B) 1))
(assert (= (str.++ preA (str.++ stem37 sufA)) (str.++ unch137A (str.++ ch37A unch237A))))
(assert (= (str.++ preB (str.++ stem37 sufB)) (str.++ unch137B (str.++ ch37B unch237B))))
(assert (= "sopo" (str.++ unch137A (str.++ var37A unch237A))))
(assert (= "sopoXia" (str.++ unch137B (str.++ var37B unch237B))))
(assert (= (str.len stem37) l37))
(assert (= (ite (= ch37A var37A) 0 1) sc37A))
(assert (= (ite (= ch37B var37B) 0 1) sc37B))
(assert (<= sc37A 1))
(assert (<= sc37B 1))
(assert (<= (str.len var38A) 1))
(assert (<= (str.len var38B) 1))
(assert (= (str.++ preA (str.++ stem38 sufA)) (str.++ unch138A (str.++ ch38A unch238A))))
(assert (= (str.++ preB (str.++ stem38 sufB)) (str.++ unch138B (str.++ ch38B unch238B))))
(assert (= "au" (str.++ unch138A (str.++ var38A unch238A))))
(assert (= "aulia" (str.++ unch138B (str.++ var38B unch238B))))
(assert (= (str.len stem38) l38))
(assert (= (ite (= ch38A var38A) 0 1) sc38A))
(assert (= (ite (= ch38B var38B) 0 1) sc38B))
(assert (<= sc38A 1))
(assert (<= sc38B 1))
(assert (<= (str.len var39A) 1))
(assert (<= (str.len var39B) 1))
(assert (= (str.++ preA (str.++ stem39 sufA)) (str.++ unch139A (str.++ ch39A unch239A))))
(assert (= (str.++ preB (str.++ stem39 sufB)) (str.++ unch139B (str.++ ch39B unch239B))))
(assert (= "mOtau" (str.++ unch139A (str.++ var39A unch239A))))
(assert (= "mOtaulia" (str.++ unch139B (str.++ var39B unch239B))))
(assert (= (str.len stem39) l39))
(assert (= (ite (= ch39A var39A) 0 1) sc39A))
(assert (= (ite (= ch39B var39B) 0 1) sc39B))
(assert (<= sc39A 1))
(assert (<= sc39B 1))
(assert (<= (str.len var40A) 1))
(assert (<= (str.len var40B) 1))
(assert (= (str.++ preA (str.++ stem40 sufA)) (str.++ unch140A (str.++ ch40A unch240A))))
(assert (= (str.++ preB (str.++ stem40 sufB)) (str.++ unch140B (str.++ ch40B unch240B))))
(assert (= "ili" (str.++ unch140A (str.++ var40A unch240A))))
(assert (= "ilifia" (str.++ unch140B (str.++ var40B unch240B))))
(assert (= (str.len stem40) l40))
(assert (= (ite (= ch40A var40A) 0 1) sc40A))
(assert (= (ite (= ch40B var40B) 0 1) sc40B))
(assert (<= sc40A 1))
(assert (<= sc40B 1))
(assert (<= (str.len var41A) 1))
(assert (<= (str.len var41B) 1))
(assert (= (str.++ preA (str.++ stem41 sufA)) (str.++ unch141A (str.++ ch41A unch241A))))
(assert (= (str.++ preB (str.++ stem41 sufB)) (str.++ unch141B (str.++ ch41B unch241B))))
(assert (= "ulu" (str.++ unch141A (str.++ var41A unch241A))))
(assert (= "ulufia" (str.++ unch141B (str.++ var41B unch241B))))
(assert (= (str.len stem41) l41))
(assert (= (ite (= ch41A var41A) 0 1) sc41A))
(assert (= (ite (= ch41B var41B) 0 1) sc41B))
(assert (<= sc41A 1))
(assert (<= sc41B 1))
(assert (<= (str.len var42A) 1))
(assert (<= (str.len var42B) 1))
(assert (= (str.++ preA (str.++ stem42 sufA)) (str.++ unch142A (str.++ ch42A unch242A))))
(assert (= (str.++ preB (str.++ stem42 sufB)) (str.++ unch142B (str.++ ch42B unch242B))))
(assert (= "taKo" (str.++ unch142A (str.++ var42A unch242A))))
(assert (= "taKofia" (str.++ unch142B (str.++ var42B unch242B))))
(assert (= (str.len stem42) l42))
(assert (= (ite (= ch42A var42A) 0 1) sc42A))
(assert (= (ite (= ch42B var42B) 0 1) sc42B))
(assert (<= sc42A 1))
(assert (<= sc42B 1))
(assert (<= (str.len var43A) 1))
(assert (<= (str.len var43B) 1))
(assert (= (str.++ preA (str.++ stem43 sufA)) (str.++ unch143A (str.++ ch43A unch243A))))
(assert (= (str.++ preB (str.++ stem43 sufB)) (str.++ unch143B (str.++ ch43B unch243B))))
(assert (= "soa" (str.++ unch143A (str.++ var43A unch243A))))
(assert (= "soaKia" (str.++ unch143B (str.++ var43B unch243B))))
(assert (= (str.len stem43) l43))
(assert (= (ite (= ch43A var43A) 0 1) sc43A))
(assert (= (ite (= ch43B var43B) 0 1) sc43B))
(assert (<= sc43A 1))
(assert (<= sc43B 1))
(assert (<= (str.len var44A) 1))
(assert (<= (str.len var44B) 1))
(assert (= (str.++ preA (str.++ stem44 sufA)) (str.++ unch144A (str.++ ch44A unch244A))))
(assert (= (str.++ preB (str.++ stem44 sufB)) (str.++ unch144B (str.++ ch44B unch244B))))
(assert (= "fesili" (str.++ unch144A (str.++ var44A unch244A))))
(assert (= "fesiliKia" (str.++ unch144B (str.++ var44B unch244B))))
(assert (= (str.len stem44) l44))
(assert (= (ite (= ch44A var44A) 0 1) sc44A))
(assert (= (ite (= ch44B var44B) 0 1) sc44B))
(assert (<= sc44A 1))
(assert (<= sc44B 1))
(assert (<= (str.len var45A) 1))
(assert (<= (str.len var45B) 1))
(assert (= (str.++ preA (str.++ stem45 sufA)) (str.++ unch145A (str.++ ch45A unch245A))))
(assert (= (str.++ preB (str.++ stem45 sufB)) (str.++ unch145B (str.++ ch45B unch245B))))
(assert (= "Xote" (str.++ unch145A (str.++ var45A unch245A))))
(assert (= "XoteKia" (str.++ unch145B (str.++ var45B unch245B))))
(assert (= (str.len stem45) l45))
(assert (= (ite (= ch45A var45A) 0 1) sc45A))
(assert (= (ite (= ch45B var45B) 0 1) sc45B))
(assert (<= sc45A 1))
(assert (<= sc45B 1))
(assert (<= (str.len var46A) 1))
(assert (<= (str.len var46B) 1))
(assert (= (str.++ preA (str.++ stem46 sufA)) (str.++ unch146A (str.++ ch46A unch246A))))
(assert (= (str.++ preB (str.++ stem46 sufB)) (str.++ unch146B (str.++ ch46B unch246B))))
(assert (= "tofu" (str.++ unch146A (str.++ var46A unch246A))))
(assert (= "tofuKia" (str.++ unch146B (str.++ var46B unch246B))))
(assert (= (str.len stem46) l46))
(assert (= (ite (= ch46A var46A) 0 1) sc46A))
(assert (= (ite (= ch46B var46B) 0 1) sc46B))
(assert (<= sc46A 1))
(assert (<= sc46B 1))
(assert (<= (str.len var47A) 1))
(assert (<= (str.len var47B) 1))
(assert (= (str.++ preA (str.++ stem47 sufA)) (str.++ unch147A (str.++ ch47A unch247A))))
(assert (= (str.++ preB (str.++ stem47 sufB)) (str.++ unch147B (str.++ ch47B unch247B))))
(assert (= "laXa" (str.++ unch147A (str.++ var47A unch247A))))
(assert (= "laXasia" (str.++ unch147B (str.++ var47B unch247B))))
(assert (= (str.len stem47) l47))
(assert (= (ite (= ch47A var47A) 0 1) sc47A))
(assert (= (ite (= ch47B var47B) 0 1) sc47B))
(assert (<= sc47A 1))
(assert (<= sc47B 1))
(assert (<= (str.len var48A) 1))
(assert (<= (str.len var48B) 1))
(assert (= (str.++ preA (str.++ stem48 sufA)) (str.++ unch148A (str.++ ch48A unch248A))))
(assert (= (str.++ preB (str.++ stem48 sufB)) (str.++ unch148B (str.++ ch48B unch248B))))
(assert (= "taKi" (str.++ unch148A (str.++ var48A unch248A))))
(assert (= "taKisia" (str.++ unch148B (str.++ var48B unch248B))))
(assert (= (str.len stem48) l48))
(assert (= (ite (= ch48A var48A) 0 1) sc48A))
(assert (= (ite (= ch48B var48B) 0 1) sc48B))
(assert (<= sc48A 1))
(assert (<= sc48B 1))
(assert (<= (str.len var49A) 1))
(assert (<= (str.len var49B) 1))
(assert (= (str.++ preA (str.++ stem49 sufA)) (str.++ unch149A (str.++ ch49A unch249A))))
(assert (= (str.++ preB (str.++ stem49 sufB)) (str.++ unch149B (str.++ ch49B unch249B))))
(assert (= "motu" (str.++ unch149A (str.++ var49A unch249A))))
(assert (= "motusia" (str.++ unch149B (str.++ var49B unch249B))))
(assert (= (str.len stem49) l49))
(assert (= (ite (= ch49A var49A) 0 1) sc49A))
(assert (= (ite (= ch49B var49B) 0 1) sc49B))
(assert (<= sc49A 1))
(assert (<= sc49B 1))
(assert (<= (str.len var50A) 1))
(assert (<= (str.len var50B) 1))
(assert (= (str.++ preA (str.++ stem50 sufA)) (str.++ unch150A (str.++ ch50A unch250A))))
(assert (= (str.++ preB (str.++ stem50 sufB)) (str.++ unch150B (str.++ ch50B unch250B))))
(assert (= "mataXu" (str.++ unch150A (str.++ var50A unch250A))))
(assert (= "mataXutia" (str.++ unch150B (str.++ var50B unch250B))))
(assert (= (str.len stem50) l50))
(assert (= (ite (= ch50A var50A) 0 1) sc50A))
(assert (= (ite (= ch50B var50B) 0 1) sc50B))
(assert (<= sc50A 1))
(assert (<= sc50B 1))
(assert (<= (str.len var51A) 1))
(assert (<= (str.len var51B) 1))
(assert (= (str.++ preA (str.++ stem51 sufA)) (str.++ unch151A (str.++ ch51A unch251A))))
(assert (= (str.++ preB (str.++ stem51 sufB)) (str.++ unch151B (str.++ ch51B unch251B))))
(assert (= "sau" (str.++ unch151A (str.++ var51A unch251A))))
(assert (= "sautia" (str.++ unch151B (str.++ var51B unch251B))))
(assert (= (str.len stem51) l51))
(assert (= (ite (= ch51A var51A) 0 1) sc51A))
(assert (= (ite (= ch51B var51B) 0 1) sc51B))
(assert (<= sc51A 1))
(assert (<= sc51B 1))
(assert (<= (str.len var52A) 1))
(assert (<= (str.len var52B) 1))
(assert (= (str.++ preA (str.++ stem52 sufA)) (str.++ unch152A (str.++ ch52A unch252A))))
(assert (= (str.++ preB (str.++ stem52 sufB)) (str.++ unch152B (str.++ ch52B unch252B))))
(assert (= "oXo" (str.++ unch152A (str.++ var52A unch252A))))
(assert (= "oXotia" (str.++ unch152B (str.++ var52B unch252B))))
(assert (= (str.len stem52) l52))
(assert (= (ite (= ch52A var52A) 0 1) sc52A))
(assert (= (ite (= ch52B var52B) 0 1) sc52B))
(assert (<= sc52A 1))
(assert (<= sc52B 1))
(assert (<= (str.len var53A) 1))
(assert (<= (str.len var53B) 1))
(assert (= (str.++ preA (str.++ stem53 sufA)) (str.++ unch153A (str.++ ch53A unch253A))))
(assert (= (str.++ preB (str.++ stem53 sufB)) (str.++ unch153B (str.++ ch53B unch253B))))
(assert (= "ufi" (str.++ unch153A (str.++ var53A unch253A))))
(assert (= "ufitia" (str.++ unch153B (str.++ var53B unch253B))))
(assert (= (str.len stem53) l53))
(assert (= (ite (= ch53A var53A) 0 1) sc53A))
(assert (= (ite (= ch53B var53B) 0 1) sc53B))
(assert (<= sc53A 1))
(assert (<= sc53B 1))
(assert (<= (str.len var54A) 1))
(assert (<= (str.len var54B) 1))
(assert (= (str.++ preA (str.++ stem54 sufA)) (str.++ unch154A (str.++ ch54A unch254A))))
(assert (= (str.++ preB (str.++ stem54 sufB)) (str.++ unch154B (str.++ ch54B unch254B))))
(assert (= "tanu" (str.++ unch154A (str.++ var54A unch254A))))
(assert (= "tanumia" (str.++ unch154B (str.++ var54B unch254B))))
(assert (= (str.len stem54) l54))
(assert (= (ite (= ch54A var54A) 0 1) sc54A))
(assert (= (ite (= ch54B var54B) 0 1) sc54B))
(assert (<= sc54A 1))
(assert (<= sc54B 1))
(assert (<= (str.len var55A) 1))
(assert (<= (str.len var55B) 1))
(assert (= (str.++ preA (str.++ stem55 sufA)) (str.++ unch155A (str.++ ch55A unch255A))))
(assert (= (str.++ preB (str.++ stem55 sufB)) (str.++ unch155B (str.++ ch55B unch255B))))
(assert (= "moXo" (str.++ unch155A (str.++ var55A unch255A))))
(assert (= "moXomia" (str.++ unch155B (str.++ var55B unch255B))))
(assert (= (str.len stem55) l55))
(assert (= (ite (= ch55A var55A) 0 1) sc55A))
(assert (= (ite (= ch55B var55B) 0 1) sc55B))
(assert (<= sc55A 1))
(assert (<= sc55B 1))
(assert (<= (str.len var56A) 1))
(assert (<= (str.len var56B) 1))
(assert (= (str.++ preA (str.++ stem56 sufA)) (str.++ unch156A (str.++ ch56A unch256A))))
(assert (= (str.++ preB (str.++ stem56 sufB)) (str.++ unch156B (str.++ ch56B unch256B))))
(assert (= "tao" (str.++ unch156A (str.++ var56A unch256A))))
(assert (= "taomia" (str.++ unch156B (str.++ var56B unch256B))))
(assert (= (str.len stem56) l56))
(assert (= (ite (= ch56A var56A) 0 1) sc56A))
(assert (= (ite (= ch56B var56B) 0 1) sc56B))
(assert (<= sc56A 1))
(assert (<= sc56B 1))
(assert (<= (str.len var57A) 1))
(assert (<= (str.len var57B) 1))
(assert (= (str.++ preA (str.++ stem57 sufA)) (str.++ unch157A (str.++ ch57A unch257A))))
(assert (= (str.++ preB (str.++ stem57 sufB)) (str.++ unch157B (str.++ ch57B unch257B))))
(assert (= "fana" (str.++ unch157A (str.++ var57A unch257A))))
(assert (= "fanaXia" (str.++ unch157B (str.++ var57B unch257B))))
(assert (= (str.len stem57) l57))
(assert (= (ite (= ch57A var57A) 0 1) sc57A))
(assert (= (ite (= ch57B var57B) 0 1) sc57B))
(assert (<= sc57A 1))
(assert (<= sc57B 1))
(assert (= (+ 0
      0
      sc0A
      sc0B
      0
      sc1A
      sc1B
      0
      sc2A
      sc2B
      0
      sc3A
      sc3B
      0
      sc4A
      sc4B
      0
      sc5A
      sc5B
      0
      sc6A
      sc6B
      0
      sc7A
      sc7B
      0
      sc8A
      sc8B
      0
      sc9A
      sc9B
      0
      sc10A
      sc10B
      0
      sc11A
      sc11B
      0
      sc12A
      sc12B
      0
      sc13A
      sc13B
      0
      sc14A
      sc14B
      0
      sc15A
      sc15B
      0
      sc16A
      sc16B
      0
      sc17A
      sc17B
      0
      sc18A
      sc18B
      0
      sc19A
      sc19B
      0
      sc20A
      sc20B
      0
      sc21A
      sc21B
      0
      sc22A
      sc22B
      0
      sc23A
      sc23B
      0
      sc24A
      sc24B
      0
      sc25A
      sc25B
      0
      sc26A
      sc26B
      0
      sc27A
      sc27B
      0
      sc28A
      sc28B
      0
      sc29A
      sc29B
      0
      sc30A
      sc30B
      0
      sc31A
      sc31B
      0
      sc32A
      sc32B
      0
      sc33A
      sc33B
      0
      sc34A
      sc34B
      0
      sc35A
      sc35B
      0
      sc36A
      sc36B
      0
      sc37A
      sc37B
      0
      sc38A
      sc38B
      0
      sc39A
      sc39B
      0
      sc40A
      sc40B
      0
      sc41A
      sc41B
      0
      sc42A
      sc42B
      0
      sc43A
      sc43B
      0
      sc44A
      sc44B
      0
      sc45A
      sc45B
      0
      sc46A
      sc46B
      0
      sc47A
      sc47B
      0
      sc48A
      sc48B
      0
      sc49A
      sc49B
      0
      sc50A
      sc50B
      0
      sc51A
      sc51B
      0
      sc52A
      sc52B
      0
      sc53A
      sc53B
      0
      sc54A
      sc54B
      0
      sc55A
      sc55B
      0
      sc56A
      sc56B
      0
      sc57A
      sc57B)
   19))
(assert (= (+ 0
      sc0B
      sc1B
      sc2B
      sc3B
      sc4B
      sc5B
      sc6B
      sc7B
      sc8B
      sc9B
      sc10B
      sc11B
      sc12B
      sc13B
      sc14B
      sc15B
      sc16B
      sc17B
      sc18B
      sc19B
      sc20B
      sc21B
      sc22B
      sc23B
      sc24B
      sc25B
      sc26B
      sc27B
      sc28B
      sc29B
      sc30B
      sc31B
      sc32B
      sc33B
      sc34B
      sc35B
      sc36B
      sc37B
      sc38B
      sc39B
      sc40B
      sc41B
      sc42B
      sc43B
      sc44B
      sc45B
      sc46B
      sc47B
      sc48B
      sc49B
      sc50B
      sc51B
      sc52B
      sc53B
      sc54B
      sc55B
      sc56B
      sc57B)
   0))

None
6083.17user 0.45system 1:41:24elapsed 99%CPU (0avgtext+0avgdata 75888maxresident)k
0inputs+3720outputs (0major+15037minor)pagefaults 0swaps
